syntax = "proto3";
package gloo.api.v1;
option go_package = "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1";

import "google/protobuf/struct.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";

/*
@solo-kit:resource
@solo-kit:resource.short_name=attr
@solo-kit:resource.plural_name=attributes
@solo-kit:resource.group_name=gloo.solo.io
@solo-kit:resource.version=v1

 * An attribute is a container for configuration that is intended to be applied across a set of labeled resources inside of Gloo.
 * Attributes specify a set of selectors which are compared with labels by Gloo at runtime
 * In the current implementation, only Listeners have be selected, and therefore configured by Attributes.
 * Labels and Selectors follow the same logical patterns implemented by Kubernetes.
 * Read about the Kubernetes concepts here: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
 * Attributes are useful when applying shared configuration to a large number of objects, such as the sharing of route
 * configuration between roles.
 */
message Attribute {
    // Name of the attribute.
    //
    // Attribute Names must be unique and follow the following syntax rules:
    // One or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.
    string name = 1;

    // Attributes can apply only to one kind of resource
    // Currently available are:
    // * Listeners
    oneof attribute_type {
        ListenerAttribute listener_attribute = 2;
    }

    // Status indicates the validation status of the attribute resource.
    // Status is read-only by clients, and set by gloo during validation
    core.solo.io.Status status = 6 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 7 [(gogoproto.nullable) = false];
}

// Listeners define the address:port where the proxy will listen for incoming connections
// Each listener defines a unique set of TCP and HTTP behaviors
message ListenerAttribute {
    // Apply this attribute to listeners with label keys and values matching this
    // selector. If empty or not present, the attribute will not be applied to any listeners.
    map<string, string> selector = 1;

    // Listeners can serve HTTP or raw TCP, but not both. If at least one Virtual Service is specified here,
    // the listener will become an HTTP listener serving routes defined in these virtual services.
    // Some Listener plugins may impose restrictions on the Virtual Services that can be applied to a listener.
    // For example, some plugins may require all applied virtual services only route to a specific upstream,
    // a common requirement for Service Meshes
    repeated string virtual_services = 4;

    // Config contains top-level config to be applied to a listener
    // Listener config is applied to all TCP/HTTP traffic that
    // initiates via this listener.
    // Configuration such as gzip compression and TLS authentication is specified here
    // This config struct will be merged with Role-specific Listener Conig. If two fields overlap between the
    // Listener config on the role and the config on the attribute, the config on the Role will supersede this one
    google.protobuf.Struct config = 5;
}

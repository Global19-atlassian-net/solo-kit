syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/projects/gloo/api/v1/plugins/aws/aws.proto";
import "github.com/solo-io/solo-kit/projects/gloo/api/v1/plugins/azure/azure.proto";
import "github.com/solo-io/solo-kit/projects/gloo/api/v1/plugins/kubernetes/kubernetes.proto";
import "google/protobuf/wrappers.proto";

// Plugin-specific configuration that lives on listeners
// Each ListenerPlugin object contains configuration for a specific plugin
// Note to developers: new Listener Plugins must be added to this struct
// to be usable by Gloo.
message ListenerPlugins {}

// Plugin-specific configuration that lives on virtual hosts
// Each VirtualHostPlugin object contains configuration for a specific plugin
// Note to developers: new Virtual Host Plugins must be added to this struct
// to be usable by Gloo.
message VirtualHostPlugins {}

// Plugin-specific configuration that lives on routes
// Each RoutePlugin object contains configuration for a specific plugin
// Note to developers: new Route Plugins must be added to this struct
// to be usable by Gloo.
message RoutePlugins {}

// Configuration for Destinations that are tied to the UpstreamSpec or ServiceSpec on that destination
message DestinationSpec {
    // Note to developers: new DestinationSpecs must be added to this oneof field
    // to be usable by Gloo.
    oneof destination_type {
        aws.plugins.gloo.solo.io.DestinationSpec aws = 1;
        azure.plugins.gloo.solo.io.DestinationSpec azure = 2;
        RestSpec rest = 3;
    }
}

// TODO: figure out import cycle mess.
message RestSpec {
    string function_name = 1;

    message Parameters {
        // headers that will be used to extract data for processing output templates
        // Gloo will search for parameters by their name in header value strings, enclosed in single
        // curly braces
        // Example:
        //   extensions:
        //     parameters:
        //         headers:
        //           x-user-id: { userId }
        map<string, string> headers = 1;
        // part of the (or the entire) path that will be used extract data for processing output templates
        // Gloo will search for parameters by their name in header value strings, enclosed in single
        // curly braces
        // Example:
        //   extensions:
        //     parameters:
        //         path: /users/{ userId }
        google.protobuf.StringValue path = 2;
        //TODO: support query params
        //TODO: support form params
    }
    Parameters parameters = 2;
}

// Each upstream in Gloo has a type. Supported types include `static`, `kubernetes`, `aws`, `consul`, and more.
// Each upstream type is handled by a corresponding Gloo plugin.
message UpstreamSpec {
    // Note to developers: new Upstream Plugins must be added to this oneof field
    // to be usable by Gloo.
    oneof upstream_type {
        kubernetes.plugins.gloo.solo.io.UpstreamSpec kube = 1;
        aws.plugins.gloo.solo.io.UpstreamSpec aws = 2;
        azure.plugins.gloo.solo.io.UpstreamSpec azure = 3;
    }
}

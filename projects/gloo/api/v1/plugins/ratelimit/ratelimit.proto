syntax = "proto3";
package plugins.gloo.solo.io;
option go_package = "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1/plugins/ratelimit";


import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

message Limit {
    uint32 requests_per_unit = 1;
    
    enum Unit {
        UNKNOWN = 0;
        SECOND = 1;
        MINUTE = 2;
        HOUR = 3;
        DAY = 4;
    };

    Unit unit = 2;
}

message RateLimit {
    string header = 1; // Defaults to authorization.
    Limit authenticated = 2;
    Limit anonymous = 3;
}


// Server config:
// TODO: talk about this with scott - how to best depend on envoy protobufs.
// Probably expect envoy dir somewhere and generate including it.
// Q: How do we express dependencies? (put them in a file? bazel? put them in the script?)
message Constraint {
    string key = 1;
    string value = 2;
    enum Unit {
        UNKNOWN = 0;
        SECOND = 1;
        MINUTE = 2;
        HOUR = 3;
        DAY = 4;
    }
    message RateLimit {
        
        Unit unit = 1;
        uint32 requests_per_unit = 2;
    }
    RateLimit rate_limit = 3;
    repeated Constraint constraints = 5;
}

message RateLimitConfig {
    string domain = 1;
    repeated Constraint constraints = 2;
}

// this config will reside inside the gloo virtual service and will get
// translated to rate limit config for the rate limit server. and rate limit config in envoy's virtual host.
message IngressRateLimitConfig {
    string authrorized_header = 1;
    RateLimit authorized_limits = 2;
    RateLimit anonymous_limits = 3;
}
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ratelimit/ratelimit.proto

/*
Package ratelimit is a generated protocol buffer package.

It is generated from these files:
	ratelimit/ratelimit.proto

It has these top-level messages:
	RateLimit
	UserRateLimit
	Constraint
	RateLimitConfig
	IngressRateLimitConfig
*/
package ratelimit

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RateLimit_Unit int32

const (
	RateLimit_UNKNOWN RateLimit_Unit = 0
	RateLimit_SECOND  RateLimit_Unit = 1
	RateLimit_MINUTE  RateLimit_Unit = 2
	RateLimit_HOUR    RateLimit_Unit = 3
	RateLimit_DAY     RateLimit_Unit = 4
)

var RateLimit_Unit_name = map[int32]string{
	0: "UNKNOWN",
	1: "SECOND",
	2: "MINUTE",
	3: "HOUR",
	4: "DAY",
}
var RateLimit_Unit_value = map[string]int32{
	"UNKNOWN": 0,
	"SECOND":  1,
	"MINUTE":  2,
	"HOUR":    3,
	"DAY":     4,
}

func (x RateLimit_Unit) String() string {
	return proto.EnumName(RateLimit_Unit_name, int32(x))
}
func (RateLimit_Unit) EnumDescriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{0, 0} }

type RateLimit struct {
	Unit            RateLimit_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=plugins.gloo.solo.io.RateLimit_Unit" json:"unit,omitempty"`
	RequestsPerUnit uint32         `protobuf:"varint,2,opt,name=requests_per_unit,json=requestsPerUnit,proto3" json:"requests_per_unit,omitempty"`
}

func (m *RateLimit) Reset()                    { *m = RateLimit{} }
func (m *RateLimit) String() string            { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()               {}
func (*RateLimit) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{0} }

func (m *RateLimit) GetUnit() RateLimit_Unit {
	if m != nil {
		return m.Unit
	}
	return RateLimit_UNKNOWN
}

func (m *RateLimit) GetRequestsPerUnit() uint32 {
	if m != nil {
		return m.RequestsPerUnit
	}
	return 0
}

// User Config
type UserRateLimit struct {
	TrustedHeader string     `protobuf:"bytes,1,opt,name=trusted_header,json=trustedHeader,proto3" json:"trusted_header,omitempty"`
	Authenticated *RateLimit `protobuf:"bytes,2,opt,name=authenticated" json:"authenticated,omitempty"`
	Anonymous     *RateLimit `protobuf:"bytes,3,opt,name=anonymous" json:"anonymous,omitempty"`
}

func (m *UserRateLimit) Reset()                    { *m = UserRateLimit{} }
func (m *UserRateLimit) String() string            { return proto.CompactTextString(m) }
func (*UserRateLimit) ProtoMessage()               {}
func (*UserRateLimit) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{1} }

func (m *UserRateLimit) GetTrustedHeader() string {
	if m != nil {
		return m.TrustedHeader
	}
	return ""
}

func (m *UserRateLimit) GetAuthenticated() *RateLimit {
	if m != nil {
		return m.Authenticated
	}
	return nil
}

func (m *UserRateLimit) GetAnonymous() *RateLimit {
	if m != nil {
		return m.Anonymous
	}
	return nil
}

// Server config:
type Constraint struct {
	Key         string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	RateLimit   *RateLimit    `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit" json:"rate_limit,omitempty"`
	Constraints []*Constraint `protobuf:"bytes,4,rep,name=constraints" json:"constraints,omitempty"`
}

func (m *Constraint) Reset()                    { *m = Constraint{} }
func (m *Constraint) String() string            { return proto.CompactTextString(m) }
func (*Constraint) ProtoMessage()               {}
func (*Constraint) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{2} }

func (m *Constraint) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Constraint) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Constraint) GetRateLimit() *RateLimit {
	if m != nil {
		return m.RateLimit
	}
	return nil
}

func (m *Constraint) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type RateLimitConfig struct {
	Domain      string        `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Constraints []*Constraint `protobuf:"bytes,2,rep,name=constraints" json:"constraints,omitempty"`
}

func (m *RateLimitConfig) Reset()                    { *m = RateLimitConfig{} }
func (m *RateLimitConfig) String() string            { return proto.CompactTextString(m) }
func (*RateLimitConfig) ProtoMessage()               {}
func (*RateLimitConfig) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{3} }

func (m *RateLimitConfig) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RateLimitConfig) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

// this config will reside inside the gloo virtual service and will get
// translated to rate limit config for the rate limit server. and rate limit config in envoy's virtual host.
type IngressRateLimitConfig struct {
	AuthrorizedHeader string     `protobuf:"bytes,1,opt,name=authrorized_header,json=authrorizedHeader,proto3" json:"authrorized_header,omitempty"`
	AuthorizedLimits  *RateLimit `protobuf:"bytes,2,opt,name=authorized_limits,json=authorizedLimits" json:"authorized_limits,omitempty"`
	AnonymousLimits   *RateLimit `protobuf:"bytes,3,opt,name=anonymous_limits,json=anonymousLimits" json:"anonymous_limits,omitempty"`
}

func (m *IngressRateLimitConfig) Reset()                    { *m = IngressRateLimitConfig{} }
func (m *IngressRateLimitConfig) String() string            { return proto.CompactTextString(m) }
func (*IngressRateLimitConfig) ProtoMessage()               {}
func (*IngressRateLimitConfig) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{4} }

func (m *IngressRateLimitConfig) GetAuthrorizedHeader() string {
	if m != nil {
		return m.AuthrorizedHeader
	}
	return ""
}

func (m *IngressRateLimitConfig) GetAuthorizedLimits() *RateLimit {
	if m != nil {
		return m.AuthorizedLimits
	}
	return nil
}

func (m *IngressRateLimitConfig) GetAnonymousLimits() *RateLimit {
	if m != nil {
		return m.AnonymousLimits
	}
	return nil
}

func init() {
	proto.RegisterType((*RateLimit)(nil), "plugins.gloo.solo.io.RateLimit")
	proto.RegisterType((*UserRateLimit)(nil), "plugins.gloo.solo.io.UserRateLimit")
	proto.RegisterType((*Constraint)(nil), "plugins.gloo.solo.io.Constraint")
	proto.RegisterType((*RateLimitConfig)(nil), "plugins.gloo.solo.io.RateLimitConfig")
	proto.RegisterType((*IngressRateLimitConfig)(nil), "plugins.gloo.solo.io.IngressRateLimitConfig")
	proto.RegisterEnum("plugins.gloo.solo.io.RateLimit_Unit", RateLimit_Unit_name, RateLimit_Unit_value)
}
func (this *RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimit)
	if !ok {
		that2, ok := that.(RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if this.RequestsPerUnit != that1.RequestsPerUnit {
		return false
	}
	return true
}
func (this *UserRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserRateLimit)
	if !ok {
		that2, ok := that.(UserRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TrustedHeader != that1.TrustedHeader {
		return false
	}
	if !this.Authenticated.Equal(that1.Authenticated) {
		return false
	}
	if !this.Anonymous.Equal(that1.Anonymous) {
		return false
	}
	return true
}
func (this *Constraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Constraint)
	if !ok {
		that2, ok := that.(Constraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return false
	}
	for i := range this.Constraints {
		if !this.Constraints[i].Equal(that1.Constraints[i]) {
			return false
		}
	}
	return true
}
func (this *RateLimitConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfig)
	if !ok {
		that2, ok := that.(RateLimitConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return false
	}
	for i := range this.Constraints {
		if !this.Constraints[i].Equal(that1.Constraints[i]) {
			return false
		}
	}
	return true
}
func (this *IngressRateLimitConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IngressRateLimitConfig)
	if !ok {
		that2, ok := that.(IngressRateLimitConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthrorizedHeader != that1.AuthrorizedHeader {
		return false
	}
	if !this.AuthorizedLimits.Equal(that1.AuthorizedLimits) {
		return false
	}
	if !this.AnonymousLimits.Equal(that1.AnonymousLimits) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("ratelimit/ratelimit.proto", fileDescriptorRatelimit) }

var fileDescriptorRatelimit = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x27, 0x6d, 0xe8, 0xe8, 0xab, 0xba, 0x66, 0x56, 0x35, 0x15, 0x0e, 0x50, 0x45, 0x20, 0x55,
	0x48, 0x4b, 0x44, 0xb9, 0x70, 0x61, 0x12, 0xeb, 0x8a, 0x36, 0x28, 0x29, 0x0a, 0x44, 0x08, 0x2e,
	0x95, 0xd7, 0x9a, 0xd4, 0x34, 0xb1, 0x83, 0xed, 0x4c, 0x1a, 0x9f, 0x88, 0x2b, 0x37, 0x0e, 0x7c,
	0x19, 0xf8, 0x24, 0xc8, 0x6e, 0x96, 0x8c, 0x6a, 0x12, 0xd5, 0x4e, 0x7e, 0x7e, 0x7e, 0xbf, 0x3f,
	0xf6, 0x4f, 0x09, 0xdc, 0x15, 0x58, 0x91, 0x84, 0xa6, 0x54, 0xf9, 0x65, 0xe5, 0x65, 0x82, 0x2b,
	0x8e, 0xba, 0x59, 0x92, 0xc7, 0x94, 0x49, 0x2f, 0x4e, 0x38, 0xf7, 0x24, 0x4f, 0xb8, 0x47, 0xf9,
	0xbd, 0x6e, 0xcc, 0x63, 0x6e, 0x06, 0x7c, 0x5d, 0xad, 0x67, 0xdd, 0x1f, 0x16, 0x34, 0x43, 0xac,
	0xc8, 0x44, 0xe3, 0xd1, 0x33, 0xb0, 0x73, 0x46, 0x55, 0xcf, 0xea, 0x5b, 0x83, 0xdd, 0xe1, 0x43,
	0xef, 0x3a, 0x22, 0xaf, 0x1c, 0xf7, 0x22, 0x46, 0x55, 0x68, 0x10, 0xe8, 0x31, 0xec, 0x09, 0xf2,
	0x35, 0x27, 0x52, 0xc9, 0x59, 0x46, 0xc4, 0xcc, 0xd0, 0xd4, 0xfa, 0xd6, 0xa0, 0x1d, 0x76, 0x2e,
	0x0f, 0xde, 0x12, 0xa1, 0x11, 0xee, 0x21, 0xd8, 0x7a, 0x45, 0x2d, 0xd8, 0x89, 0x82, 0xd7, 0xc1,
	0xf4, 0x43, 0xe0, 0xdc, 0x42, 0x00, 0x8d, 0x77, 0xe3, 0xd1, 0x34, 0x38, 0x76, 0x2c, 0x5d, 0xbf,
	0x39, 0x0d, 0xa2, 0xf7, 0x63, 0xa7, 0x86, 0xee, 0x80, 0x7d, 0x32, 0x8d, 0x42, 0xa7, 0x8e, 0x76,
	0xa0, 0x7e, 0xfc, 0xe2, 0xa3, 0x63, 0xbb, 0xbf, 0x2c, 0x68, 0x47, 0x92, 0x88, 0xca, 0xf7, 0x23,
	0xd8, 0x55, 0x22, 0x97, 0x8a, 0x2c, 0x66, 0x4b, 0x82, 0x17, 0x44, 0x98, 0x1b, 0x34, 0xc3, 0x76,
	0xd1, 0x3d, 0x31, 0x4d, 0x34, 0x86, 0x36, 0xce, 0xd5, 0x92, 0x30, 0x45, 0xe7, 0x58, 0x91, 0x85,
	0x31, 0xd8, 0x1a, 0x3e, 0xf8, 0xcf, 0x3d, 0xc3, 0x7f, 0x51, 0xe8, 0x39, 0x34, 0x31, 0xe3, 0xec,
	0x22, 0xe5, 0xb9, 0xec, 0xd5, 0xb7, 0xa3, 0xa8, 0x10, 0xee, 0x4f, 0x0b, 0x60, 0xc4, 0x99, 0x54,
	0x02, 0x53, 0xa6, 0x90, 0x03, 0xf5, 0x15, 0xb9, 0x28, 0x0c, 0xeb, 0x12, 0x75, 0xe1, 0xf6, 0x39,
	0x4e, 0x72, 0x62, 0xec, 0x35, 0xc3, 0xf5, 0x06, 0x1d, 0x02, 0xe8, 0xa0, 0x67, 0x26, 0xe9, 0xad,
	0x65, 0x45, 0xf9, 0x46, 0x47, 0xd0, 0x9a, 0x97, 0xaa, 0xb2, 0x67, 0xf7, 0xeb, 0x83, 0xd6, 0xb0,
	0x7f, 0x3d, 0x41, 0x65, 0x2f, 0xbc, 0x0a, 0x72, 0x53, 0xe8, 0x94, 0xdc, 0x23, 0xce, 0x3e, 0xd3,
	0x18, 0xed, 0x43, 0x63, 0xc1, 0x53, 0x4c, 0x59, 0x71, 0x83, 0x62, 0xb7, 0x29, 0x57, 0xbb, 0x89,
	0xdc, 0x6f, 0x0b, 0xf6, 0x4f, 0x59, 0x2c, 0x88, 0x94, 0x9b, 0xb2, 0x07, 0x80, 0x74, 0x28, 0x82,
	0x0b, 0xfa, 0x6d, 0x33, 0xf5, 0xbd, 0x2b, 0x27, 0x45, 0xf2, 0x13, 0x30, 0xcd, 0x62, 0xda, 0x3c,
	0xa1, 0xdc, 0x36, 0x7d, 0xa7, 0x42, 0x9a, 0x86, 0x44, 0xaf, 0xc0, 0x29, 0xe3, 0xbc, 0x24, 0xdb,
	0x32, 0x90, 0x4e, 0x09, 0x5c, 0x73, 0x1d, 0x4d, 0xbe, 0xff, 0xb9, 0x6f, 0x7d, 0x7a, 0x19, 0x53,
	0xb5, 0xcc, 0xcf, 0xbc, 0x39, 0x4f, 0x7d, 0x0d, 0x3a, 0xa0, 0x7c, 0xbd, 0xae, 0xa8, 0xf2, 0x33,
	0xc1, 0xbf, 0x90, 0xb9, 0x92, 0xbe, 0xe6, 0xf4, 0xb3, 0x55, 0xec, 0xe3, 0x8c, 0xfa, 0xe7, 0x4f,
	0xfc, 0x42, 0xab, 0xfa, 0x01, 0x9c, 0x35, 0xcc, 0x57, 0xfd, 0xf4, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4e, 0x39, 0x9b, 0x54, 0x1e, 0x04, 0x00, 0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: plugins/ratelimit/ratelimit.proto

/*
Package ratelimit is a generated protocol buffer package.

It is generated from these files:
	plugins/ratelimit/ratelimit.proto

It has these top-level messages:
	Limit
	RateLimit
	Constraint
	RateLimitConfig
	IngressRateLimitConfig
*/
package ratelimit

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Limit_Unit int32

const (
	Limit_UNKNOWN Limit_Unit = 0
	Limit_SECOND  Limit_Unit = 1
	Limit_MINUTE  Limit_Unit = 2
	Limit_HOUR    Limit_Unit = 3
	Limit_DAY     Limit_Unit = 4
)

var Limit_Unit_name = map[int32]string{
	0: "UNKNOWN",
	1: "SECOND",
	2: "MINUTE",
	3: "HOUR",
	4: "DAY",
}
var Limit_Unit_value = map[string]int32{
	"UNKNOWN": 0,
	"SECOND":  1,
	"MINUTE":  2,
	"HOUR":    3,
	"DAY":     4,
}

func (x Limit_Unit) String() string {
	return proto.EnumName(Limit_Unit_name, int32(x))
}
func (Limit_Unit) EnumDescriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{0, 0} }

type Constraint_Unit int32

const (
	Constraint_UNKNOWN Constraint_Unit = 0
	Constraint_SECOND  Constraint_Unit = 1
	Constraint_MINUTE  Constraint_Unit = 2
	Constraint_HOUR    Constraint_Unit = 3
	Constraint_DAY     Constraint_Unit = 4
)

var Constraint_Unit_name = map[int32]string{
	0: "UNKNOWN",
	1: "SECOND",
	2: "MINUTE",
	3: "HOUR",
	4: "DAY",
}
var Constraint_Unit_value = map[string]int32{
	"UNKNOWN": 0,
	"SECOND":  1,
	"MINUTE":  2,
	"HOUR":    3,
	"DAY":     4,
}

func (x Constraint_Unit) String() string {
	return proto.EnumName(Constraint_Unit_name, int32(x))
}
func (Constraint_Unit) EnumDescriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{2, 0} }

type Limit struct {
	RequestsPerUnit uint32     `protobuf:"varint,1,opt,name=requests_per_unit,json=requestsPerUnit,proto3" json:"requests_per_unit,omitempty"`
	Unit            Limit_Unit `protobuf:"varint,2,opt,name=unit,proto3,enum=plugins.gloo.solo.io.Limit_Unit" json:"unit,omitempty"`
}

func (m *Limit) Reset()                    { *m = Limit{} }
func (m *Limit) String() string            { return proto.CompactTextString(m) }
func (*Limit) ProtoMessage()               {}
func (*Limit) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{0} }

func (m *Limit) GetRequestsPerUnit() uint32 {
	if m != nil {
		return m.RequestsPerUnit
	}
	return 0
}

func (m *Limit) GetUnit() Limit_Unit {
	if m != nil {
		return m.Unit
	}
	return Limit_UNKNOWN
}

type RateLimit struct {
	Header        string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Authenticated *Limit `protobuf:"bytes,2,opt,name=authenticated" json:"authenticated,omitempty"`
	Anonymous     *Limit `protobuf:"bytes,3,opt,name=anonymous" json:"anonymous,omitempty"`
}

func (m *RateLimit) Reset()                    { *m = RateLimit{} }
func (m *RateLimit) String() string            { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()               {}
func (*RateLimit) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{1} }

func (m *RateLimit) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *RateLimit) GetAuthenticated() *Limit {
	if m != nil {
		return m.Authenticated
	}
	return nil
}

func (m *RateLimit) GetAnonymous() *Limit {
	if m != nil {
		return m.Anonymous
	}
	return nil
}

// Server config:
// TODO: talk about this with scott - how to best depend on envoy protobufs.
// Probably expect envoy dir somewhere and generate including it.
// Q: How do we express dependencies? (put them in a file? bazel? put them in the script?)
type Constraint struct {
	Key         string                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	RateLimit   *Constraint_RateLimit `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit" json:"rate_limit,omitempty"`
	Constraints []*Constraint         `protobuf:"bytes,5,rep,name=constraints" json:"constraints,omitempty"`
}

func (m *Constraint) Reset()                    { *m = Constraint{} }
func (m *Constraint) String() string            { return proto.CompactTextString(m) }
func (*Constraint) ProtoMessage()               {}
func (*Constraint) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{2} }

func (m *Constraint) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Constraint) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Constraint) GetRateLimit() *Constraint_RateLimit {
	if m != nil {
		return m.RateLimit
	}
	return nil
}

func (m *Constraint) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type Constraint_RateLimit struct {
	Unit            Constraint_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=plugins.gloo.solo.io.Constraint_Unit" json:"unit,omitempty"`
	RequestsPerUnit uint32          `protobuf:"varint,2,opt,name=requests_per_unit,json=requestsPerUnit,proto3" json:"requests_per_unit,omitempty"`
}

func (m *Constraint_RateLimit) Reset()                    { *m = Constraint_RateLimit{} }
func (m *Constraint_RateLimit) String() string            { return proto.CompactTextString(m) }
func (*Constraint_RateLimit) ProtoMessage()               {}
func (*Constraint_RateLimit) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{2, 0} }

func (m *Constraint_RateLimit) GetUnit() Constraint_Unit {
	if m != nil {
		return m.Unit
	}
	return Constraint_UNKNOWN
}

func (m *Constraint_RateLimit) GetRequestsPerUnit() uint32 {
	if m != nil {
		return m.RequestsPerUnit
	}
	return 0
}

type RateLimitConfig struct {
	Domain      string        `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Constraints []*Constraint `protobuf:"bytes,2,rep,name=constraints" json:"constraints,omitempty"`
}

func (m *RateLimitConfig) Reset()                    { *m = RateLimitConfig{} }
func (m *RateLimitConfig) String() string            { return proto.CompactTextString(m) }
func (*RateLimitConfig) ProtoMessage()               {}
func (*RateLimitConfig) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{3} }

func (m *RateLimitConfig) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RateLimitConfig) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

// this config will reside inside the gloo virtual service and will get
// translated to rate limit config for the rate limit server. and rate limit config in envoy's virtual host.
type IngressRateLimitConfig struct {
	AuthrorizedHeader string     `protobuf:"bytes,1,opt,name=authrorized_header,json=authrorizedHeader,proto3" json:"authrorized_header,omitempty"`
	AuthorizedLimits  *RateLimit `protobuf:"bytes,2,opt,name=authorized_limits,json=authorizedLimits" json:"authorized_limits,omitempty"`
	AnonymousLimits   *RateLimit `protobuf:"bytes,3,opt,name=anonymous_limits,json=anonymousLimits" json:"anonymous_limits,omitempty"`
}

func (m *IngressRateLimitConfig) Reset()                    { *m = IngressRateLimitConfig{} }
func (m *IngressRateLimitConfig) String() string            { return proto.CompactTextString(m) }
func (*IngressRateLimitConfig) ProtoMessage()               {}
func (*IngressRateLimitConfig) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{4} }

func (m *IngressRateLimitConfig) GetAuthrorizedHeader() string {
	if m != nil {
		return m.AuthrorizedHeader
	}
	return ""
}

func (m *IngressRateLimitConfig) GetAuthorizedLimits() *RateLimit {
	if m != nil {
		return m.AuthorizedLimits
	}
	return nil
}

func (m *IngressRateLimitConfig) GetAnonymousLimits() *RateLimit {
	if m != nil {
		return m.AnonymousLimits
	}
	return nil
}

func init() {
	proto.RegisterType((*Limit)(nil), "plugins.gloo.solo.io.Limit")
	proto.RegisterType((*RateLimit)(nil), "plugins.gloo.solo.io.RateLimit")
	proto.RegisterType((*Constraint)(nil), "plugins.gloo.solo.io.Constraint")
	proto.RegisterType((*Constraint_RateLimit)(nil), "plugins.gloo.solo.io.Constraint.RateLimit")
	proto.RegisterType((*RateLimitConfig)(nil), "plugins.gloo.solo.io.RateLimitConfig")
	proto.RegisterType((*IngressRateLimitConfig)(nil), "plugins.gloo.solo.io.IngressRateLimitConfig")
	proto.RegisterEnum("plugins.gloo.solo.io.Limit_Unit", Limit_Unit_name, Limit_Unit_value)
	proto.RegisterEnum("plugins.gloo.solo.io.Constraint_Unit", Constraint_Unit_name, Constraint_Unit_value)
}
func (this *Limit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Limit)
	if !ok {
		that2, ok := that.(Limit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestsPerUnit != that1.RequestsPerUnit {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	return true
}
func (this *RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimit)
	if !ok {
		that2, ok := that.(RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Header != that1.Header {
		return false
	}
	if !this.Authenticated.Equal(that1.Authenticated) {
		return false
	}
	if !this.Anonymous.Equal(that1.Anonymous) {
		return false
	}
	return true
}
func (this *Constraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Constraint)
	if !ok {
		that2, ok := that.(Constraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return false
	}
	for i := range this.Constraints {
		if !this.Constraints[i].Equal(that1.Constraints[i]) {
			return false
		}
	}
	return true
}
func (this *Constraint_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Constraint_RateLimit)
	if !ok {
		that2, ok := that.(Constraint_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if this.RequestsPerUnit != that1.RequestsPerUnit {
		return false
	}
	return true
}
func (this *RateLimitConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfig)
	if !ok {
		that2, ok := that.(RateLimitConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return false
	}
	for i := range this.Constraints {
		if !this.Constraints[i].Equal(that1.Constraints[i]) {
			return false
		}
	}
	return true
}
func (this *IngressRateLimitConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IngressRateLimitConfig)
	if !ok {
		that2, ok := that.(IngressRateLimitConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthrorizedHeader != that1.AuthrorizedHeader {
		return false
	}
	if !this.AuthorizedLimits.Equal(that1.AuthorizedLimits) {
		return false
	}
	if !this.AnonymousLimits.Equal(that1.AnonymousLimits) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("plugins/ratelimit/ratelimit.proto", fileDescriptorRatelimit) }

var fileDescriptorRatelimit = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x25, 0x4d, 0xdb, 0xd1, 0x5b, 0x8d, 0x66, 0x56, 0x35, 0x55, 0x43, 0x82, 0x52, 0x09, 0xa9,
	0x9a, 0xb4, 0x44, 0x0c, 0x5e, 0xf6, 0x82, 0xb4, 0x75, 0x43, 0x2b, 0x94, 0x16, 0x05, 0x2a, 0x04,
	0x2f, 0x95, 0xd7, 0x9a, 0xd4, 0xb4, 0xb1, 0x83, 0xed, 0x4c, 0x1a, 0x7f, 0xc3, 0x1b, 0x7c, 0x16,
	0xfc, 0x04, 0xaf, 0xc8, 0x4e, 0x9a, 0x74, 0x23, 0x30, 0xc4, 0x9e, 0x72, 0x1d, 0x9f, 0x73, 0xef,
	0xd1, 0x3d, 0x47, 0x86, 0x07, 0xd1, 0x32, 0x0e, 0x28, 0x93, 0x9e, 0xc0, 0x8a, 0x2c, 0x69, 0x48,
	0x55, 0x5e, 0xb9, 0x91, 0xe0, 0x8a, 0xa3, 0x66, 0x0a, 0x71, 0x83, 0x25, 0xe7, 0xae, 0xe4, 0x4b,
	0xee, 0x52, 0xbe, 0xd3, 0x0c, 0x78, 0xc0, 0x0d, 0xc0, 0xd3, 0x55, 0x82, 0xed, 0x7c, 0xb3, 0xa0,
	0x32, 0xd0, 0x5c, 0xb4, 0x0b, 0x5b, 0x82, 0x7c, 0x8a, 0x89, 0x54, 0x72, 0x12, 0x11, 0x31, 0x89,
	0x19, 0x55, 0x2d, 0xab, 0x6d, 0x75, 0x37, 0xfd, 0xc6, 0xea, 0xe2, 0x15, 0x11, 0x63, 0x46, 0x15,
	0x7a, 0x02, 0x65, 0x73, 0x5d, 0x6a, 0x5b, 0xdd, 0x3b, 0xfb, 0x6d, 0xb7, 0x68, 0xa0, 0x6b, 0xda,
	0xba, 0x1a, 0xef, 0x1b, 0x74, 0xe7, 0x29, 0x94, 0x0d, 0xbb, 0x0e, 0x1b, 0xe3, 0xe1, 0x8b, 0xe1,
	0xe8, 0xed, 0xd0, 0xb9, 0x85, 0x00, 0xaa, 0xaf, 0x4f, 0x7a, 0xa3, 0xe1, 0xb1, 0x63, 0xe9, 0xfa,
	0x65, 0x7f, 0x38, 0x7e, 0x73, 0xe2, 0x94, 0xd0, 0x6d, 0x28, 0x9f, 0x8e, 0xc6, 0xbe, 0x63, 0xa3,
	0x0d, 0xb0, 0x8f, 0x0f, 0xdf, 0x39, 0xe5, 0xce, 0x17, 0x0b, 0x6a, 0x3e, 0x56, 0x24, 0xd1, 0xbb,
	0x0d, 0xd5, 0x39, 0xc1, 0x33, 0x22, 0x8c, 0xc8, 0x9a, 0x9f, 0x9e, 0xd0, 0x21, 0x6c, 0xe2, 0x58,
	0xcd, 0x09, 0x53, 0x74, 0x8a, 0x15, 0x99, 0x19, 0x91, 0xf5, 0xfd, 0xbb, 0x7f, 0x11, 0xe9, 0x5f,
	0x66, 0xa0, 0x03, 0xa8, 0x61, 0xc6, 0xd9, 0x45, 0xc8, 0x63, 0xd9, 0xb2, 0xaf, 0xa7, 0xe7, 0xe8,
	0xce, 0xcf, 0x12, 0x40, 0x8f, 0x33, 0xa9, 0x04, 0xa6, 0x4c, 0x21, 0x07, 0xec, 0x05, 0xb9, 0x48,
	0x15, 0xea, 0x12, 0x35, 0xa1, 0x72, 0x8e, 0x97, 0x31, 0x31, 0xb2, 0x6a, 0x7e, 0x72, 0x40, 0x7d,
	0x00, 0xed, 0xe2, 0xc4, 0xd8, 0x98, 0x8e, 0xdc, 0x2d, 0x1e, 0x99, 0x77, 0x77, 0xb3, 0x65, 0xf8,
	0x35, 0x91, 0xed, 0xe5, 0x08, 0xea, 0xd3, 0x0c, 0x22, 0x5b, 0x95, 0xb6, 0xdd, 0xad, 0xff, 0xc9,
	0xa2, 0xbc, 0x97, 0xbf, 0x4e, 0xda, 0x11, 0xeb, 0x8b, 0x3e, 0x48, 0xcd, 0xb6, 0x8c, 0xd9, 0x0f,
	0xaf, 0x55, 0x95, 0x3b, 0x5e, 0x9c, 0xa9, 0x52, 0x61, 0xa6, 0x6e, 0x9c, 0x8e, 0x10, 0x1a, 0x99,
	0xe6, 0x1e, 0x67, 0x1f, 0x68, 0xa0, 0x23, 0x32, 0xe3, 0x21, 0xa6, 0x6c, 0x15, 0x91, 0xe4, 0x74,
	0x75, 0x45, 0xa5, 0xff, 0x58, 0x51, 0xe7, 0xbb, 0x05, 0xdb, 0x7d, 0x16, 0x08, 0x22, 0xe5, 0xd5,
	0xb1, 0x7b, 0x80, 0x74, 0x9e, 0x04, 0x17, 0xf4, 0x33, 0x99, 0x4d, 0x2e, 0xa5, 0x74, 0x6b, 0xed,
	0xe6, 0x34, 0x09, 0xec, 0x00, 0xcc, 0xcf, 0x14, 0x6d, 0x12, 0x20, 0xd3, 0xd0, 0xde, 0x2f, 0xd6,
	0x94, 0xfb, 0xee, 0xe4, 0x4c, 0xf3, 0x43, 0xa2, 0xe7, 0xe0, 0x64, 0x69, 0x5c, 0x35, 0xb3, 0xff,
	0xad, 0x59, 0x23, 0x23, 0x26, 0xbd, 0x8e, 0x06, 0x5f, 0x7f, 0xdc, 0xb3, 0xde, 0x3f, 0x0b, 0xa8,
	0x9a, 0xc7, 0x67, 0xee, 0x94, 0x87, 0x9e, 0x26, 0xed, 0x51, 0x9e, 0x7c, 0x17, 0x54, 0x79, 0x91,
	0xe0, 0x1f, 0xc9, 0x54, 0x49, 0x4f, 0xf7, 0xf4, 0xa2, 0x45, 0xe0, 0xe1, 0x88, 0x7a, 0xe7, 0x8f,
	0xbc, 0xdf, 0x9e, 0xa9, 0xb3, 0xaa, 0x79, 0x71, 0x1e, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x93,
	0xf1, 0x19, 0xa1, 0xc2, 0x04, 0x00, 0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rest/rest.proto

/*
Package rest is a generated protocol buffer package.

It is generated from these files:
	rest/rest.proto

It has these top-level messages:
	ServiceSpec
	DestinationSpec
*/
package rest

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"
import envoy_api_v2_filter_http "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1/plugins/transformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ServiceSpec struct {
	Transformation map[string]*envoy_api_v2_filter_http.TransformationTemplate `protobuf:"bytes,1,rep,name=transformation" json:"transformation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ServiceSpec) Reset()                    { *m = ServiceSpec{} }
func (m *ServiceSpec) String() string            { return proto.CompactTextString(m) }
func (*ServiceSpec) ProtoMessage()               {}
func (*ServiceSpec) Descriptor() ([]byte, []int) { return fileDescriptorRest, []int{0} }

func (m *ServiceSpec) GetTransformation() map[string]*envoy_api_v2_filter_http.TransformationTemplate {
	if m != nil {
		return m.Transformation
	}
	return nil
}

// TODO: figure out import cycle mess.
type DestinationSpec struct {
	FunctionName string                      `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Parameters   *DestinationSpec_Parameters `protobuf:"bytes,2,opt,name=parameters" json:"parameters,omitempty"`
}

func (m *DestinationSpec) Reset()                    { *m = DestinationSpec{} }
func (m *DestinationSpec) String() string            { return proto.CompactTextString(m) }
func (*DestinationSpec) ProtoMessage()               {}
func (*DestinationSpec) Descriptor() ([]byte, []int) { return fileDescriptorRest, []int{1} }

func (m *DestinationSpec) GetFunctionName() string {
	if m != nil {
		return m.FunctionName
	}
	return ""
}

func (m *DestinationSpec) GetParameters() *DestinationSpec_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type DestinationSpec_Parameters struct {
	// headers that will be used to extract data for processing output templates
	// Gloo will search for parameters by their name in header value strings, enclosed in single
	// curly braces
	// Example:
	//   extensions:
	//     parameters:
	//         headers:
	//           x-user-id: { userId }
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// part of the (or the entire) path that will be used extract data for processing output templates
	// Gloo will search for parameters by their name in header value strings, enclosed in single
	// curly braces
	// Example:
	//   extensions:
	//     parameters:
	//         path: /users/{ userId }
	Path *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *DestinationSpec_Parameters) Reset()         { *m = DestinationSpec_Parameters{} }
func (m *DestinationSpec_Parameters) String() string { return proto.CompactTextString(m) }
func (*DestinationSpec_Parameters) ProtoMessage()    {}
func (*DestinationSpec_Parameters) Descriptor() ([]byte, []int) {
	return fileDescriptorRest, []int{1, 0}
}

func (m *DestinationSpec_Parameters) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *DestinationSpec_Parameters) GetPath() *google_protobuf.StringValue {
	if m != nil {
		return m.Path
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceSpec)(nil), "rest.plugins.gloo.solo.io.ServiceSpec")
	proto.RegisterType((*DestinationSpec)(nil), "rest.plugins.gloo.solo.io.DestinationSpec")
	proto.RegisterType((*DestinationSpec_Parameters)(nil), "rest.plugins.gloo.solo.io.DestinationSpec.Parameters")
}
func (this *ServiceSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSpec)
	if !ok {
		that2, ok := that.(ServiceSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Transformation) != len(that1.Transformation) {
		return false
	}
	for i := range this.Transformation {
		if !this.Transformation[i].Equal(that1.Transformation[i]) {
			return false
		}
	}
	return true
}
func (this *DestinationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec)
	if !ok {
		that2, ok := that.(DestinationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FunctionName != that1.FunctionName {
		return false
	}
	if !this.Parameters.Equal(that1.Parameters) {
		return false
	}
	return true
}
func (this *DestinationSpec_Parameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Parameters)
	if !ok {
		that2, ok := that.(DestinationSpec_Parameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if this.Headers[i] != that1.Headers[i] {
			return false
		}
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("rest/rest.proto", fileDescriptorRest) }

var fileDescriptorRest = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0x96, 0x53, 0x7e, 0x54, 0xa7, 0x50, 0xb4, 0xf4, 0x10, 0x56, 0xa8, 0x8a, 0xca, 0x25, 0x17,
	0xc6, 0x25, 0x08, 0x09, 0xe5, 0x46, 0xc5, 0xdf, 0x09, 0xa1, 0x4d, 0xe1, 0x80, 0x2a, 0x21, 0x67,
	0x99, 0x38, 0x26, 0xbb, 0xb6, 0x65, 0x7b, 0x17, 0xe5, 0x8d, 0x78, 0x24, 0xce, 0x1c, 0x10, 0x8f,
	0x81, 0xbc, 0xde, 0xc0, 0x76, 0x15, 0x10, 0xea, 0x25, 0x19, 0x7b, 0xbf, 0x9f, 0x99, 0xcf, 0x43,
	0x0f, 0x2d, 0x3a, 0xcf, 0xc2, 0x0f, 0x18, 0xab, 0xbd, 0x4e, 0xee, 0xc5, 0xba, 0xa8, 0x84, 0x54,
	0x0e, 0x44, 0xa1, 0x35, 0x38, 0x5d, 0x68, 0x90, 0x3a, 0x3d, 0x16, 0x5a, 0x8b, 0x02, 0x59, 0x03,
	0x5c, 0x54, 0x4b, 0xf6, 0xc5, 0x72, 0x63, 0xd0, 0xba, 0x48, 0x4d, 0x8f, 0x84, 0x16, 0xba, 0x29,
	0x59, 0xa8, 0xda, 0xdb, 0x0b, 0x21, 0xfd, 0xaa, 0x5a, 0x40, 0xae, 0x4b, 0x16, 0x94, 0x1e, 0x4a,
	0x1d, 0xff, 0xd7, 0xd2, 0x07, 0xa9, 0xcf, 0x98, 0x7b, 0xc7, 0x82, 0x11, 0xe3, 0x46, 0xb2, 0xfa,
	0x11, 0x6b, 0xcd, 0x99, 0xb7, 0x5c, 0xb9, 0xa5, 0xb6, 0x25, 0xf7, 0x52, 0xab, 0xde, 0x31, 0xaa,
	0x9f, 0xfc, 0x20, 0x74, 0x38, 0x47, 0x5b, 0xcb, 0x1c, 0xe7, 0x06, 0xf3, 0x64, 0x41, 0x6f, 0x5f,
	0xc6, 0x8d, 0xc8, 0x78, 0x6f, 0x32, 0x9c, 0xce, 0xe0, 0xaf, 0x73, 0x41, 0x87, 0x0f, 0xe7, 0x97,
	0xc8, 0x2f, 0x94, 0xb7, 0x9b, 0xac, 0xa7, 0x98, 0x3a, 0x7a, 0x77, 0x07, 0x2c, 0xb9, 0x43, 0xf7,
	0xd6, 0xb8, 0x19, 0x91, 0x31, 0x99, 0xec, 0x67, 0xa1, 0x4c, 0x5e, 0xd2, 0xeb, 0x35, 0x2f, 0x2a,
	0x1c, 0x0d, 0xc6, 0x64, 0x32, 0x9c, 0x9e, 0x02, 0xaa, 0x5a, 0x6f, 0x80, 0x1b, 0x09, 0xf5, 0x14,
	0x96, 0xb2, 0xf0, 0x68, 0x61, 0xe5, 0xbd, 0xe9, 0xd9, 0x9e, 0x63, 0x69, 0x0a, 0xee, 0x31, 0x8b,
	0xf4, 0xd9, 0xe0, 0x29, 0x39, 0xf9, 0x39, 0xa0, 0x87, 0xcf, 0xd1, 0x79, 0xa9, 0x1a, 0x48, 0x33,
	0xec, 0x03, 0x7a, 0x6b, 0x59, 0xa9, 0x3c, 0x9c, 0x3f, 0x2a, 0x5e, 0x62, 0xeb, 0x7d, 0xb0, 0xbd,
	0x7c, 0xc3, 0x4b, 0x4c, 0xde, 0x51, 0x6a, 0xb8, 0xe5, 0x25, 0x7a, 0xb4, 0xae, 0xed, 0xe4, 0xc9,
	0x3f, 0xd2, 0xe8, 0x99, 0xc0, 0xdb, 0xdf, 0xe4, 0xac, 0x23, 0x94, 0x7e, 0x23, 0x94, 0xfe, 0xf9,
	0x94, 0x5c, 0xd0, 0x9b, 0x2b, 0xe4, 0x9f, 0x82, 0x45, 0x0c, 0xfc, 0xec, 0x4a, 0x16, 0xf0, 0x3a,
	0x8a, 0xc4, 0xe0, 0xb7, 0x92, 0xc9, 0x29, 0xbd, 0x66, 0xb8, 0x5f, 0xb5, 0xdd, 0xdf, 0x87, 0xb8,
	0x88, 0xb0, 0x5d, 0x44, 0x98, 0x7b, 0x2b, 0x95, 0x78, 0x1f, 0xc2, 0xca, 0x1a, 0x64, 0x3a, 0xa3,
	0x07, 0x5d, 0xa9, 0x1d, 0x8f, 0x73, 0xd4, 0x7d, 0x9c, 0xfd, 0x4e, 0xd4, 0x67, 0xaf, 0xbe, 0x7e,
	0x3f, 0x26, 0x1f, 0x9e, 0xfd, 0xff, 0xde, 0x9a, 0xb5, 0xe8, 0xef, 0x6e, 0x18, 0x7e, 0x71, 0xa3,
	0x69, 0xf0, 0xf1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x5d, 0x39, 0x51, 0x65, 0x03, 0x00,
	0x00,
}

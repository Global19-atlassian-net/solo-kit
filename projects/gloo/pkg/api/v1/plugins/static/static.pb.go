// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: static/static.proto

/*
Package static is a generated protocol buffer package.

It is generated from these files:
	static/static.proto

It has these top-level messages:
	UpstreamSpec
	Host
*/
package static

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import plugins_gloo_solo_io "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1/plugins"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Static upstreams are used to route request to services listening at fixed IP/Addresses.
// Static upstreams can be used to proxy any kind of service, and therefore contain a ServiceSpec
// for additional service-specific configuration.
// Unlike upstreams created by service discovery, Static Upstreams must be created manually by users
type UpstreamSpec struct {
	// A list of addresses and ports
	// at least one must be specified
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	// Attempt to use outbound TLS
	Tls bool `protobuf:"varint,3,opt,name=tls,proto3" json:"tls,omitempty"`
	// An optional Service Spec describing the service listening at this address
	ServiceSpec *plugins_gloo_solo_io.ServiceSpec `protobuf:"bytes,5,opt,name=service_spec,json=serviceSpec" json:"service_spec,omitempty"`
}

func (m *UpstreamSpec) Reset()                    { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string            { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()               {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) { return fileDescriptorStatic, []int{0} }

func (m *UpstreamSpec) GetHosts() []*Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *UpstreamSpec) GetTls() bool {
	if m != nil {
		return m.Tls
	}
	return false
}

func (m *UpstreamSpec) GetServiceSpec() *plugins_gloo_solo_io.ServiceSpec {
	if m != nil {
		return m.ServiceSpec
	}
	return nil
}

// Represents a single instance of an upstream
type Host struct {
	// Address (hostname or IP)
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// Port the instance is listening on
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *Host) Reset()                    { *m = Host{} }
func (m *Host) String() string            { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()               {}
func (*Host) Descriptor() ([]byte, []int) { return fileDescriptorStatic, []int{1} }

func (m *Host) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Host) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*UpstreamSpec)(nil), "static.plugins.gloo.solo.io.UpstreamSpec")
	proto.RegisterType((*Host)(nil), "static.plugins.gloo.solo.io.Host")
}
func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Hosts) != len(that1.Hosts) {
		return false
	}
	for i := range this.Hosts {
		if !this.Hosts[i].Equal(that1.Hosts[i]) {
			return false
		}
	}
	if this.Tls != that1.Tls {
		return false
	}
	if !this.ServiceSpec.Equal(that1.ServiceSpec) {
		return false
	}
	return true
}
func (this *Host) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Host)
	if !ok {
		that2, ok := that.(Host)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Addr != that1.Addr {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}

func init() { proto.RegisterFile("static/static.proto", fileDescriptorStatic) }

var fileDescriptorStatic = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x25, 0x6e, 0x2b, 0x9a, 0x56, 0x90, 0xe8, 0x61, 0xa9, 0x20, 0x6b, 0x4f, 0x7b, 0x31, 0x41,
	0x3d, 0x78, 0x57, 0x0f, 0x8a, 0xb7, 0x2d, 0x5e, 0xbc, 0xc8, 0x36, 0x0d, 0x69, 0xec, 0xd6, 0x09,
	0x99, 0x69, 0x7f, 0xc7, 0xab, 0xdf, 0xe5, 0x97, 0x48, 0x92, 0x8a, 0x82, 0x22, 0x9e, 0xe6, 0x4d,
	0x78, 0x79, 0xef, 0xcd, 0xe3, 0x07, 0x48, 0x2d, 0x39, 0xad, 0xf2, 0x90, 0x3e, 0x00, 0x81, 0x38,
	0xfa, 0xdc, 0xba, 0x95, 0x75, 0x2f, 0x28, 0x6d, 0x07, 0x20, 0x11, 0x3a, 0x90, 0x0e, 0x46, 0x87,
	0x16, 0x2c, 0x24, 0x9e, 0x8a, 0x28, 0x7f, 0x19, 0xdd, 0x5b, 0x47, 0xf3, 0xd5, 0x54, 0x6a, 0x58,
	0xaa, 0xc8, 0x3c, 0x75, 0x90, 0xe7, 0xc2, 0x91, 0xf2, 0x01, 0x9e, 0x8d, 0x26, 0x54, 0x51, 0x48,
	0xb5, 0xde, 0xa9, 0xf5, 0x99, 0xda, 0x88, 0x2b, 0x34, 0x61, 0xed, 0xb4, 0x79, 0x42, 0x6f, 0x36,
	0xfe, 0xe3, 0x57, 0xc6, 0x87, 0x0f, 0x1e, 0x29, 0x98, 0x76, 0x39, 0xf1, 0x46, 0x8b, 0x4b, 0xde,
	0x9f, 0x03, 0x12, 0x96, 0xac, 0x2a, 0xea, 0xc1, 0xf9, 0x89, 0xfc, 0x23, 0xa0, 0xbc, 0x05, 0xa4,
	0x26, 0xf3, 0xc5, 0x3e, 0x2f, 0xa8, 0xc3, 0xb2, 0xa8, 0x58, 0xbd, 0xd3, 0x44, 0x28, 0x6e, 0xf8,
	0xf0, 0xbb, 0x63, 0xd9, 0xaf, 0x58, 0x52, 0xfc, 0x55, 0x6a, 0x92, 0x99, 0x31, 0x43, 0x33, 0xc0,
	0xaf, 0x65, 0x2c, 0x79, 0x2f, 0xda, 0x08, 0xc1, 0x7b, 0xed, 0x6c, 0x16, 0x4a, 0x56, 0xb1, 0x7a,
	0xb7, 0x49, 0x38, 0xbe, 0x79, 0x08, 0x54, 0x6e, 0x55, 0xac, 0xde, 0x6b, 0x12, 0xbe, 0xba, 0x7b,
	0x7b, 0x3f, 0x66, 0x8f, 0xd7, 0xff, 0x2f, 0xc9, 0x2f, 0xec, 0x8f, 0xa2, 0xd2, 0xcd, 0xd3, 0xed,
	0xd4, 0xd1, 0xc5, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x11, 0x64, 0xc8, 0xba, 0x01, 0x00,
	0x00,
}

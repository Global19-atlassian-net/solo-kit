// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: endpoint.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import core_solo_io "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
// @solo-kit:resource
// @solo-kit:resource.short_name=ep
// @solo-kit:resource.plural_name=endpoints
// @solo-kit:resource.group_name=gloo.solo.io
// @solo-kit:resource.version=v1
//
// Endpoints represent dynamically discovered address/ports where an upstream service is listening
type Endpoint struct {
	// Name of the upstream the endpoint belongs to
	UpstreamName string `protobuf:"bytes,1,opt,name=upstream_name,json=upstreamName,proto3" json:"upstream_name,omitempty"`
	// Address of the endpoint (ip or hostname)
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// listening port for the endpoint
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Metadata contains the object metadata for this resource
	Metadata core_solo_io.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{0} }

func (m *Endpoint) GetUpstreamName() string {
	if m != nil {
		return m.UpstreamName
	}
	return ""
}

func (m *Endpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Endpoint) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Endpoint) GetMetadata() core_solo_io.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core_solo_io.Metadata{}
}

func init() {
	proto.RegisterType((*Endpoint)(nil), "gloo.api.v1.Endpoint")
}
func (this *Endpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Endpoint)
	if !ok {
		that2, ok := that.(Endpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UpstreamName != that1.UpstreamName {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("endpoint.proto", fileDescriptorEndpoint) }

var fileDescriptorEndpoint = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0xbb, 0x4e, 0x03, 0x31,
	0x10, 0xc4, 0x10, 0x91, 0xe0, 0x10, 0x0a, 0x0b, 0x21, 0x2b, 0x05, 0x44, 0xd0, 0x5c, 0x83, 0xad,
	0x03, 0x0a, 0x44, 0x19, 0x89, 0x12, 0x8a, 0x2b, 0x69, 0xd0, 0xe6, 0xce, 0x32, 0x26, 0xf1, 0xad,
	0x65, 0x6f, 0xf2, 0x2b, 0xfc, 0x02, 0x9f, 0xc2, 0x57, 0x50, 0xf0, 0x25, 0xe8, 0x5e, 0x94, 0x54,
	0x1e, 0xcf, 0xcc, 0x6a, 0x76, 0x96, 0x9f, 0x98, 0xba, 0x0a, 0xe8, 0x6a, 0x52, 0x21, 0x22, 0xa1,
	0x98, 0xda, 0x0d, 0xa2, 0x82, 0xe0, 0xd4, 0x2e, 0x9f, 0x9f, 0x5a, 0xb4, 0xd8, 0xf2, 0xba, 0x41,
	0x9d, 0x65, 0x9e, 0x5b, 0x47, 0x6f, 0xdb, 0x95, 0x2a, 0xd1, 0xeb, 0x84, 0x1b, 0xbc, 0x76, 0xd8,
	0xbd, 0x6b, 0x47, 0x1a, 0x82, 0xd3, 0xbb, 0x5c, 0x7b, 0x43, 0x50, 0x01, 0x41, 0x37, 0x72, 0xf9,
	0xc1, 0xf8, 0xe4, 0xb1, 0x0f, 0x12, 0x57, 0x7c, 0xb6, 0x0d, 0x89, 0xa2, 0x01, 0xff, 0x5a, 0x83,
	0x37, 0x92, 0x2d, 0x58, 0x76, 0x54, 0x1c, 0x0f, 0xe4, 0x33, 0x78, 0x23, 0x24, 0x1f, 0x43, 0x55,
	0x45, 0x93, 0x92, 0xdc, 0x6f, 0xe5, 0xe1, 0x2b, 0x04, 0x1f, 0x05, 0x8c, 0x24, 0x0f, 0x16, 0x2c,
	0x9b, 0x15, 0x2d, 0x16, 0xf7, 0x7c, 0x32, 0x24, 0xca, 0xf1, 0x82, 0x65, 0xd3, 0x9b, 0x33, 0x55,
	0x62, 0x34, 0xaa, 0xd9, 0x4b, 0x39, 0x54, 0x4f, 0xbd, 0xba, 0x1c, 0x7d, 0x7d, 0x5f, 0xec, 0x15,
	0x7f, 0xee, 0xe5, 0xc3, 0xe7, 0xcf, 0x39, 0x7b, 0xb9, 0xfb, 0xaf, 0x52, 0x88, 0xf8, 0x6e, 0x4a,
	0x4a, 0xba, 0x39, 0x8d, 0x0e, 0x6b, 0xdb, 0x97, 0x5c, 0x1d, 0xb6, 0xe5, 0x6e, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x37, 0x78, 0x01, 0x8b, 0x44, 0x01, 0x00, 0x00,
}

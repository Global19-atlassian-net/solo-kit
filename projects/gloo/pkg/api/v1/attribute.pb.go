// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: attribute.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"
import core_solo_io "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
import core_solo_io1 "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
// @solo-kit:resource
// @solo-kit:resource.short_name=attr
// @solo-kit:resource.plural_name=attributes
// @solo-kit:resource.group_name=gloo.solo.io
// @solo-kit:resource.version=v1
//
// An attribute is a container for configuration that is intended to be applied across a set of labeled resources inside of Gloo.
// Attributes specify a set of selectors which are compared with labels by Gloo at runtime
// In the current implementation, only Listeners have be selected, and therefore configured by Attributes.
// Labels and Selectors follow the same logical patterns implemented by Kubernetes.
// Read about the Kubernetes concepts here: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
// Attributes are useful when applying shared configuration to a large number of objects, such as the sharing of route
// configuration between roles.
type Attribute struct {
	// Attributes can apply only to one kind of resource
	// Currently available are:
	// * Listeners
	//
	// Types that are valid to be assigned to AttributeType:
	//	*Attribute_ListenerAttribute
	AttributeType isAttribute_AttributeType `protobuf_oneof:"attribute_type"`
	// Status indicates the validation status of the attribute resource.
	// Status is read-only by clients, and set by gloo during validation
	Status core_solo_io1.Status `protobuf:"bytes,6,opt,name=status" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core_solo_io.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptorAttribute, []int{0} }

type isAttribute_AttributeType interface {
	isAttribute_AttributeType()
	Equal(interface{}) bool
}

type Attribute_ListenerAttribute struct {
	ListenerAttribute *ListenerAttribute `protobuf:"bytes,2,opt,name=listener_attribute,json=listenerAttribute,oneof"`
}

func (*Attribute_ListenerAttribute) isAttribute_AttributeType() {}

func (m *Attribute) GetAttributeType() isAttribute_AttributeType {
	if m != nil {
		return m.AttributeType
	}
	return nil
}

func (m *Attribute) GetListenerAttribute() *ListenerAttribute {
	if x, ok := m.GetAttributeType().(*Attribute_ListenerAttribute); ok {
		return x.ListenerAttribute
	}
	return nil
}

func (m *Attribute) GetStatus() core_solo_io1.Status {
	if m != nil {
		return m.Status
	}
	return core_solo_io1.Status{}
}

func (m *Attribute) GetMetadata() core_solo_io.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core_solo_io.Metadata{}
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Attribute) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Attribute_OneofMarshaler, _Attribute_OneofUnmarshaler, _Attribute_OneofSizer, []interface{}{
		(*Attribute_ListenerAttribute)(nil),
	}
}

func _Attribute_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Attribute)
	// attribute_type
	switch x := m.AttributeType.(type) {
	case *Attribute_ListenerAttribute:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListenerAttribute); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Attribute.AttributeType has unexpected type %T", x)
	}
	return nil
}

func _Attribute_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Attribute)
	switch tag {
	case 2: // attribute_type.listener_attribute
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListenerAttribute)
		err := b.DecodeMessage(msg)
		m.AttributeType = &Attribute_ListenerAttribute{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Attribute_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Attribute)
	// attribute_type
	switch x := m.AttributeType.(type) {
	case *Attribute_ListenerAttribute:
		s := proto.Size(x.ListenerAttribute)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Listeners define the address:port where the proxy will listen for incoming connections
// Each listener defines a unique set of TCP and HTTP behaviors
type ListenerAttribute struct {
	// Apply this attribute to listeners with label keys and values matching this
	// selector. If empty or not present, the attribute will not be applied to any listeners.
	Selector map[string]string `protobuf:"bytes,1,rep,name=selector" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Listeners can serve HTTP or raw TCP, but not both. If at least one Virtual Service is specified here,
	// the listener will become an HTTP listener serving routes defined in these virtual services.
	// Some Listener plugins may impose restrictions on the Virtual Services that can be applied to a listener.
	// For example, some plugins may require all applied virtual services only route to a specific upstream,
	// a common requirement for Service Meshes
	VirtualServices []string `protobuf:"bytes,4,rep,name=virtual_services,json=virtualServices" json:"virtual_services,omitempty"`
	// Config contains top-level config to be applied to a listener
	// Listener config is applied to all TCP/HTTP traffic that
	// initiates via this listener.
	// Configuration such as gzip compression and TLS authentication is specified here
	// This config struct will be merged with Role-specific Listener Conig. If two fields overlap between the
	// Listener config on the role and the config on the attribute, the config on the Role will supersede this one
	Config *google_protobuf1.Struct `protobuf:"bytes,5,opt,name=config" json:"config,omitempty"`
}

func (m *ListenerAttribute) Reset()                    { *m = ListenerAttribute{} }
func (m *ListenerAttribute) String() string            { return proto.CompactTextString(m) }
func (*ListenerAttribute) ProtoMessage()               {}
func (*ListenerAttribute) Descriptor() ([]byte, []int) { return fileDescriptorAttribute, []int{1} }

func (m *ListenerAttribute) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *ListenerAttribute) GetVirtualServices() []string {
	if m != nil {
		return m.VirtualServices
	}
	return nil
}

func (m *ListenerAttribute) GetConfig() *google_protobuf1.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*Attribute)(nil), "gloo.api.v1.Attribute")
	proto.RegisterType((*ListenerAttribute)(nil), "gloo.api.v1.ListenerAttribute")
}
func (this *Attribute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Attribute)
	if !ok {
		that2, ok := that.(Attribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AttributeType == nil {
		if this.AttributeType != nil {
			return false
		}
	} else if this.AttributeType == nil {
		return false
	} else if !this.AttributeType.Equal(that1.AttributeType) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	return true
}
func (this *Attribute_ListenerAttribute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Attribute_ListenerAttribute)
	if !ok {
		that2, ok := that.(Attribute_ListenerAttribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ListenerAttribute.Equal(that1.ListenerAttribute) {
		return false
	}
	return true
}
func (this *ListenerAttribute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListenerAttribute)
	if !ok {
		that2, ok := that.(ListenerAttribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Selector) != len(that1.Selector) {
		return false
	}
	for i := range this.Selector {
		if this.Selector[i] != that1.Selector[i] {
			return false
		}
	}
	if len(this.VirtualServices) != len(that1.VirtualServices) {
		return false
	}
	for i := range this.VirtualServices {
		if this.VirtualServices[i] != that1.VirtualServices[i] {
			return false
		}
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("attribute.proto", fileDescriptorAttribute) }

var fileDescriptorAttribute = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0xed, 0x36, 0x6d, 0x68, 0x1c, 0x41, 0x13, 0x2b, 0x82, 0x25, 0x42, 0x6d, 0x94, 0x53, 0x90,
	0xc0, 0x56, 0x0a, 0x87, 0x2a, 0x9c, 0x88, 0x84, 0xe8, 0x01, 0x84, 0xb4, 0xb9, 0x71, 0x89, 0x9c,
	0xad, 0x63, 0x4c, 0xdc, 0x9d, 0x95, 0x3d, 0xbb, 0x52, 0xfe, 0x88, 0x4f, 0xe1, 0x2b, 0x7a, 0xe0,
	0x0f, 0xe0, 0xc0, 0x19, 0xad, 0xd7, 0x59, 0x51, 0x90, 0xa2, 0x9e, 0x76, 0x76, 0xe6, 0xbd, 0x99,
	0xf7, 0xe4, 0x47, 0x4e, 0x05, 0xa2, 0xd5, 0xab, 0x02, 0x25, 0xcb, 0x2d, 0x20, 0xd0, 0xae, 0x32,
	0x00, 0x4c, 0xe4, 0x9a, 0x95, 0xd3, 0xe1, 0x33, 0x05, 0xa0, 0x8c, 0xe4, 0x7e, 0xb4, 0x2a, 0xd6,
	0xdc, 0xa1, 0x2d, 0x52, 0xac, 0xa1, 0xc3, 0x81, 0x02, 0x05, 0xbe, 0xe4, 0x55, 0x15, 0xba, 0x53,
	0xa5, 0xf1, 0x4b, 0xb1, 0x62, 0x29, 0xdc, 0x70, 0x07, 0x06, 0x5e, 0x6a, 0xa8, 0xbf, 0x1b, 0x8d,
	0x5c, 0xe4, 0x9a, 0x97, 0x53, 0x7e, 0x23, 0x51, 0x5c, 0x0b, 0x14, 0x81, 0xc2, 0xef, 0x41, 0x71,
	0x28, 0xb0, 0x70, 0x35, 0x61, 0xfc, 0x33, 0x22, 0x9d, 0xb7, 0x3b, 0xe1, 0xf4, 0x13, 0xa1, 0x46,
	0x3b, 0x94, 0x99, 0xb4, 0xcb, 0xc6, 0x4e, 0x7c, 0x38, 0x8a, 0x26, 0xdd, 0x8b, 0x33, 0xf6, 0x97,
	0x1f, 0xf6, 0x21, 0xc0, 0x1a, 0xee, 0xd5, 0x41, 0xd2, 0x37, 0xff, 0x36, 0xe9, 0x7b, 0xd2, 0xae,
	0xcf, 0xc5, 0x6d, 0xbf, 0x64, 0xc0, 0x52, 0xb0, 0x92, 0x55, 0x92, 0x98, 0x06, 0xb6, 0xf0, 0xb3,
	0xf9, 0xd3, 0xef, 0xb7, 0xe7, 0x07, 0xbf, 0x6e, 0xcf, 0xfb, 0x28, 0x1d, 0x5e, 0xeb, 0xf5, 0x7a,
	0x36, 0xd6, 0x2a, 0x03, 0x2b, 0xc7, 0x49, 0xa0, 0xd3, 0x4b, 0x72, 0xb2, 0xb3, 0x1a, 0x3f, 0xf0,
	0xab, 0x1e, 0xdf, 0x5d, 0xf5, 0x31, 0x4c, 0xe7, 0x47, 0xd5, 0xb2, 0xa4, 0x41, 0xcf, 0x7b, 0xe4,
	0x51, 0x63, 0x65, 0x89, 0xdb, 0x5c, 0x8e, 0x7f, 0x47, 0xa4, 0xff, 0x9f, 0x7e, 0x7a, 0x45, 0x4e,
	0x9c, 0x34, 0x32, 0x45, 0xb0, 0x71, 0x34, 0x6a, 0x4d, 0xba, 0x17, 0x2f, 0xf6, 0x3b, 0x66, 0x8b,
	0x00, 0x7f, 0x97, 0xa1, 0xdd, 0x26, 0x0d, 0x9b, 0x3e, 0x27, 0xbd, 0x52, 0x5b, 0x2c, 0x84, 0x59,
	0x3a, 0x69, 0x4b, 0x9d, 0x4a, 0x17, 0x1f, 0x8d, 0x5a, 0x93, 0x4e, 0x72, 0x1a, 0xfa, 0x8b, 0xd0,
	0xa6, 0x9c, 0xb4, 0x53, 0xc8, 0xd6, 0x5a, 0xc5, 0xc7, 0xde, 0xd4, 0x13, 0x56, 0xe7, 0x84, 0xed,
	0x72, 0xc2, 0x16, 0x3e, 0x27, 0x49, 0x80, 0x0d, 0xdf, 0x90, 0x87, 0x77, 0xce, 0xd2, 0x1e, 0x69,
	0x6d, 0xe4, 0x36, 0x8e, 0x46, 0xd1, 0xa4, 0x93, 0x54, 0x25, 0x1d, 0x90, 0xe3, 0x52, 0x98, 0xa2,
	0x7e, 0xb7, 0x4e, 0x52, 0xff, 0xcc, 0x0e, 0x2f, 0xa3, 0xf9, 0xec, 0xdb, 0x8f, 0xb3, 0xe8, 0xf3,
	0xeb, 0x7d, 0x19, 0xc9, 0x2d, 0x7c, 0x95, 0x29, 0x3a, 0x5e, 0x59, 0xe7, 0xf9, 0x46, 0x85, 0xd4,
	0xac, 0xda, 0x5e, 0xd1, 0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x32, 0x38, 0x45, 0xe7,
	0x02, 0x00, 0x00,
}

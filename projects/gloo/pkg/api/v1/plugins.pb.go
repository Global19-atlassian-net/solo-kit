// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: plugins.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import aws_plugins_gloo_solo_io "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1/plugins/aws"
import azure_plugins_gloo_solo_io "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1/plugins/azure"
import kubernetes_plugins_gloo_solo_io "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1/plugins/kubernetes"
import google_protobuf1 "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Plugin-specific configuration that lives on listeners
// Each ListenerPlugin object contains configuration for a specific plugin
// Note to developers: new Listener Plugins must be added to this struct
// to be usable by Gloo.
type ListenerPlugins struct {
}

func (m *ListenerPlugins) Reset()                    { *m = ListenerPlugins{} }
func (m *ListenerPlugins) String() string            { return proto.CompactTextString(m) }
func (*ListenerPlugins) ProtoMessage()               {}
func (*ListenerPlugins) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{0} }

// Plugin-specific configuration that lives on virtual hosts
// Each VirtualHostPlugin object contains configuration for a specific plugin
// Note to developers: new Virtual Host Plugins must be added to this struct
// to be usable by Gloo.
type VirtualHostPlugins struct {
}

func (m *VirtualHostPlugins) Reset()                    { *m = VirtualHostPlugins{} }
func (m *VirtualHostPlugins) String() string            { return proto.CompactTextString(m) }
func (*VirtualHostPlugins) ProtoMessage()               {}
func (*VirtualHostPlugins) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{1} }

// Plugin-specific configuration that lives on routes
// Each RoutePlugin object contains configuration for a specific plugin
// Note to developers: new Route Plugins must be added to this struct
// to be usable by Gloo.
type RoutePlugins struct {
}

func (m *RoutePlugins) Reset()                    { *m = RoutePlugins{} }
func (m *RoutePlugins) String() string            { return proto.CompactTextString(m) }
func (*RoutePlugins) ProtoMessage()               {}
func (*RoutePlugins) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{2} }

// Configuration for Destinations that are tied to the UpstreamSpec or ServiceSpec on that destination
type DestinationSpec struct {
	// Note to developers: new DestinationSpecs must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to DestinationType:
	//	*DestinationSpec_Aws
	//	*DestinationSpec_Azure
	//	*DestinationSpec_Rest
	DestinationType isDestinationSpec_DestinationType `protobuf_oneof:"destination_type"`
}

func (m *DestinationSpec) Reset()                    { *m = DestinationSpec{} }
func (m *DestinationSpec) String() string            { return proto.CompactTextString(m) }
func (*DestinationSpec) ProtoMessage()               {}
func (*DestinationSpec) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{3} }

type isDestinationSpec_DestinationType interface {
	isDestinationSpec_DestinationType()
	Equal(interface{}) bool
}

type DestinationSpec_Aws struct {
	Aws *aws_plugins_gloo_solo_io.DestinationSpec `protobuf:"bytes,1,opt,name=aws,oneof"`
}
type DestinationSpec_Azure struct {
	Azure *azure_plugins_gloo_solo_io.DestinationSpec `protobuf:"bytes,2,opt,name=azure,oneof"`
}
type DestinationSpec_Rest struct {
	Rest *RestSpec `protobuf:"bytes,3,opt,name=rest,oneof"`
}

func (*DestinationSpec_Aws) isDestinationSpec_DestinationType()   {}
func (*DestinationSpec_Azure) isDestinationSpec_DestinationType() {}
func (*DestinationSpec_Rest) isDestinationSpec_DestinationType()  {}

func (m *DestinationSpec) GetDestinationType() isDestinationSpec_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (m *DestinationSpec) GetAws() *aws_plugins_gloo_solo_io.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *DestinationSpec) GetAzure() *azure_plugins_gloo_solo_io.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *DestinationSpec) GetRest() *RestSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Rest); ok {
		return x.Rest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DestinationSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DestinationSpec_OneofMarshaler, _DestinationSpec_OneofUnmarshaler, _DestinationSpec_OneofSizer, []interface{}{
		(*DestinationSpec_Aws)(nil),
		(*DestinationSpec_Azure)(nil),
		(*DestinationSpec_Rest)(nil),
	}
}

func _DestinationSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DestinationSpec)
	// destination_type
	switch x := m.DestinationType.(type) {
	case *DestinationSpec_Aws:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aws); err != nil {
			return err
		}
	case *DestinationSpec_Azure:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Azure); err != nil {
			return err
		}
	case *DestinationSpec_Rest:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DestinationSpec.DestinationType has unexpected type %T", x)
	}
	return nil
}

func _DestinationSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DestinationSpec)
	switch tag {
	case 1: // destination_type.aws
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(aws_plugins_gloo_solo_io.DestinationSpec)
		err := b.DecodeMessage(msg)
		m.DestinationType = &DestinationSpec_Aws{msg}
		return true, err
	case 2: // destination_type.azure
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(azure_plugins_gloo_solo_io.DestinationSpec)
		err := b.DecodeMessage(msg)
		m.DestinationType = &DestinationSpec_Azure{msg}
		return true, err
	case 3: // destination_type.rest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RestSpec)
		err := b.DecodeMessage(msg)
		m.DestinationType = &DestinationSpec_Rest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DestinationSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DestinationSpec)
	// destination_type
	switch x := m.DestinationType.(type) {
	case *DestinationSpec_Aws:
		s := proto.Size(x.Aws)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DestinationSpec_Azure:
		s := proto.Size(x.Azure)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DestinationSpec_Rest:
		s := proto.Size(x.Rest)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TODO: figure out import cycle mess.
type RestSpec struct {
	FunctionName string               `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Parameters   *RestSpec_Parameters `protobuf:"bytes,2,opt,name=parameters" json:"parameters,omitempty"`
}

func (m *RestSpec) Reset()                    { *m = RestSpec{} }
func (m *RestSpec) String() string            { return proto.CompactTextString(m) }
func (*RestSpec) ProtoMessage()               {}
func (*RestSpec) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{4} }

func (m *RestSpec) GetFunctionName() string {
	if m != nil {
		return m.FunctionName
	}
	return ""
}

func (m *RestSpec) GetParameters() *RestSpec_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type RestSpec_Parameters struct {
	// headers that will be used to extract data for processing output templates
	// Gloo will search for parameters by their name in header value strings, enclosed in single
	// curly braces
	// Example:
	//   extensions:
	//     parameters:
	//         headers:
	//           x-user-id: { userId }
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// part of the (or the entire) path that will be used extract data for processing output templates
	// Gloo will search for parameters by their name in header value strings, enclosed in single
	// curly braces
	// Example:
	//   extensions:
	//     parameters:
	//         path: /users/{ userId }
	Path *google_protobuf1.StringValue `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *RestSpec_Parameters) Reset()                    { *m = RestSpec_Parameters{} }
func (m *RestSpec_Parameters) String() string            { return proto.CompactTextString(m) }
func (*RestSpec_Parameters) ProtoMessage()               {}
func (*RestSpec_Parameters) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{4, 0} }

func (m *RestSpec_Parameters) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RestSpec_Parameters) GetPath() *google_protobuf1.StringValue {
	if m != nil {
		return m.Path
	}
	return nil
}

// Each upstream in Gloo has a type. Supported types include `static`, `kubernetes`, `aws`, `consul`, and more.
// Each upstream type is handled by a corresponding Gloo plugin.
type UpstreamSpec struct {
	// Note to developers: new Upstream Plugins must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to UpstreamType:
	//	*UpstreamSpec_Kube
	//	*UpstreamSpec_Aws
	//	*UpstreamSpec_Azure
	UpstreamType isUpstreamSpec_UpstreamType `protobuf_oneof:"upstream_type"`
}

func (m *UpstreamSpec) Reset()                    { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string            { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()               {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{5} }

type isUpstreamSpec_UpstreamType interface {
	isUpstreamSpec_UpstreamType()
	Equal(interface{}) bool
}

type UpstreamSpec_Kube struct {
	Kube *kubernetes_plugins_gloo_solo_io.UpstreamSpec `protobuf:"bytes,1,opt,name=kube,oneof"`
}
type UpstreamSpec_Aws struct {
	Aws *aws_plugins_gloo_solo_io.UpstreamSpec `protobuf:"bytes,2,opt,name=aws,oneof"`
}
type UpstreamSpec_Azure struct {
	Azure *azure_plugins_gloo_solo_io.UpstreamSpec `protobuf:"bytes,3,opt,name=azure,oneof"`
}

func (*UpstreamSpec_Kube) isUpstreamSpec_UpstreamType()  {}
func (*UpstreamSpec_Aws) isUpstreamSpec_UpstreamType()   {}
func (*UpstreamSpec_Azure) isUpstreamSpec_UpstreamType() {}

func (m *UpstreamSpec) GetUpstreamType() isUpstreamSpec_UpstreamType {
	if m != nil {
		return m.UpstreamType
	}
	return nil
}

func (m *UpstreamSpec) GetKube() *kubernetes_plugins_gloo_solo_io.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Kube); ok {
		return x.Kube
	}
	return nil
}

func (m *UpstreamSpec) GetAws() *aws_plugins_gloo_solo_io.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *UpstreamSpec) GetAzure() *azure_plugins_gloo_solo_io.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Azure); ok {
		return x.Azure
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpstreamSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpstreamSpec_OneofMarshaler, _UpstreamSpec_OneofUnmarshaler, _UpstreamSpec_OneofSizer, []interface{}{
		(*UpstreamSpec_Kube)(nil),
		(*UpstreamSpec_Aws)(nil),
		(*UpstreamSpec_Azure)(nil),
	}
}

func _UpstreamSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpstreamSpec)
	// upstream_type
	switch x := m.UpstreamType.(type) {
	case *UpstreamSpec_Kube:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Kube); err != nil {
			return err
		}
	case *UpstreamSpec_Aws:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aws); err != nil {
			return err
		}
	case *UpstreamSpec_Azure:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Azure); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpstreamSpec.UpstreamType has unexpected type %T", x)
	}
	return nil
}

func _UpstreamSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpstreamSpec)
	switch tag {
	case 1: // upstream_type.kube
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(kubernetes_plugins_gloo_solo_io.UpstreamSpec)
		err := b.DecodeMessage(msg)
		m.UpstreamType = &UpstreamSpec_Kube{msg}
		return true, err
	case 2: // upstream_type.aws
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(aws_plugins_gloo_solo_io.UpstreamSpec)
		err := b.DecodeMessage(msg)
		m.UpstreamType = &UpstreamSpec_Aws{msg}
		return true, err
	case 3: // upstream_type.azure
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(azure_plugins_gloo_solo_io.UpstreamSpec)
		err := b.DecodeMessage(msg)
		m.UpstreamType = &UpstreamSpec_Azure{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpstreamSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpstreamSpec)
	// upstream_type
	switch x := m.UpstreamType.(type) {
	case *UpstreamSpec_Kube:
		s := proto.Size(x.Kube)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpstreamSpec_Aws:
		s := proto.Size(x.Aws)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpstreamSpec_Azure:
		s := proto.Size(x.Azure)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ListenerPlugins)(nil), "gloo.solo.io.ListenerPlugins")
	proto.RegisterType((*VirtualHostPlugins)(nil), "gloo.solo.io.VirtualHostPlugins")
	proto.RegisterType((*RoutePlugins)(nil), "gloo.solo.io.RoutePlugins")
	proto.RegisterType((*DestinationSpec)(nil), "gloo.solo.io.DestinationSpec")
	proto.RegisterType((*RestSpec)(nil), "gloo.solo.io.RestSpec")
	proto.RegisterType((*RestSpec_Parameters)(nil), "gloo.solo.io.RestSpec.Parameters")
	proto.RegisterType((*UpstreamSpec)(nil), "gloo.solo.io.UpstreamSpec")
}
func (this *ListenerPlugins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListenerPlugins)
	if !ok {
		that2, ok := that.(ListenerPlugins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VirtualHostPlugins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostPlugins)
	if !ok {
		that2, ok := that.(VirtualHostPlugins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoutePlugins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutePlugins)
	if !ok {
		that2, ok := that.(RoutePlugins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DestinationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec)
	if !ok {
		that2, ok := that.(DestinationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DestinationType == nil {
		if this.DestinationType != nil {
			return false
		}
	} else if this.DestinationType == nil {
		return false
	} else if !this.DestinationType.Equal(that1.DestinationType) {
		return false
	}
	return true
}
func (this *DestinationSpec_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Aws)
	if !ok {
		that2, ok := that.(DestinationSpec_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *DestinationSpec_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Azure)
	if !ok {
		that2, ok := that.(DestinationSpec_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *DestinationSpec_Rest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Rest)
	if !ok {
		that2, ok := that.(DestinationSpec_Rest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rest.Equal(that1.Rest) {
		return false
	}
	return true
}
func (this *RestSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestSpec)
	if !ok {
		that2, ok := that.(RestSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FunctionName != that1.FunctionName {
		return false
	}
	if !this.Parameters.Equal(that1.Parameters) {
		return false
	}
	return true
}
func (this *RestSpec_Parameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestSpec_Parameters)
	if !ok {
		that2, ok := that.(RestSpec_Parameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if this.Headers[i] != that1.Headers[i] {
			return false
		}
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	return true
}
func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.UpstreamType == nil {
		if this.UpstreamType != nil {
			return false
		}
	} else if this.UpstreamType == nil {
		return false
	} else if !this.UpstreamType.Equal(that1.UpstreamType) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Kube) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Kube)
	if !ok {
		that2, ok := that.(UpstreamSpec_Kube)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Kube.Equal(that1.Kube) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Aws)
	if !ok {
		that2, ok := that.(UpstreamSpec_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Azure)
	if !ok {
		that2, ok := that.(UpstreamSpec_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("plugins.proto", fileDescriptorPlugins) }

var fileDescriptorPlugins = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x49, 0xdb, 0x01, 0x3b, 0x6b, 0xe9, 0xb0, 0x2a, 0x54, 0x55, 0x68, 0x1a, 0x45, 0x42,
	0x45, 0x30, 0x07, 0x06, 0x17, 0xa8, 0x12, 0x12, 0x74, 0x80, 0x2a, 0x84, 0xd0, 0x94, 0xc1, 0x2e,
	0xb8, 0x41, 0x6e, 0x77, 0x96, 0x9a, 0x26, 0xb1, 0x65, 0x3b, 0xab, 0xca, 0x13, 0xf1, 0x0a, 0xdc,
	0xf3, 0x0e, 0xdc, 0xef, 0x49, 0x50, 0x6c, 0x87, 0x85, 0x6a, 0xc0, 0xb4, 0x8b, 0x36, 0x76, 0xce,
	0xff, 0x7f, 0x89, 0xcf, 0xf9, 0x03, 0x2d, 0x99, 0xe4, 0x31, 0xcf, 0x34, 0x95, 0x4a, 0x18, 0x41,
	0x9a, 0x71, 0x22, 0x04, 0xd5, 0x22, 0x11, 0x94, 0x8b, 0x5e, 0x27, 0x16, 0xb1, 0xb0, 0x85, 0xb0,
	0x58, 0x39, 0x4d, 0xef, 0x4d, 0xcc, 0xcd, 0x2c, 0x9f, 0xd0, 0xa9, 0x48, 0xc3, 0x42, 0xb9, 0xc3,
	0x85, 0xbb, 0xce, 0xb9, 0x09, 0xa5, 0x12, 0x5f, 0x70, 0x6a, 0x74, 0x58, 0x80, 0x42, 0x26, 0x79,
	0x78, 0xf2, 0x38, 0xf4, 0xcf, 0x08, 0xd9, 0xc2, 0xfe, 0x3c, 0xe7, 0xed, 0xe5, 0x39, 0x5f, 0x73,
	0x85, 0xee, 0xdf, 0xb3, 0x3e, 0x5c, 0x9a, 0x35, 0xcf, 0x27, 0xa8, 0x32, 0x34, 0x58, 0x5d, 0x7a,
	0xea, 0x56, 0x2c, 0x44, 0x9c, 0x60, 0x68, 0x77, 0x93, 0xfc, 0x38, 0x5c, 0x28, 0x26, 0x25, 0x2a,
	0x5f, 0xef, 0xdf, 0x84, 0xf6, 0x3b, 0xae, 0x0d, 0x66, 0xa8, 0xf6, 0x1d, 0xae, 0xdf, 0x01, 0x72,
	0xc8, 0x95, 0xc9, 0x59, 0x32, 0x16, 0xda, 0x94, 0x77, 0x6f, 0x40, 0x33, 0x12, 0xb9, 0xc1, 0x72,
	0xff, 0x33, 0x80, 0xf6, 0x2b, 0xd4, 0x86, 0x67, 0xcc, 0x70, 0x91, 0x1d, 0x48, 0x9c, 0x92, 0xe7,
	0x50, 0x67, 0x0b, 0xdd, 0x0d, 0xb6, 0x83, 0xc1, 0xc6, 0xee, 0x7d, 0x6a, 0xfb, 0xe4, 0x67, 0x53,
	0x1d, 0x0a, 0x5d, 0xf1, 0x8d, 0xaf, 0x44, 0x85, 0x8f, 0xec, 0xc1, 0x9a, 0x6d, 0x48, 0xb7, 0x66,
	0x01, 0x0f, 0xa8, 0x6f, 0xcf, 0xc5, 0x10, 0xce, 0x4b, 0x1e, 0x42, 0x43, 0xa1, 0x36, 0xdd, 0xba,
	0x65, 0xdc, 0xfa, 0xd3, 0x15, 0xa1, 0x36, 0x5e, 0x6e, 0x55, 0x23, 0x02, 0x9b, 0x47, 0x67, 0xa4,
	0xcf, 0x66, 0x29, 0xb1, 0xff, 0xbd, 0x06, 0xd7, 0x4b, 0x21, 0xb9, 0x0b, 0xad, 0xe3, 0x3c, 0x9b,
	0xda, 0x6a, 0xc6, 0x52, 0xb4, 0x87, 0x5b, 0x8f, 0x9a, 0xe5, 0xcd, 0xf7, 0x2c, 0x45, 0xf2, 0x12,
	0x40, 0x32, 0xc5, 0x52, 0x34, 0xa8, 0xb4, 0x7f, 0xfb, 0x3b, 0xe7, 0x3f, 0x99, 0xee, 0xff, 0x16,
	0x46, 0x15, 0x53, 0xef, 0x47, 0x00, 0x70, 0x56, 0x22, 0x63, 0xb8, 0x36, 0x43, 0x76, 0x54, 0xe0,
	0x82, 0xed, 0xfa, 0x60, 0x63, 0x97, 0xfe, 0x17, 0x47, 0xc7, 0xce, 0xf0, 0x3a, 0x33, 0x6a, 0x19,
	0x95, 0x76, 0xf2, 0x08, 0x1a, 0x92, 0x99, 0x99, 0x7f, 0xab, 0xdb, 0xd4, 0xe5, 0x81, 0x96, 0x79,
	0xa0, 0x07, 0x46, 0xf1, 0x2c, 0x3e, 0x64, 0x49, 0x8e, 0x91, 0x55, 0xf6, 0x86, 0xd0, 0xac, 0xa2,
	0xc8, 0x26, 0xd4, 0xe7, 0xb8, 0xf4, 0x07, 0x2f, 0x96, 0xa4, 0x03, 0x6b, 0x27, 0x85, 0xc1, 0x42,
	0xd7, 0x23, 0xb7, 0x19, 0xd6, 0x9e, 0x05, 0xfd, 0xd3, 0x00, 0x9a, 0x1f, 0xa5, 0x36, 0x0a, 0x59,
	0x6a, 0xfb, 0xb7, 0x07, 0x8d, 0x22, 0x93, 0x3e, 0x13, 0x3b, 0xb4, 0x1a, 0xd0, 0xf3, 0xe6, 0x5a,
	0x35, 0x17, 0x53, 0x2a, 0xf4, 0x64, 0xe8, 0x72, 0xe5, 0x8e, 0x70, 0xef, 0xef, 0xb9, 0x5a, 0x31,
	0xdb, 0x50, 0xbd, 0x28, 0x43, 0xe5, 0x02, 0x31, 0xf8, 0x57, 0xa8, 0x56, 0xfc, 0xce, 0x38, 0x6a,
	0x43, 0x2b, 0xf7, 0x05, 0x1b, 0x90, 0xd1, 0xf0, 0xdb, 0xe9, 0x56, 0xf0, 0xe9, 0xe9, 0xc5, 0xbf,
	0x57, 0x39, 0x8f, 0xfd, 0x37, 0x3b, 0xb9, 0x6a, 0x1b, 0xff, 0xe4, 0x57, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xdc, 0xe4, 0x94, 0x7a, 0xb5, 0x04, 0x00, 0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: plugins.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import gloo_plugins_aws "github.com/solo-io/solo-kit/projects/gloo/pkg/plugins/aws"
import gloo_plugins_kubernetes "github.com/solo-io/solo-kit/projects/gloo/pkg/plugins/kubernetes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Plugin-specific configuration that lives on listeners
// Each ListenerPlugin object contains configuration for a specific plugin
type ListenerPlugin struct {
	// Note to developers: new Listener Plugins must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to PluginType:
	//	*ListenerPlugin_Empty
	PluginType isListenerPlugin_PluginType `protobuf_oneof:"plugin_type"`
}

func (m *ListenerPlugin) Reset()                    { *m = ListenerPlugin{} }
func (m *ListenerPlugin) String() string            { return proto.CompactTextString(m) }
func (*ListenerPlugin) ProtoMessage()               {}
func (*ListenerPlugin) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{0} }

type isListenerPlugin_PluginType interface {
	isListenerPlugin_PluginType()
	Equal(interface{}) bool
}

type ListenerPlugin_Empty struct {
	Empty string `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

func (*ListenerPlugin_Empty) isListenerPlugin_PluginType() {}

func (m *ListenerPlugin) GetPluginType() isListenerPlugin_PluginType {
	if m != nil {
		return m.PluginType
	}
	return nil
}

func (m *ListenerPlugin) GetEmpty() string {
	if x, ok := m.GetPluginType().(*ListenerPlugin_Empty); ok {
		return x.Empty
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ListenerPlugin) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ListenerPlugin_OneofMarshaler, _ListenerPlugin_OneofUnmarshaler, _ListenerPlugin_OneofSizer, []interface{}{
		(*ListenerPlugin_Empty)(nil),
	}
}

func _ListenerPlugin_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ListenerPlugin)
	// plugin_type
	switch x := m.PluginType.(type) {
	case *ListenerPlugin_Empty:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Empty)
	case nil:
	default:
		return fmt.Errorf("ListenerPlugin.PluginType has unexpected type %T", x)
	}
	return nil
}

func _ListenerPlugin_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ListenerPlugin)
	switch tag {
	case 1: // plugin_type.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PluginType = &ListenerPlugin_Empty{x}
		return true, err
	default:
		return false, nil
	}
}

func _ListenerPlugin_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ListenerPlugin)
	// plugin_type
	switch x := m.PluginType.(type) {
	case *ListenerPlugin_Empty:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Empty)))
		n += len(x.Empty)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Plugin-specific configuration that lives on virtual hosts
// Each VirtualHostPlugin object contains configuration for a specific plugin
type VirtualHostPlugin struct {
	// Note to developers: new Virtual Host Plugins must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to PluginType:
	//	*VirtualHostPlugin_Empty
	PluginType isVirtualHostPlugin_PluginType `protobuf_oneof:"plugin_type"`
}

func (m *VirtualHostPlugin) Reset()                    { *m = VirtualHostPlugin{} }
func (m *VirtualHostPlugin) String() string            { return proto.CompactTextString(m) }
func (*VirtualHostPlugin) ProtoMessage()               {}
func (*VirtualHostPlugin) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{1} }

type isVirtualHostPlugin_PluginType interface {
	isVirtualHostPlugin_PluginType()
	Equal(interface{}) bool
}

type VirtualHostPlugin_Empty struct {
	Empty string `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

func (*VirtualHostPlugin_Empty) isVirtualHostPlugin_PluginType() {}

func (m *VirtualHostPlugin) GetPluginType() isVirtualHostPlugin_PluginType {
	if m != nil {
		return m.PluginType
	}
	return nil
}

func (m *VirtualHostPlugin) GetEmpty() string {
	if x, ok := m.GetPluginType().(*VirtualHostPlugin_Empty); ok {
		return x.Empty
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VirtualHostPlugin) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VirtualHostPlugin_OneofMarshaler, _VirtualHostPlugin_OneofUnmarshaler, _VirtualHostPlugin_OneofSizer, []interface{}{
		(*VirtualHostPlugin_Empty)(nil),
	}
}

func _VirtualHostPlugin_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VirtualHostPlugin)
	// plugin_type
	switch x := m.PluginType.(type) {
	case *VirtualHostPlugin_Empty:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Empty)
	case nil:
	default:
		return fmt.Errorf("VirtualHostPlugin.PluginType has unexpected type %T", x)
	}
	return nil
}

func _VirtualHostPlugin_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VirtualHostPlugin)
	switch tag {
	case 1: // plugin_type.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PluginType = &VirtualHostPlugin_Empty{x}
		return true, err
	default:
		return false, nil
	}
}

func _VirtualHostPlugin_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VirtualHostPlugin)
	// plugin_type
	switch x := m.PluginType.(type) {
	case *VirtualHostPlugin_Empty:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Empty)))
		n += len(x.Empty)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Plugin-specific configuration that lives on routes
// Each RoutePlugin object contains configuration for a specific plugin
type RoutePlugin struct {
	// Note to developers: new Route Plugins must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to PluginType:
	//	*RoutePlugin_Empty
	PluginType isRoutePlugin_PluginType `protobuf_oneof:"plugin_type"`
}

func (m *RoutePlugin) Reset()                    { *m = RoutePlugin{} }
func (m *RoutePlugin) String() string            { return proto.CompactTextString(m) }
func (*RoutePlugin) ProtoMessage()               {}
func (*RoutePlugin) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{2} }

type isRoutePlugin_PluginType interface {
	isRoutePlugin_PluginType()
	Equal(interface{}) bool
}

type RoutePlugin_Empty struct {
	Empty string `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

func (*RoutePlugin_Empty) isRoutePlugin_PluginType() {}

func (m *RoutePlugin) GetPluginType() isRoutePlugin_PluginType {
	if m != nil {
		return m.PluginType
	}
	return nil
}

func (m *RoutePlugin) GetEmpty() string {
	if x, ok := m.GetPluginType().(*RoutePlugin_Empty); ok {
		return x.Empty
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RoutePlugin) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RoutePlugin_OneofMarshaler, _RoutePlugin_OneofUnmarshaler, _RoutePlugin_OneofSizer, []interface{}{
		(*RoutePlugin_Empty)(nil),
	}
}

func _RoutePlugin_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RoutePlugin)
	// plugin_type
	switch x := m.PluginType.(type) {
	case *RoutePlugin_Empty:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Empty)
	case nil:
	default:
		return fmt.Errorf("RoutePlugin.PluginType has unexpected type %T", x)
	}
	return nil
}

func _RoutePlugin_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RoutePlugin)
	switch tag {
	case 1: // plugin_type.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PluginType = &RoutePlugin_Empty{x}
		return true, err
	default:
		return false, nil
	}
}

func _RoutePlugin_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RoutePlugin)
	// plugin_type
	switch x := m.PluginType.(type) {
	case *RoutePlugin_Empty:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Empty)))
		n += len(x.Empty)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Configuration for Destinations that are tied to the UpstreamSpec or ServiceSpec on that destination
type DestinationSpec struct {
	// Note to developers: new DestinationSpecs must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to DestinationType:
	//	*DestinationSpec_Aws
	DestinationType isDestinationSpec_DestinationType `protobuf_oneof:"destination_type"`
}

func (m *DestinationSpec) Reset()                    { *m = DestinationSpec{} }
func (m *DestinationSpec) String() string            { return proto.CompactTextString(m) }
func (*DestinationSpec) ProtoMessage()               {}
func (*DestinationSpec) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{3} }

type isDestinationSpec_DestinationType interface {
	isDestinationSpec_DestinationType()
	Equal(interface{}) bool
}

type DestinationSpec_Aws struct {
	Aws *gloo_plugins_aws.DestinationSpec `protobuf:"bytes,1,opt,name=aws,oneof"`
}

func (*DestinationSpec_Aws) isDestinationSpec_DestinationType() {}

func (m *DestinationSpec) GetDestinationType() isDestinationSpec_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (m *DestinationSpec) GetAws() *gloo_plugins_aws.DestinationSpec {
	if x, ok := m.GetDestinationType().(*DestinationSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DestinationSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DestinationSpec_OneofMarshaler, _DestinationSpec_OneofUnmarshaler, _DestinationSpec_OneofSizer, []interface{}{
		(*DestinationSpec_Aws)(nil),
	}
}

func _DestinationSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DestinationSpec)
	// destination_type
	switch x := m.DestinationType.(type) {
	case *DestinationSpec_Aws:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aws); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DestinationSpec.DestinationType has unexpected type %T", x)
	}
	return nil
}

func _DestinationSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DestinationSpec)
	switch tag {
	case 1: // destination_type.aws
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gloo_plugins_aws.DestinationSpec)
		err := b.DecodeMessage(msg)
		m.DestinationType = &DestinationSpec_Aws{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DestinationSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DestinationSpec)
	// destination_type
	switch x := m.DestinationType.(type) {
	case *DestinationSpec_Aws:
		s := proto.Size(x.Aws)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Each upstream in Gloo has a type. Supported types include `static`, `kubernetes`, `aws`, `consul`, and more.
// Each upstream type is handled by a corresponding Gloo plugin.
type UpstreamSpec struct {
	// Note to developers: new Upstream Plugins must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to UpstreamType:
	//	*UpstreamSpec_Aws
	//	*UpstreamSpec_Kube
	UpstreamType isUpstreamSpec_UpstreamType `protobuf_oneof:"upstream_type"`
}

func (m *UpstreamSpec) Reset()                    { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string            { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()               {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) { return fileDescriptorPlugins, []int{4} }

type isUpstreamSpec_UpstreamType interface {
	isUpstreamSpec_UpstreamType()
	Equal(interface{}) bool
}

type UpstreamSpec_Aws struct {
	Aws *gloo_plugins_aws.UpstreamSpec `protobuf:"bytes,1,opt,name=aws,oneof"`
}
type UpstreamSpec_Kube struct {
	Kube *gloo_plugins_kubernetes.UpstreamSpec `protobuf:"bytes,2,opt,name=kube,oneof"`
}

func (*UpstreamSpec_Aws) isUpstreamSpec_UpstreamType()  {}
func (*UpstreamSpec_Kube) isUpstreamSpec_UpstreamType() {}

func (m *UpstreamSpec) GetUpstreamType() isUpstreamSpec_UpstreamType {
	if m != nil {
		return m.UpstreamType
	}
	return nil
}

func (m *UpstreamSpec) GetAws() *gloo_plugins_aws.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *UpstreamSpec) GetKube() *gloo_plugins_kubernetes.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Kube); ok {
		return x.Kube
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpstreamSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpstreamSpec_OneofMarshaler, _UpstreamSpec_OneofUnmarshaler, _UpstreamSpec_OneofSizer, []interface{}{
		(*UpstreamSpec_Aws)(nil),
		(*UpstreamSpec_Kube)(nil),
	}
}

func _UpstreamSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpstreamSpec)
	// upstream_type
	switch x := m.UpstreamType.(type) {
	case *UpstreamSpec_Aws:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aws); err != nil {
			return err
		}
	case *UpstreamSpec_Kube:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Kube); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpstreamSpec.UpstreamType has unexpected type %T", x)
	}
	return nil
}

func _UpstreamSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpstreamSpec)
	switch tag {
	case 1: // upstream_type.aws
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gloo_plugins_aws.UpstreamSpec)
		err := b.DecodeMessage(msg)
		m.UpstreamType = &UpstreamSpec_Aws{msg}
		return true, err
	case 2: // upstream_type.kube
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gloo_plugins_kubernetes.UpstreamSpec)
		err := b.DecodeMessage(msg)
		m.UpstreamType = &UpstreamSpec_Kube{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpstreamSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpstreamSpec)
	// upstream_type
	switch x := m.UpstreamType.(type) {
	case *UpstreamSpec_Aws:
		s := proto.Size(x.Aws)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpstreamSpec_Kube:
		s := proto.Size(x.Kube)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ListenerPlugin)(nil), "gloo.solo.io.ListenerPlugin")
	proto.RegisterType((*VirtualHostPlugin)(nil), "gloo.solo.io.VirtualHostPlugin")
	proto.RegisterType((*RoutePlugin)(nil), "gloo.solo.io.RoutePlugin")
	proto.RegisterType((*DestinationSpec)(nil), "gloo.solo.io.DestinationSpec")
	proto.RegisterType((*UpstreamSpec)(nil), "gloo.solo.io.UpstreamSpec")
}
func (this *ListenerPlugin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListenerPlugin)
	if !ok {
		that2, ok := that.(ListenerPlugin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PluginType == nil {
		if this.PluginType != nil {
			return false
		}
	} else if this.PluginType == nil {
		return false
	} else if !this.PluginType.Equal(that1.PluginType) {
		return false
	}
	return true
}
func (this *ListenerPlugin_Empty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListenerPlugin_Empty)
	if !ok {
		that2, ok := that.(ListenerPlugin_Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Empty != that1.Empty {
		return false
	}
	return true
}
func (this *VirtualHostPlugin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostPlugin)
	if !ok {
		that2, ok := that.(VirtualHostPlugin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PluginType == nil {
		if this.PluginType != nil {
			return false
		}
	} else if this.PluginType == nil {
		return false
	} else if !this.PluginType.Equal(that1.PluginType) {
		return false
	}
	return true
}
func (this *VirtualHostPlugin_Empty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostPlugin_Empty)
	if !ok {
		that2, ok := that.(VirtualHostPlugin_Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Empty != that1.Empty {
		return false
	}
	return true
}
func (this *RoutePlugin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutePlugin)
	if !ok {
		that2, ok := that.(RoutePlugin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PluginType == nil {
		if this.PluginType != nil {
			return false
		}
	} else if this.PluginType == nil {
		return false
	} else if !this.PluginType.Equal(that1.PluginType) {
		return false
	}
	return true
}
func (this *RoutePlugin_Empty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutePlugin_Empty)
	if !ok {
		that2, ok := that.(RoutePlugin_Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Empty != that1.Empty {
		return false
	}
	return true
}
func (this *DestinationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec)
	if !ok {
		that2, ok := that.(DestinationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DestinationType == nil {
		if this.DestinationType != nil {
			return false
		}
	} else if this.DestinationType == nil {
		return false
	} else if !this.DestinationType.Equal(that1.DestinationType) {
		return false
	}
	return true
}
func (this *DestinationSpec_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec_Aws)
	if !ok {
		that2, ok := that.(DestinationSpec_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.UpstreamType == nil {
		if this.UpstreamType != nil {
			return false
		}
	} else if this.UpstreamType == nil {
		return false
	} else if !this.UpstreamType.Equal(that1.UpstreamType) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Aws)
	if !ok {
		that2, ok := that.(UpstreamSpec_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Kube) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Kube)
	if !ok {
		that2, ok := that.(UpstreamSpec_Kube)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Kube.Equal(that1.Kube) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("plugins.proto", fileDescriptorPlugins) }

var fileDescriptorPlugins = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0x9b, 0xef, 0x53, 0xc1, 0xd3, 0xd6, 0x6a, 0x10, 0x29, 0x5d, 0x14, 0x2d, 0x08, 0x6e,
	0xcc, 0x60, 0xad, 0x08, 0x75, 0x17, 0x44, 0xba, 0x50, 0x90, 0x8a, 0x2e, 0x44, 0x90, 0x69, 0x3d,
	0xc4, 0xb1, 0x69, 0xce, 0x90, 0x39, 0x63, 0xe9, 0x5d, 0x78, 0x19, 0x5e, 0x97, 0x57, 0x22, 0x99,
	0x44, 0xfa, 0xe3, 0xaa, 0xae, 0x32, 0x39, 0xe7, 0x7d, 0x9e, 0x84, 0x79, 0xa1, 0xaa, 0x63, 0x1b,
	0xa9, 0xc4, 0x04, 0x3a, 0x25, 0x26, 0xbf, 0x12, 0xc5, 0x44, 0x81, 0xa1, 0x98, 0x02, 0x45, 0x8d,
	0xdd, 0x88, 0x22, 0x72, 0x0b, 0x91, 0x9d, 0xf2, 0x4c, 0xe3, 0x2a, 0x52, 0xfc, 0x6a, 0x07, 0xc1,
	0x90, 0xc6, 0x22, 0x4b, 0x1e, 0x2b, 0xca, 0x9f, 0x23, 0xc5, 0x42, 0xa7, 0xf4, 0x86, 0x43, 0x36,
	0x22, 0x13, 0x09, 0x3d, 0x8a, 0x44, 0xf1, 0x01, 0x21, 0x27, 0xa6, 0x38, 0x17, 0x9e, 0x9b, 0xbf,
	0x79, 0x46, 0x76, 0x80, 0x69, 0x82, 0x8c, 0x8b, 0xba, 0xd6, 0x39, 0x6c, 0x5d, 0x2b, 0xc3, 0x98,
	0x60, 0x7a, 0xeb, 0xe6, 0xfe, 0x1e, 0xac, 0xe3, 0x58, 0xf3, 0xb4, 0xee, 0xed, 0x7b, 0x47, 0x9b,
	0xbd, 0x52, 0x3f, 0x7f, 0x0d, 0xab, 0x50, 0xce, 0xc9, 0x67, 0x9e, 0x6a, 0x6c, 0x75, 0x61, 0xe7,
	0x41, 0xa5, 0x6c, 0x65, 0xdc, 0x23, 0xc3, 0xab, 0xb1, 0x1d, 0x28, 0xf7, 0xc9, 0x32, 0xae, 0x46,
	0x3d, 0x41, 0xed, 0x12, 0x0d, 0xab, 0x44, 0xb2, 0xa2, 0xe4, 0x4e, 0xe3, 0xd0, 0x3f, 0x83, 0xff,
	0x72, 0x62, 0x1c, 0x57, 0x6e, 0x1f, 0x04, 0xae, 0x86, 0x9f, 0x6a, 0xe4, 0xc4, 0x04, 0x4b, 0xf9,
	0x5e, 0xa9, 0x9f, 0xe5, 0x43, 0x1f, 0xb6, 0x5f, 0x66, 0x9b, 0xdc, 0xfe, 0xe1, 0x41, 0xe5, 0x5e,
	0x1b, 0x4e, 0x51, 0x8e, 0x9d, 0xbb, 0x3d, 0xef, 0x6e, 0xfe, 0x76, 0xcf, 0x87, 0x0b, 0xb1, 0x7f,
	0x01, 0x6b, 0xd9, 0x45, 0xd7, 0xff, 0x39, 0xe8, 0x70, 0x11, 0x9a, 0x55, 0xb0, 0xcc, 0x3a, 0x28,
	0xac, 0x41, 0xd5, 0x16, 0x73, 0xf7, 0x4b, 0x61, 0xf7, 0xf3, 0xab, 0xe9, 0x3d, 0x76, 0x56, 0x2b,
	0x5c, 0x6a, 0x25, 0xde, 0x4f, 0x06, 0x1b, 0xae, 0xde, 0xd3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x32, 0xb2, 0x14, 0x23, 0xaa, 0x02, 0x00, 0x00,
}

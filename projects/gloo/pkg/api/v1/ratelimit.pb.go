// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ratelimit.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import plugins_gloo_solo_io1 "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1/plugins/ratelimit"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Constraint struct {
	Key         string                           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string                           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	RateLimit   *plugins_gloo_solo_io1.RateLimit `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit" json:"rate_limit,omitempty"`
	Constraints []*Constraint                    `protobuf:"bytes,4,rep,name=constraints" json:"constraints,omitempty"`
}

func (m *Constraint) Reset()                    { *m = Constraint{} }
func (m *Constraint) String() string            { return proto.CompactTextString(m) }
func (*Constraint) ProtoMessage()               {}
func (*Constraint) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{0} }

func (m *Constraint) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Constraint) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Constraint) GetRateLimit() *plugins_gloo_solo_io1.RateLimit {
	if m != nil {
		return m.RateLimit
	}
	return nil
}

func (m *Constraint) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

//
// @solo-kit:xds-service=RateLimitDiscoveryService
// @solo-kit:resource.no_references
type RateLimitConfig struct {
	// @solo-kit:resource.name
	Domain      string        `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Constraints []*Constraint `protobuf:"bytes,2,rep,name=constraints" json:"constraints,omitempty"`
}

func (m *RateLimitConfig) Reset()                    { *m = RateLimitConfig{} }
func (m *RateLimitConfig) String() string            { return proto.CompactTextString(m) }
func (*RateLimitConfig) ProtoMessage()               {}
func (*RateLimitConfig) Descriptor() ([]byte, []int) { return fileDescriptorRatelimit, []int{1} }

func (m *RateLimitConfig) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RateLimitConfig) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

func init() {
	proto.RegisterType((*Constraint)(nil), "gloo.solo.io.Constraint")
	proto.RegisterType((*RateLimitConfig)(nil), "gloo.solo.io.RateLimitConfig")
}
func (this *Constraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Constraint)
	if !ok {
		that2, ok := that.(Constraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return false
	}
	for i := range this.Constraints {
		if !this.Constraints[i].Equal(that1.Constraints[i]) {
			return false
		}
	}
	return true
}
func (this *RateLimitConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfig)
	if !ok {
		that2, ok := that.(RateLimitConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return false
	}
	for i := range this.Constraints {
		if !this.Constraints[i].Equal(that1.Constraints[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RateLimitDiscoveryService service

type RateLimitDiscoveryServiceClient interface {
	StreamRateLimitConfig(ctx context.Context, opts ...grpc.CallOption) (RateLimitDiscoveryService_StreamRateLimitConfigClient, error)
	IncrementalRateLimitConfig(ctx context.Context, opts ...grpc.CallOption) (RateLimitDiscoveryService_IncrementalRateLimitConfigClient, error)
	FetchRateLimitConfig(ctx context.Context, in *envoy_api_v2.DiscoveryRequest, opts ...grpc.CallOption) (*envoy_api_v2.DiscoveryResponse, error)
}

type rateLimitDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRateLimitDiscoveryServiceClient(cc *grpc.ClientConn) RateLimitDiscoveryServiceClient {
	return &rateLimitDiscoveryServiceClient{cc}
}

func (c *rateLimitDiscoveryServiceClient) StreamRateLimitConfig(ctx context.Context, opts ...grpc.CallOption) (RateLimitDiscoveryService_StreamRateLimitConfigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RateLimitDiscoveryService_serviceDesc.Streams[0], c.cc, "/gloo.solo.io.RateLimitDiscoveryService/StreamRateLimitConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &rateLimitDiscoveryServiceStreamRateLimitConfigClient{stream}
	return x, nil
}

type RateLimitDiscoveryService_StreamRateLimitConfigClient interface {
	Send(*envoy_api_v2.DiscoveryRequest) error
	Recv() (*envoy_api_v2.DiscoveryResponse, error)
	grpc.ClientStream
}

type rateLimitDiscoveryServiceStreamRateLimitConfigClient struct {
	grpc.ClientStream
}

func (x *rateLimitDiscoveryServiceStreamRateLimitConfigClient) Send(m *envoy_api_v2.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rateLimitDiscoveryServiceStreamRateLimitConfigClient) Recv() (*envoy_api_v2.DiscoveryResponse, error) {
	m := new(envoy_api_v2.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rateLimitDiscoveryServiceClient) IncrementalRateLimitConfig(ctx context.Context, opts ...grpc.CallOption) (RateLimitDiscoveryService_IncrementalRateLimitConfigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RateLimitDiscoveryService_serviceDesc.Streams[1], c.cc, "/gloo.solo.io.RateLimitDiscoveryService/IncrementalRateLimitConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &rateLimitDiscoveryServiceIncrementalRateLimitConfigClient{stream}
	return x, nil
}

type RateLimitDiscoveryService_IncrementalRateLimitConfigClient interface {
	Send(*envoy_api_v2.IncrementalDiscoveryRequest) error
	Recv() (*envoy_api_v2.IncrementalDiscoveryResponse, error)
	grpc.ClientStream
}

type rateLimitDiscoveryServiceIncrementalRateLimitConfigClient struct {
	grpc.ClientStream
}

func (x *rateLimitDiscoveryServiceIncrementalRateLimitConfigClient) Send(m *envoy_api_v2.IncrementalDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rateLimitDiscoveryServiceIncrementalRateLimitConfigClient) Recv() (*envoy_api_v2.IncrementalDiscoveryResponse, error) {
	m := new(envoy_api_v2.IncrementalDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rateLimitDiscoveryServiceClient) FetchRateLimitConfig(ctx context.Context, in *envoy_api_v2.DiscoveryRequest, opts ...grpc.CallOption) (*envoy_api_v2.DiscoveryResponse, error) {
	out := new(envoy_api_v2.DiscoveryResponse)
	err := grpc.Invoke(ctx, "/gloo.solo.io.RateLimitDiscoveryService/FetchRateLimitConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RateLimitDiscoveryService service

type RateLimitDiscoveryServiceServer interface {
	StreamRateLimitConfig(RateLimitDiscoveryService_StreamRateLimitConfigServer) error
	IncrementalRateLimitConfig(RateLimitDiscoveryService_IncrementalRateLimitConfigServer) error
	FetchRateLimitConfig(context.Context, *envoy_api_v2.DiscoveryRequest) (*envoy_api_v2.DiscoveryResponse, error)
}

func RegisterRateLimitDiscoveryServiceServer(s *grpc.Server, srv RateLimitDiscoveryServiceServer) {
	s.RegisterService(&_RateLimitDiscoveryService_serviceDesc, srv)
}

func _RateLimitDiscoveryService_StreamRateLimitConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RateLimitDiscoveryServiceServer).StreamRateLimitConfig(&rateLimitDiscoveryServiceStreamRateLimitConfigServer{stream})
}

type RateLimitDiscoveryService_StreamRateLimitConfigServer interface {
	Send(*envoy_api_v2.DiscoveryResponse) error
	Recv() (*envoy_api_v2.DiscoveryRequest, error)
	grpc.ServerStream
}

type rateLimitDiscoveryServiceStreamRateLimitConfigServer struct {
	grpc.ServerStream
}

func (x *rateLimitDiscoveryServiceStreamRateLimitConfigServer) Send(m *envoy_api_v2.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rateLimitDiscoveryServiceStreamRateLimitConfigServer) Recv() (*envoy_api_v2.DiscoveryRequest, error) {
	m := new(envoy_api_v2.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RateLimitDiscoveryService_IncrementalRateLimitConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RateLimitDiscoveryServiceServer).IncrementalRateLimitConfig(&rateLimitDiscoveryServiceIncrementalRateLimitConfigServer{stream})
}

type RateLimitDiscoveryService_IncrementalRateLimitConfigServer interface {
	Send(*envoy_api_v2.IncrementalDiscoveryResponse) error
	Recv() (*envoy_api_v2.IncrementalDiscoveryRequest, error)
	grpc.ServerStream
}

type rateLimitDiscoveryServiceIncrementalRateLimitConfigServer struct {
	grpc.ServerStream
}

func (x *rateLimitDiscoveryServiceIncrementalRateLimitConfigServer) Send(m *envoy_api_v2.IncrementalDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rateLimitDiscoveryServiceIncrementalRateLimitConfigServer) Recv() (*envoy_api_v2.IncrementalDiscoveryRequest, error) {
	m := new(envoy_api_v2.IncrementalDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RateLimitDiscoveryService_FetchRateLimitConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(envoy_api_v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitDiscoveryServiceServer).FetchRateLimitConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gloo.solo.io.RateLimitDiscoveryService/FetchRateLimitConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitDiscoveryServiceServer).FetchRateLimitConfig(ctx, req.(*envoy_api_v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RateLimitDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gloo.solo.io.RateLimitDiscoveryService",
	HandlerType: (*RateLimitDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchRateLimitConfig",
			Handler:    _RateLimitDiscoveryService_FetchRateLimitConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRateLimitConfig",
			Handler:       _RateLimitDiscoveryService_StreamRateLimitConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "IncrementalRateLimitConfig",
			Handler:       _RateLimitDiscoveryService_IncrementalRateLimitConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ratelimit.proto",
}

func init() { proto.RegisterFile("ratelimit.proto", fileDescriptorRatelimit) }

var fileDescriptorRatelimit = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x71, 0x0b, 0x2b, 0xad, 0x8b, 0xb4, 0xc8, 0x2a, 0x28, 0x44, 0xcb, 0x6e, 0xc9, 0x29,
	0xac, 0x84, 0x0d, 0x81, 0x53, 0x0f, 0x1c, 0x58, 0x84, 0x84, 0xc4, 0x29, 0x7b, 0xe3, 0x00, 0xf2,
	0x7a, 0x07, 0xaf, 0x69, 0xe2, 0x09, 0xb6, 0x1b, 0xa9, 0x47, 0x78, 0x05, 0x5e, 0x82, 0x23, 0xef,
	0xc2, 0x1b, 0x20, 0x9e, 0x82, 0x13, 0x4a, 0xd2, 0x86, 0x36, 0x08, 0x09, 0x24, 0x4e, 0x19, 0x7b,
	0x7e, 0xcf, 0x37, 0xa3, 0x7f, 0x42, 0x0f, 0x9c, 0x0c, 0x50, 0x98, 0xd2, 0x04, 0x5e, 0x39, 0x0c,
	0xc8, 0xae, 0xeb, 0x02, 0x91, 0x7b, 0x2c, 0x90, 0x1b, 0x8c, 0x0f, 0xc1, 0xd6, 0xb8, 0x12, 0xb2,
	0x32, 0xa2, 0xce, 0xc4, 0x85, 0xf1, 0x0a, 0x6b, 0x70, 0xab, 0x4e, 0x1b, 0x1f, 0x6a, 0x44, 0x5d,
	0x40, 0x9b, 0x96, 0xd6, 0x62, 0x90, 0xc1, 0xa0, 0xf5, 0xeb, 0xec, 0xdd, 0xaa, 0x58, 0x6a, 0x63,
	0xbd, 0xe8, 0x11, 0x62, 0x00, 0x8b, 0xa7, 0x1a, 0x35, 0xb6, 0xa1, 0x68, 0xa2, 0xee, 0x36, 0xf9,
	0x42, 0x28, 0x3d, 0x45, 0xeb, 0x83, 0x93, 0xc6, 0x06, 0x76, 0x83, 0x8e, 0x17, 0xb0, 0x8a, 0xc8,
	0x8c, 0xa4, 0xfb, 0x79, 0x13, 0xb2, 0x29, 0xbd, 0x56, 0xcb, 0x62, 0x09, 0xd1, 0xa8, 0xbd, 0xeb,
	0x0e, 0xec, 0x09, 0xa5, 0x4d, 0xfd, 0x37, 0x2d, 0x20, 0x1a, 0xcf, 0x48, 0x3a, 0xc9, 0x8e, 0xf9,
	0xba, 0x09, 0xbe, 0x3d, 0x16, 0xcf, 0x65, 0x80, 0x97, 0x8d, 0x2c, 0xdf, 0x77, 0x9b, 0x90, 0xcd,
	0xe9, 0x44, 0xf5, 0x54, 0x1f, 0x5d, 0x9d, 0x8d, 0xd3, 0x49, 0x16, 0xed, 0x3e, 0xfc, 0xd5, 0x56,
	0xbe, 0x2d, 0x4e, 0x80, 0x1e, 0xf4, 0x35, 0x4f, 0xd1, 0xbe, 0x35, 0x9a, 0xdd, 0xa2, 0x7b, 0x17,
	0x58, 0x4a, 0x63, 0xd7, 0x9d, 0xaf, 0x4f, 0x43, 0xcc, 0xe8, 0x1f, 0x30, 0xd9, 0x8f, 0x11, 0xbd,
	0xdd, 0x73, 0x9e, 0x6d, 0xdc, 0x38, 0x03, 0x57, 0x1b, 0x05, 0xec, 0x35, 0xbd, 0x79, 0x16, 0x1c,
	0xc8, 0x72, 0xd8, 0xca, 0x11, 0x6f, 0x6d, 0xe4, 0xb2, 0x32, 0xbc, 0xce, 0x78, 0xff, 0x30, 0x87,
	0xf7, 0x4b, 0xf0, 0x21, 0x3e, 0xfe, 0x63, 0xde, 0x57, 0x68, 0x3d, 0x24, 0x57, 0x52, 0xf2, 0x80,
	0xb0, 0x15, 0x8d, 0x5f, 0x58, 0xe5, 0xa0, 0x04, 0x1b, 0x64, 0x31, 0x84, 0xdc, 0xdb, 0x2d, 0xb2,
	0xa5, 0xfc, 0x8d, 0x77, 0xf2, 0x37, 0xd2, 0x1d, 0xf4, 0x07, 0x42, 0xa7, 0xcf, 0x21, 0xa8, 0xcb,
	0xff, 0x3e, 0x5a, 0xfa, 0xf1, 0xeb, 0xf7, 0x4f, 0xa3, 0x24, 0xb9, 0xb3, 0xb3, 0xe0, 0xf3, 0x7e,
	0x53, 0x55, 0xcb, 0x99, 0x93, 0x93, 0xa7, 0xf3, 0xcf, 0xdf, 0x8e, 0xc8, 0xab, 0xc7, 0xda, 0x84,
	0xcb, 0xe5, 0x39, 0x57, 0x58, 0x8a, 0xc6, 0xae, 0xfb, 0x06, 0xbb, 0xef, 0xc2, 0x04, 0x51, 0x39,
	0x7c, 0x07, 0x2a, 0x78, 0xd1, 0xb8, 0x29, 0xaa, 0x85, 0xee, 0xfe, 0x9c, 0x87, 0xe7, 0x7b, 0xed,
	0x66, 0x3f, 0xfa, 0x19, 0x00, 0x00, 0xff, 0xff, 0x71, 0xb5, 0x47, 0x72, 0x6f, 0x03, 0x00, 0x00,
}

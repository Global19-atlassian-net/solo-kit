// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: artifact.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	artifact.proto
	endpoint.proto
	plugins.proto
	proxy.proto
	secret.proto
	upstream.proto

It has these top-level messages:
	Artifact
	Endpoint
	ListenerPlugin
	VirtualHostPlugin
	RoutePlugin
	DestinationSpec
	UpstreamSpec
	Proxy
	Listener
	HttpListener
	VirtualHost
	Route
	RouteAction
	Destination
	MultiDestination
	WeightedDestination
	RedirectAction
	DirectResponseAction
	RouteMatcher
	HeaderMatcher
	QueryParameterMatcher
	SslConfig
	SSLFiles
	Secret
	Upstream
	DiscoveryMetadata
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import core_solo_io "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
// @solo-kit:resource
// @solo-kit:resource.data_type
// @solo-kit:resource.short_name=art
// @solo-kit:resource.plural_name=artifacts
// @solo-kit:resource.group_name=gloo.solo.io
// @solo-kit:resource.version=v1
//
// Gloo Artifacts are used by Gloo to store small bits of binary or file data.
//
// Certain plugins such as the gRPC plugin read and write artifacts to one of Gloo's configured
// storage layer.
//
// Artifacts can be backed by files on disk, Kubernetes ConfigMaps, and Consul Key/Value pairs.
//
// Supported artifact backends can be selected in Gloo's boostrap options.
type Artifact struct {
	// The data this Artifact contains
	Data map[string]string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Metadata contains the object metadata for this resource
	Metadata core_solo_io.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
}

func (m *Artifact) Reset()                    { *m = Artifact{} }
func (m *Artifact) String() string            { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()               {}
func (*Artifact) Descriptor() ([]byte, []int) { return fileDescriptorArtifact, []int{0} }

func (m *Artifact) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Artifact) GetMetadata() core_solo_io.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core_solo_io.Metadata{}
}

func init() {
	proto.RegisterType((*Artifact)(nil), "gloo.solo.io.Artifact")
}
func (this *Artifact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Artifact)
	if !ok {
		that2, ok := that.(Artifact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("artifact.proto", fileDescriptorArtifact) }

var fileDescriptorArtifact = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2c, 0x2a, 0xc9,
	0x4c, 0x4b, 0x4c, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49, 0xcf, 0xc9, 0xcf,
	0xd7, 0x2b, 0xce, 0xcf, 0xc9, 0xd7, 0xcb, 0xcc, 0x97, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d,
	0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0x2b, 0x4a, 0x2a, 0x4d, 0x03,
	0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0xa2, 0x59, 0xca, 0x10, 0x49, 0x39, 0xc8, 0x08, 0xdd, 0xcc, 0x7c,
	0x08, 0x9d, 0x9d, 0x59, 0xa2, 0x9f, 0x58, 0x90, 0xa9, 0x5f, 0x66, 0xa8, 0x9f, 0x9b, 0x5a, 0x92,
	0x98, 0x92, 0x58, 0x92, 0x08, 0xd1, 0xa2, 0xb4, 0x99, 0x91, 0x8b, 0xc3, 0x11, 0xea, 0x04, 0x21,
	0x13, 0x2e, 0x16, 0x90, 0x94, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x82, 0x1e, 0xb2, 0x5b,
	0xf4, 0x60, 0xaa, 0xf4, 0x5c, 0x12, 0x4b, 0x12, 0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0xc0, 0xaa,
	0x85, 0x2c, 0xb8, 0x38, 0x60, 0x86, 0x4a, 0xb0, 0x2b, 0x30, 0x6a, 0x70, 0x1b, 0x89, 0xe9, 0x25,
	0xe7, 0x17, 0xa5, 0xc2, 0x75, 0xfa, 0x42, 0x65, 0x9d, 0x58, 0x4e, 0xdc, 0x93, 0x67, 0x08, 0x82,
	0xab, 0x96, 0x32, 0xe7, 0xe2, 0x84, 0x1b, 0x26, 0x24, 0xc0, 0xc5, 0x9c, 0x9d, 0x5a, 0x29, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x62, 0x0a, 0x89, 0x70, 0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6,
	0x4a, 0x30, 0x81, 0xc5, 0x20, 0x1c, 0x2b, 0x26, 0x0b, 0x46, 0x27, 0xab, 0x15, 0x8f, 0xe4, 0x18,
	0xa3, 0x4c, 0xf0, 0x79, 0xb7, 0xa0, 0x28, 0x3f, 0x2b, 0x35, 0xb9, 0xa4, 0x58, 0x1f, 0xe4, 0x09,
	0xfd, 0x82, 0xec, 0x74, 0x68, 0x00, 0x24, 0xb1, 0x81, 0x3d, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xd7, 0x1e, 0x05, 0x45, 0x7a, 0x01, 0x00, 0x00,
}

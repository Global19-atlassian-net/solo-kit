// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: role.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"
import core_solo_io "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
import core_solo_io1 "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
// @solo-kit:resource
// @solo-kit:resource.short_name=rl
// @solo-kit:resource.plural_name=roles
// @solo-kit:resource.group_name=gloo.solo.io
// @solo-kit:resource.version=v1
//
// A Role is a container for a set of Virtual Services that will be used to generate a single proxy config
// to be applied to one or more Envoy nodes. The Role is best understood as an in-mesh application's localized view
// of the rest of the mesh.
// Each domain for each Virtual Service contained in a Role cannot appear more than once, or the Role
// will be invalid.
// Roles contain a config field which can be written to for the purpose of applying configuration and policy
// to groupings of Virtual Services.
//
// The name of the role is matched to Envoy instances. Envoy instances will be assigned a config matching the role they report to Gloo when registering
// Envoy instances must specify their role in the prefix for their Node ID when they register to Gloo.
//
// Currently this is done in the format <Role>~<this portion is ignored>
// which can be specified with the `--service-node` flag, or in the Envoy instance's bootstrap config.
type Role struct {
	// define each listener the proxy will create
	// listeners define a set of behaviors for a single address:port
	// where the proxy will listen
	// if no listeners are specified, the role will behave as a gateway
	// see (pkg/api/defaults/v1)[https://github.com/solo-io/gloo/tree/master/pkg/api/defaults/v1]
	// to see the default listeners that will be created for Gateway proxies
	// binding to the default HTTP (8080) and HTTPS (8443) ports on 0.0.0.0 (all interfaces)
	Listeners []*Listener `protobuf:"bytes,2,rep,name=listeners" json:"listeners,omitempty"`
	// Status indicates the validation status of the role resource.
	// Status is read-only by clients, and set by gloo during validation
	Status core_solo_io1.Status `protobuf:"bytes,6,opt,name=status" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core_solo_io.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{0} }

func (m *Role) GetListeners() []*Listener {
	if m != nil {
		return m.Listeners
	}
	return nil
}

func (m *Role) GetStatus() core_solo_io1.Status {
	if m != nil {
		return m.Status
	}
	return core_solo_io1.Status{}
}

func (m *Role) GetMetadata() core_solo_io.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core_solo_io.Metadata{}
}

// Listeners define the address:port where the proxy will listen for incoming connections
// Each listener defines a unique set of TCP and HTTP behaviors
type Listener struct {
	// the name of the listener. names must be unique for listeners within a role
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the bind address for the listener.
	// both ipv4 and ipv6 formats are supported
	BindAddress string `protobuf:"bytes,2,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	// the port to bind on
	// ports numbers must be unique for listeners within a role
	BindPort uint32 `protobuf:"varint,3,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	// defines the set of virtual services that will be accessible by clients connecting to this listener.
	// at least one virtual service must be specifiedfor HTTP-level features to be applied at the listener level
	VirtualServices []string `protobuf:"bytes,4,rep,name=virtual_services,json=virtualServices" json:"virtual_services,omitempty"`
	// Config contains top-level config to be applied to a listener
	// Listener config is applied to all TCP/HTTP traffic that
	// initiates via this listener.
	// Configuration such as gzip compression and TLS authentication is specified here
	Config *google_protobuf1.Struct `protobuf:"bytes,5,opt,name=config" json:"config,omitempty"`
	// Apply Listener Attributes to listeners with selectors matching these label keys and values
	// If empty or not present, the Listener will inherit no configuration from Attributes.
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// SSL Config is optional for the role. If provided, the listener will serve TLS for connections on this port
	// this is useful when there are no virtual services assigned to this listener, e.g. for the purpose of
	// securing a Listener functioning as a TCP Proxy
	// if no virtual services are defined and ssl_config is nil, the proxy will serve tcp connections insecurely on this port
	SslConfig *SSLConfig `protobuf:"bytes,6,opt,name=ssl_config,json=sslConfig" json:"ssl_config,omitempty"`
}

func (m *Listener) Reset()                    { *m = Listener{} }
func (m *Listener) String() string            { return proto.CompactTextString(m) }
func (*Listener) ProtoMessage()               {}
func (*Listener) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{1} }

func (m *Listener) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Listener) GetBindAddress() string {
	if m != nil {
		return m.BindAddress
	}
	return ""
}

func (m *Listener) GetBindPort() uint32 {
	if m != nil {
		return m.BindPort
	}
	return 0
}

func (m *Listener) GetVirtualServices() []string {
	if m != nil {
		return m.VirtualServices
	}
	return nil
}

func (m *Listener) GetConfig() *google_protobuf1.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Listener) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Listener) GetSslConfig() *SSLConfig {
	if m != nil {
		return m.SslConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*Role)(nil), "gloo.api.v1.Role")
	proto.RegisterType((*Listener)(nil), "gloo.api.v1.Listener")
}
func (this *Role) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Role)
	if !ok {
		that2, ok := that.(Role)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Listeners) != len(that1.Listeners) {
		return false
	}
	for i := range this.Listeners {
		if !this.Listeners[i].Equal(that1.Listeners[i]) {
			return false
		}
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	return true
}
func (this *Listener) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Listener)
	if !ok {
		that2, ok := that.(Listener)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.BindAddress != that1.BindAddress {
		return false
	}
	if this.BindPort != that1.BindPort {
		return false
	}
	if len(this.VirtualServices) != len(that1.VirtualServices) {
		return false
	}
	for i := range this.VirtualServices {
		if this.VirtualServices[i] != that1.VirtualServices[i] {
			return false
		}
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if !this.SslConfig.Equal(that1.SslConfig) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("role.proto", fileDescriptorRole) }

var fileDescriptorRole = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x26, 0x6d, 0x37, 0xdb, 0xba, 0x20, 0x16, 0xab, 0x40, 0x28, 0x88, 0xed, 0xf6, 0x54, 0x0e,
	0xd8, 0xea, 0x2e, 0x48, 0xbb, 0xbd, 0x51, 0x84, 0xb8, 0x14, 0x09, 0x39, 0x37, 0x2e, 0x95, 0x93,
	0xb8, 0xc1, 0xd4, 0xcd, 0x44, 0xb6, 0x13, 0x69, 0xdf, 0x88, 0xa7, 0xe0, 0xcc, 0x53, 0xec, 0x81,
	0x0b, 0x77, 0x9e, 0x00, 0xc5, 0x71, 0xa1, 0x48, 0x08, 0x71, 0xca, 0xe4, 0xfb, 0x19, 0x7b, 0x3e,
	0x0f, 0x42, 0x1a, 0x94, 0x20, 0xa5, 0x06, 0x0b, 0x78, 0x98, 0x2b, 0x00, 0xc2, 0x4b, 0x49, 0xea,
	0xf9, 0xf8, 0x49, 0x0e, 0x90, 0x2b, 0x41, 0x1d, 0x95, 0x54, 0x1b, 0x6a, 0xac, 0xae, 0x52, 0xdb,
	0x4a, 0xc7, 0xa3, 0x5a, 0x6a, 0x5b, 0x71, 0x65, 0x84, 0xae, 0x65, 0x2a, 0xf6, 0x68, 0x0e, 0x39,
	0xb8, 0x92, 0x36, 0x95, 0x47, 0xe7, 0xb9, 0xb4, 0x1f, 0xab, 0x84, 0xa4, 0xb0, 0xa3, 0x06, 0x14,
	0x3c, 0x97, 0xd0, 0x7e, 0xb7, 0xd2, 0x52, 0x5e, 0x4a, 0x5a, 0xcf, 0xe9, 0x4e, 0x58, 0x9e, 0x71,
	0xcb, 0xbd, 0x85, 0xfe, 0x87, 0xc5, 0x58, 0x6e, 0x2b, 0xd3, 0x1a, 0xa6, 0x5f, 0x02, 0xd4, 0x63,
	0xa0, 0x04, 0xbe, 0x40, 0x03, 0x25, 0x8d, 0x15, 0x85, 0xd0, 0x26, 0xea, 0x4c, 0xba, 0xb3, 0xe1,
	0xf9, 0x7d, 0x72, 0x30, 0x17, 0x59, 0x79, 0x96, 0xfd, 0xd6, 0xe1, 0xb7, 0x28, 0x6c, 0xbb, 0x45,
	0xe1, 0x24, 0x98, 0x0d, 0xcf, 0x47, 0x24, 0x05, 0x2d, 0x48, 0x73, 0x22, 0x91, 0x40, 0x62, 0xc7,
	0x2d, 0x1f, 0x7d, 0xbd, 0x39, 0xbd, 0xf5, 0xe3, 0xe6, 0xf4, 0x9e, 0x15, 0xc6, 0x66, 0x72, 0xb3,
	0x59, 0x4c, 0x65, 0x5e, 0x80, 0x16, 0x53, 0xe6, 0xed, 0xf8, 0x12, 0xf5, 0xf7, 0x93, 0x44, 0xc7,
	0xae, 0xd5, 0x83, 0x3f, 0x5b, 0xbd, 0xf3, 0xec, 0xb2, 0xd7, 0x34, 0x63, 0xbf, 0xd4, 0xd3, 0xef,
	0x1d, 0xd4, 0xdf, 0x5f, 0x0d, 0x63, 0xd4, 0x2b, 0xf8, 0x4e, 0x44, 0xc1, 0x24, 0x98, 0x0d, 0x98,
	0xab, 0xf1, 0x19, 0xba, 0x9d, 0xc8, 0x22, 0x5b, 0xf3, 0x2c, 0xd3, 0xc2, 0x34, 0xb3, 0x35, 0xdc,
	0xb0, 0xc1, 0x5e, 0xb5, 0x10, 0x7e, 0x8c, 0x06, 0x4e, 0x52, 0x82, 0xb6, 0x51, 0x77, 0x12, 0xcc,
	0xee, 0xb0, 0x7e, 0x03, 0xbc, 0x07, 0x6d, 0xf1, 0x33, 0x74, 0xe2, 0xdf, 0x6c, 0xed, 0x1f, 0xcd,
	0x44, 0xbd, 0x49, 0x77, 0x36, 0x60, 0x77, 0x3d, 0x1e, 0x7b, 0x18, 0x53, 0x14, 0xa6, 0x50, 0x6c,
	0x64, 0x1e, 0x1d, 0xb9, 0x19, 0x1e, 0x92, 0x76, 0x17, 0xc8, 0x7e, 0x17, 0x48, 0xec, 0x76, 0x81,
	0x79, 0x19, 0xbe, 0x42, 0xa1, 0xe2, 0x89, 0x50, 0x26, 0x3a, 0x76, 0x89, 0x9f, 0xfd, 0x35, 0x71,
	0xb2, 0x72, 0x9a, 0x37, 0x85, 0xd5, 0xd7, 0xcc, 0x1b, 0xf0, 0x4b, 0x84, 0x8c, 0x51, 0x6b, 0x7f,
	0x5e, 0xe8, 0x33, 0x3b, 0xb4, 0xc7, 0xf1, 0xea, 0xb5, 0x63, 0xd9, 0xc0, 0x18, 0xd5, 0x96, 0xe3,
	0x2b, 0x34, 0x3c, 0xe8, 0x86, 0x4f, 0x50, 0x77, 0x2b, 0xae, 0x7d, 0x5e, 0x4d, 0x89, 0x47, 0xe8,
	0xa8, 0xe6, 0xaa, 0x12, 0x3e, 0xa7, 0xf6, 0x67, 0xd1, 0xb9, 0x0c, 0x96, 0x8b, 0xcf, 0xdf, 0x9e,
	0x06, 0x1f, 0x5e, 0xfc, 0x6b, 0xc3, 0x4a, 0x0d, 0x9f, 0x44, 0x6a, 0x0d, 0x6d, 0xee, 0x41, 0xcb,
	0x6d, 0xee, 0x77, 0x2e, 0x09, 0x5d, 0x02, 0x17, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x77, 0xa9,
	0xe2, 0xaf, 0x36, 0x03, 0x00, 0x00,
}

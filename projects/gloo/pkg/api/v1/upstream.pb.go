// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: upstream.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import core_solo_io "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
import core_solo_io1 "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
// @solo-kit:resource
// @solo-kit:resource.short_name=us
// @solo-kit:resource.plural_name=upstreams
// @solo-kit:resource.group_name=gloo.solo.io
// @solo-kit:resource.version=v1
//
// Upstreams represent destination for routing HTTP requests. Upstreams can be compared to
// [clusters](https://www.envoyproxy.io/docs/envoy/latest/api-v1/cluster_manager/cluster.html?highlight=cluster) in Envoy terminology.
// Each upstream in Gloo has a type. Supported types include `static`, `kubernetes`, `aws`, `consul`, and more.
// Each upstream type is handled by a corresponding Gloo plugin.
type Upstream struct {
	// Type-specific configuration. Examples include static, kubernetes, and aws.
	// The type-specific config for the upstream is called a spec.
	UpstreamSpec *UpstreamSpec `protobuf:"bytes,2,opt,name=upstream_spec,json=upstreamSpec" json:"upstream_spec,omitempty"`
	// Status indicates the validation status of the resource. Status is read-only by clients, and set by gloo during validation
	Status core_solo_io1.Status `protobuf:"bytes,6,opt,name=status" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core_solo_io.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
	// Upstreams and their configuration can be automatically by Gloo Discovery
	// if this upstream is created or modified by Discovery, metadata about the operation will be placed here.
	DiscoveryMetadata *DiscoveryMetadata `protobuf:"bytes,8,opt,name=discovery_metadata,json=discoveryMetadata" json:"discovery_metadata,omitempty"`
}

func (m *Upstream) Reset()                    { *m = Upstream{} }
func (m *Upstream) String() string            { return proto.CompactTextString(m) }
func (*Upstream) ProtoMessage()               {}
func (*Upstream) Descriptor() ([]byte, []int) { return fileDescriptorUpstream, []int{0} }

func (m *Upstream) GetUpstreamSpec() *UpstreamSpec {
	if m != nil {
		return m.UpstreamSpec
	}
	return nil
}

func (m *Upstream) GetStatus() core_solo_io1.Status {
	if m != nil {
		return m.Status
	}
	return core_solo_io1.Status{}
}

func (m *Upstream) GetMetadata() core_solo_io.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core_solo_io.Metadata{}
}

func (m *Upstream) GetDiscoveryMetadata() *DiscoveryMetadata {
	if m != nil {
		return m.DiscoveryMetadata
	}
	return nil
}

// created by discovery services
type DiscoveryMetadata struct {
}

func (m *DiscoveryMetadata) Reset()                    { *m = DiscoveryMetadata{} }
func (m *DiscoveryMetadata) String() string            { return proto.CompactTextString(m) }
func (*DiscoveryMetadata) ProtoMessage()               {}
func (*DiscoveryMetadata) Descriptor() ([]byte, []int) { return fileDescriptorUpstream, []int{1} }

func init() {
	proto.RegisterType((*Upstream)(nil), "gloo.solo.io.Upstream")
	proto.RegisterType((*DiscoveryMetadata)(nil), "gloo.solo.io.DiscoveryMetadata")
}
func (this *Upstream) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Upstream)
	if !ok {
		that2, ok := that.(Upstream)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpstreamSpec.Equal(that1.UpstreamSpec) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.DiscoveryMetadata.Equal(that1.DiscoveryMetadata) {
		return false
	}
	return true
}
func (this *DiscoveryMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoveryMetadata)
	if !ok {
		that2, ok := that.(DiscoveryMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

func init() { proto.RegisterFile("upstream.proto", fileDescriptorUpstream) }

var fileDescriptorUpstream = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x6d, 0x91, 0x5a, 0x62, 0x2b, 0x34, 0x8a, 0xd4, 0x2e, 0xac, 0xcc, 0xca, 0x4d, 0x13,
	0xaa, 0x2e, 0xa4, 0x1b, 0xa1, 0x08, 0xae, 0x74, 0x31, 0xc5, 0x8d, 0x9b, 0x92, 0x66, 0xd2, 0x18,
	0xfb, 0x73, 0x43, 0x7e, 0x0a, 0xbe, 0x8c, 0x6b, 0x1f, 0xc5, 0xa7, 0xe8, 0xc2, 0x47, 0xf0, 0x09,
	0xa4, 0x69, 0xa6, 0x4c, 0x15, 0xc4, 0xd5, 0xcc, 0x99, 0x7b, 0xce, 0x77, 0x39, 0x77, 0xd0, 0x81,
	0xd7, 0xd6, 0x19, 0xc1, 0x66, 0x44, 0x1b, 0x70, 0x80, 0x6b, 0x72, 0x0a, 0x40, 0x2c, 0x4c, 0x81,
	0x28, 0x68, 0x75, 0xa4, 0x72, 0xcf, 0x7e, 0x44, 0x38, 0xcc, 0xa8, 0x04, 0x09, 0x34, 0x98, 0x46,
	0x7e, 0x1c, 0x54, 0x10, 0xe1, 0x6d, 0x1d, 0x6e, 0x75, 0x0b, 0xf6, 0x15, 0xa2, 0xa3, 0x60, 0xfd,
	0x9c, 0x28, 0x47, 0x99, 0x56, 0x74, 0xd1, 0xa5, 0x33, 0xe1, 0x58, 0xc6, 0x1c, 0x8b, 0x11, 0xfa,
	0x8f, 0x88, 0x75, 0xcc, 0x79, 0x1b, 0x03, 0x75, 0x3d, 0xf5, 0x52, 0xcd, 0xa3, 0x4c, 0xde, 0xca,
	0xa8, 0xfa, 0x18, 0x2b, 0xe0, 0x1b, 0x54, 0xcf, 0xeb, 0x0c, 0xad, 0x16, 0xbc, 0x59, 0x3e, 0x2b,
	0x9d, 0xef, 0x5f, 0xb4, 0x48, 0xb1, 0x14, 0xc9, 0xed, 0x03, 0x2d, 0x78, 0x5a, 0xf3, 0x05, 0x85,
	0xef, 0x50, 0x65, 0xbd, 0xac, 0x59, 0x09, 0xc9, 0x23, 0xc2, 0xc1, 0x88, 0x4d, 0x72, 0x10, 0x66,
	0xfd, 0x93, 0x8f, 0x65, 0x7b, 0xe7, 0x6b, 0xd9, 0x6e, 0x38, 0x61, 0x5d, 0xa6, 0xc6, 0xe3, 0x5e,
	0xa2, 0xe4, 0x1c, 0x8c, 0x48, 0xd2, 0x18, 0xc7, 0xd7, 0xa8, 0x9a, 0x17, 0x6d, 0xee, 0x05, 0xd4,
	0xf1, 0x36, 0xea, 0x3e, 0x4e, 0xfb, 0xbb, 0x2b, 0x58, 0xba, 0x71, 0xe3, 0x07, 0x84, 0x33, 0x65,
	0x39, 0x2c, 0x84, 0x79, 0x1d, 0x6e, 0x18, 0xd5, 0xc0, 0x68, 0x6f, 0x17, 0xb9, 0xcd, 0x7d, 0x39,
	0x2c, 0x6d, 0x64, 0x3f, 0x3f, 0x25, 0x87, 0xa8, 0xf1, 0xcb, 0xd7, 0xef, 0xbd, 0x7f, 0x9e, 0x96,
	0x9e, 0xae, 0xfe, 0xba, 0xbd, 0x36, 0xf0, 0x22, 0xb8, 0xb3, 0x74, 0xb5, 0x92, 0xea, 0x89, 0x8c,
	0x7f, 0x63, 0x54, 0x09, 0x87, 0xbf, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x46, 0x15, 0x1a, 0x09,
	0x3a, 0x02, 0x00, 0x00,
}

schema: schema.graphql

# Let gqlgen know where to put the generated server
exec:
  filename: graph/generated.go
  package: graph

# Let gqlgen know where to the generated models (if any)
model:
  filename: models/generated.go
  package: models

# Optional, turns on resolver stub generation
resolver:
  filename: resolver2.go # where to write them
  type: Resolver2  # whats the resolver root implementation type called?

# Tell gqlgen about any existing models you want to reuse for
# graphql. These normally come from the db or a remote api.
models:
  MapStringString:
    model: github.com/solo-io/solo-kit/projects/apiserver/pkg/graphql/customtypes.MapStringString
  UpstreamQuery:
    model: github.com/solo-io/solo-kit/projects/apiserver/pkg/graphql/customtypes.UpstreamQuery
  UpstreamMutation:
    model: github.com/solo-io/solo-kit/projects/apiserver/pkg/graphql/customtypes.UpstreamMutation
  VirtualServiceQuery:
    model: github.com/solo-io/solo-kit/projects/apiserver/pkg/graphql/customtypes.VirtualServiceQuery
  VirtualServiceMutation:
    model: github.com/solo-io/solo-kit/projects/apiserver/pkg/graphql/customtypes.VirtualServiceMutation
  ResolverMapQuery:
    model: github.com/solo-io/solo-kit/projects/apiserver/pkg/graphql/customtypes.ResolverMapQuery
  ResolverMapMutation:
    model: github.com/solo-io/solo-kit/projects/apiserver/pkg/graphql/customtypes.ResolverMapMutation

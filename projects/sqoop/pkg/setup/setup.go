package setup

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/reporter"
	"github.com/solo-io/solo-kit/pkg/utils/contextutils"
	"github.com/solo-io/solo-kit/pkg/utils/errutils"
	"github.com/solo-io/solo-kit/projects/sqoop/pkg/api/v1"
	"github.com/solo-io/solo-kit/projects/sqoop/pkg/syncer"
	gloov1 "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1"
	"context"
	"time"
	"github.com/solo-io/solo-kit/pkg/namespacing"
	"github.com/solo-io/solo-kit/pkg/namespacing/static"
	"github.com/solo-io/solo-kit/pkg/utils/kubeutils"
	"github.com/solo-io/solo-kit/projects/sqoop/pkg/engine"
	"github.com/solo-io/solo-kit/projects/sqoop/pkg/engine/router"
)

type Opts struct {
	writeNamespace string
	schemas        factory.ResourceClientFactoryOpts
	resolverMaps   factory.ResourceClientFactoryOpts
	proxies        factory.ResourceClientFactoryOpts
	watchOpts      clients.WatchOpts
	devMode        bool

	namespacer namespacing.Namespacer

	sidecarAddr string

	// TODO(ilackarms): remove upstreams here if not needed, right now only used for sample data
	upstreams factory.ResourceClientFactoryOpts
}

func NewOpts(
	writeNamespace string,
	schemas,
	resolverMaps,
	upstreams,
	proxies factory.ResourceClientFactoryOpts,
	namespacer namespacing.Namespacer,
	watchOpts clients.WatchOpts,
	sidecarAddr string,
	devMode bool,
) Opts {
	return Opts{
		writeNamespace: writeNamespace,
		schemas:        schemas,
		resolverMaps:   resolverMaps,
		upstreams:      upstreams,
		proxies:        proxies,
		namespacer:     namespacer,
		watchOpts:      watchOpts,
		devMode:        devMode,
		sidecarAddr:    sidecarAddr,
	}
}

func DefaultKubernetesConstructOpts() (Opts, error) {
	cfg, err := kubeutils.GetConfig("", "")
	if err != nil {
		return Opts{}, err
	}
	// clientset, err := kubernetes.NewForConfig(cfg)
	// if err != nil {
	// 	return Opts{}, err
	// }
	ctx := contextutils.WithLogger(context.Background(), "gateway")
	ctx = contextutils.SilenceLogger(ctx)
	return Opts{
		writeNamespace: "gloo-system",
		schemas: &factory.KubeResourceClientOpts{
			Crd: v1.SchemaCrd,
			Cfg: cfg,
		},
		resolverMaps: &factory.KubeResourceClientOpts{
			Crd: v1.ResolverMapCrd,
			Cfg: cfg,
		},
		proxies: &factory.KubeResourceClientOpts{
			Crd: gloov1.ProxyCrd,
			Cfg: cfg,
		},
		upstreams: &factory.KubeResourceClientOpts{
			Crd: gloov1.UpstreamCrd,
			Cfg: cfg,
		},
		namespacer: static.NewNamespacer([]string{"default", "gloo-system"}),
		watchOpts: clients.WatchOpts{
			Ctx:         ctx,
			RefreshRate: time.Minute,
		},
	}, nil
}

func Setup(opts Opts) error {
	// TODO: Ilackarms: move this to multi-eventloop
	namespaces, errs, err := opts.namespacer.Namespaces(opts.watchOpts)
	if err != nil {
		return err
	}
	for {
		select {
		case err := <-errs:
			return err
		case watchNamespaces := <-namespaces:
			err := setupForNamespaces(watchNamespaces, opts)
			if err != nil {
				return err
			}
		}
	}
}

func setupForNamespaces(watchNamespaces []string, opts Opts) error {
	opts.watchOpts = opts.watchOpts.WithDefaults()

	// TODO(ilackarms): this piece (initalizing clients) should really be generated by solo-kit
	proxyClientFactory := factory.NewResourceClientFactory(opts.proxies)
	proxyClient, err := gloov1.NewProxyClient(proxyClientFactory)
	if err != nil {
		return err
	}
	if err := proxyClient.Register(); err != nil {
		return err
	}
	proxyReconciler := gloov1.NewProxyReconciler(proxyClient)

	schemaClientFactory := factory.NewResourceClientFactory(opts.schemas)
	schemaClient, err := v1.NewSchemaClient(schemaClientFactory)
	if err != nil {
		return err
	}
	if err := schemaClient.Register(); err != nil {
		return err
	}

	resolverMapClientFactory := factory.NewResourceClientFactory(opts.resolverMaps)
	resolverMapClient, err := v1.NewResolverMapClient(resolverMapClientFactory)
	if err != nil {
		return err
	}
	if err := resolverMapClient.Register(); err != nil {
		return err
	}

	// TODO(ilackarms): Default Resource stuff. (might be a concern for solo-kit)
	// if _, err := gatewayClient.Write(defaults.DefaultGateway(opts.writeNamespace), clients.WriteOpts{
	// 	Ctx: opts.watchOpts.Ctx,
	// }); err != nil && !errors.IsExist(err) {
	// 	return err
	// }

	// TODO(ilackarms): Sample Resource stuff. (might be a concern for solo-kit)
	// if opts.devMode {
	// 	if err := addSampleData(opts, virtualServicesClient); err != nil {
	// 		return err
	// 	}
	// }

	emitter := v1.NewApiEmitter(resolverMapClient, schemaClient)

	rpt := reporter.NewReporter("sqoop", resolverMapClient.BaseClient(), schemaClient.BaseClient())
	writeErrs := make(chan error)
	/*
			proxyReconciler:   proxyReconciler,
			engine:            engine,
			router:            router,
	 */
	eng := engine.NewEngine(opts.sidecarAddr)

	rtr := router.NewRouter()

	sync := syncer.NewSyncer(opts.writeNamespace, rpt, writeErrs, proxyReconciler, resolverMapClient, eng, rtr)

	eventLoop := v1.NewApiEventLoop(emitter, sync)
	eventLoopErrs, err := eventLoop.Run(watchNamespaces, opts.watchOpts)
	if err != nil {
		return err
	}
	go errutils.AggregateErrs(opts.watchOpts.Ctx, writeErrs, eventLoopErrs, "event_loop")

	logger := contextutils.LoggerFrom(opts.watchOpts.Ctx)

	for {
		select {
		case err := <-writeErrs:
			logger.Errorf("error: %v", err)
		case <-opts.watchOpts.Ctx.Done():
			close(writeErrs)
			return nil
		}
	}
}

//
// func addSampleData(opts Opts, vsClient v1.VirtualServiceClient) error {
// 	upstreamClient, err := gloov1.NewUpstreamClient(factory.NewResourceClientFactory(opts.upstreams))
// 	if err != nil {
// 		return err
// 	}
// 	secretClient, err := gloov1.NewSecretClient(factory.NewResourceClientFactory(opts.secrets))
// 	if err != nil {
// 		return err
// 	}
// 	virtualServices, upstreams, secrets := samples.VirtualServices(), samples.Upstreams(), samples.Secrets()
// 	for _, item := range virtualServices {
// 		if _, err := vsClient.Write(item, clients.WriteOpts{}); err != nil && !errors.IsExist(err) {
// 			return err
// 		}
// 	}
// 	for _, item := range upstreams {
// 		if _, err := upstreamClient.Write(item, clients.WriteOpts{}); err != nil && !errors.IsExist(err) {
// 			return err
// 		}
// 	}
// 	for _, item := range secrets {
// 		if _, err := secretClient.Write(item, clients.WriteOpts{}); err != nil && !errors.IsExist(err) {
// 			return err
// 		}
// 	}
// 	return nil
// }

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ref.proto

package core

import (
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A way to reference resources across namespaces
// TODO(ilackarms): make upstreamname and secretref into ResourceRefs
type ResourceRef struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Cluster   string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (m *ResourceRef) Reset()         { *m = ResourceRef{} }
func (m *ResourceRef) String() string { return proto.CompactTextString(m) }
func (*ResourceRef) ProtoMessage()    {}
func (*ResourceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{0}
}
func (m *ResourceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceRef.Unmarshal(m, b)
}
func (m *ResourceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceRef.Marshal(b, m, deterministic)
}
func (m *ResourceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceRef.Merge(m, src)
}
func (m *ResourceRef) XXX_Size() int {
	return xxx_messageInfo_ResourceRef.Size(m)
}
func (m *ResourceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceRef.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceRef proto.InternalMessageInfo

func (m *ResourceRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResourceRef) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ResourceRef) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func init() {
	proto.RegisterType((*ResourceRef)(nil), "core.solo.io.ResourceRef")
}

func init() { proto.RegisterFile("ref.proto", fileDescriptor_65d958559ea81b29) }

var fileDescriptor_65d958559ea81b29 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x4a, 0x4d, 0xd3,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49, 0xce, 0x2f, 0x4a, 0xd5, 0x2b, 0xce, 0xcf, 0xc9,
	0xd7, 0xcb, 0xcc, 0x97, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x4b, 0xe8, 0x83, 0x58, 0x10, 0x35,
	0x4a, 0xe9, 0x5c, 0xdc, 0x41, 0xa9, 0xc5, 0xf9, 0xa5, 0x45, 0xc9, 0xa9, 0x41, 0xa9, 0x69, 0x42,
	0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6,
	0x90, 0x0c, 0x17, 0x27, 0x88, 0x2e, 0x2e, 0x48, 0x4c, 0x4e, 0x95, 0x60, 0x02, 0x4b, 0x20, 0x04,
	0x84, 0x24, 0xb8, 0xd8, 0x93, 0x73, 0x4a, 0x8b, 0x4b, 0x52, 0x8b, 0x24, 0x98, 0xc1, 0x72, 0x30,
	0xae, 0x15, 0xcf, 0x85, 0x85, 0xf2, 0x0c, 0x13, 0x16, 0xc9, 0x33, 0xcc, 0x58, 0x24, 0xcf, 0xe0,
	0x64, 0xbd, 0xe2, 0x91, 0x1c, 0x63, 0x94, 0x69, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72,
	0x7e, 0xae, 0x3e, 0xc8, 0x61, 0xba, 0x99, 0xf9, 0x10, 0x3a, 0x3b, 0xb3, 0x44, 0xbf, 0x20, 0x3b,
	0x5d, 0x3f, 0xb1, 0x20, 0x53, 0xbf, 0xcc, 0x50, 0xbf, 0x08, 0xea, 0xa6, 0x62, 0x7d, 0x90, 0x1f,
	0x92, 0xd8, 0xc0, 0x8e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xea, 0x8f, 0xb4, 0xdd,
	0x00, 0x00, 0x00,
}

func (this *ResourceRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceRef)
	if !ok {
		that2, ok := that.(ResourceRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	return true
}

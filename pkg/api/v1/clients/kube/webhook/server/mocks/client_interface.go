// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/webhook/server (interfaces: Webhook,KubeWebhook)

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockWebhook is a mock of Webhook interface
type MockWebhook struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookMockRecorder
}

// MockWebhookMockRecorder is the mock recorder for MockWebhook
type MockWebhookMockRecorder struct {
	mock *MockWebhook
}

// NewMockWebhook creates a new mock instance
func NewMockWebhook(ctrl *gomock.Controller) *MockWebhook {
	mock := &MockWebhook{ctrl: ctrl}
	mock.recorder = &MockWebhookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebhook) EXPECT() *MockWebhookMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockWebhook) Register(arg0 string, arg1 http.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockWebhookMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockWebhook)(nil).Register), arg0, arg1)
}

// Start mocks base method
func (m *MockWebhook) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockWebhookMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWebhook)(nil).Start), arg0)
}

// MockKubeWebhook is a mock of KubeWebhook interface
type MockKubeWebhook struct {
	ctrl     *gomock.Controller
	recorder *MockKubeWebhookMockRecorder
}

// MockKubeWebhookMockRecorder is the mock recorder for MockKubeWebhook
type MockKubeWebhookMockRecorder struct {
	mock *MockKubeWebhook
}

// NewMockKubeWebhook creates a new mock instance
func NewMockKubeWebhook(ctrl *gomock.Controller) *MockKubeWebhook {
	mock := &MockKubeWebhook{ctrl: ctrl}
	mock.recorder = &MockKubeWebhookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeWebhook) EXPECT() *MockKubeWebhookMockRecorder {
	return m.recorder
}

// InjectScheme mocks base method
func (m *MockKubeWebhook) InjectScheme(arg0 *runtime.Scheme) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectScheme", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectScheme indicates an expected call of InjectScheme
func (mr *MockKubeWebhookMockRecorder) InjectScheme(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectScheme", reflect.TypeOf((*MockKubeWebhook)(nil).InjectScheme), arg0)
}

// Path mocks base method
func (m *MockKubeWebhook) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (mr *MockKubeWebhookMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockKubeWebhook)(nil).Path))
}

// ServeHTTP mocks base method
func (m *MockKubeWebhook) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockKubeWebhookMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockKubeWebhook)(nil).ServeHTTP), arg0, arg1)
}

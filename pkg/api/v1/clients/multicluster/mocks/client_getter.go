// Code generated by MockGen. DO NOT EDIT.
// Source: multi_cluster_resource_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	resources "github.com/solo-io/solo-kit/pkg/api/v1/resources"
	rest "k8s.io/client-go/rest"
	reflect "reflect"
)

// MockClientGetter is a mock of ClientGetter interface
type MockClientGetter struct {
	ctrl     *gomock.Controller
	recorder *MockClientGetterMockRecorder
}

// MockClientGetterMockRecorder is the mock recorder for MockClientGetter
type MockClientGetterMockRecorder struct {
	mock *MockClientGetter
}

// NewMockClientGetter creates a new mock instance
func NewMockClientGetter(ctrl *gomock.Controller) *MockClientGetter {
	mock := &MockClientGetter{ctrl: ctrl}
	mock.recorder = &MockClientGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientGetter) EXPECT() *MockClientGetterMockRecorder {
	return m.recorder
}

// GetClient mocks base method
func (m *MockClientGetter) GetClient(cluster string, restConfig *rest.Config) (clients.ResourceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", cluster, restConfig)
	ret0, _ := ret[0].(clients.ResourceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient
func (mr *MockClientGetterMockRecorder) GetClient(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientGetter)(nil).GetClient), cluster, restConfig)
}

// MockMultiClusterResourceClient is a mock of MultiClusterResourceClient interface
type MockMultiClusterResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClusterResourceClientMockRecorder
}

// MockMultiClusterResourceClientMockRecorder is the mock recorder for MockMultiClusterResourceClient
type MockMultiClusterResourceClientMockRecorder struct {
	mock *MockMultiClusterResourceClient
}

// NewMockMultiClusterResourceClient creates a new mock instance
func NewMockMultiClusterResourceClient(ctrl *gomock.Controller) *MockMultiClusterResourceClient {
	mock := &MockMultiClusterResourceClient{ctrl: ctrl}
	mock.recorder = &MockMultiClusterResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMultiClusterResourceClient) EXPECT() *MockMultiClusterResourceClientMockRecorder {
	return m.recorder
}

// Kind mocks base method
func (m *MockMultiClusterResourceClient) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind
func (mr *MockMultiClusterResourceClientMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockMultiClusterResourceClient)(nil).Kind))
}

// NewResource mocks base method
func (m *MockMultiClusterResourceClient) NewResource() resources.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewResource")
	ret0, _ := ret[0].(resources.Resource)
	return ret0
}

// NewResource indicates an expected call of NewResource
func (mr *MockMultiClusterResourceClientMockRecorder) NewResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewResource", reflect.TypeOf((*MockMultiClusterResourceClient)(nil).NewResource))
}

// Register mocks base method
func (m *MockMultiClusterResourceClient) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockMultiClusterResourceClientMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockMultiClusterResourceClient)(nil).Register))
}

// Read mocks base method
func (m *MockMultiClusterResourceClient) Read(namespace, name string, opts clients.ReadOpts) (resources.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", namespace, name, opts)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockMultiClusterResourceClientMockRecorder) Read(namespace, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMultiClusterResourceClient)(nil).Read), namespace, name, opts)
}

// Write mocks base method
func (m *MockMultiClusterResourceClient) Write(resource resources.Resource, opts clients.WriteOpts) (resources.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", resource, opts)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockMultiClusterResourceClientMockRecorder) Write(resource, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMultiClusterResourceClient)(nil).Write), resource, opts)
}

// Delete mocks base method
func (m *MockMultiClusterResourceClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", namespace, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMultiClusterResourceClientMockRecorder) Delete(namespace, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMultiClusterResourceClient)(nil).Delete), namespace, name, opts)
}

// List mocks base method
func (m *MockMultiClusterResourceClient) List(namespace string, opts clients.ListOpts) (resources.ResourceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", namespace, opts)
	ret0, _ := ret[0].(resources.ResourceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMultiClusterResourceClientMockRecorder) List(namespace, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMultiClusterResourceClient)(nil).List), namespace, opts)
}

// Watch mocks base method
func (m *MockMultiClusterResourceClient) Watch(namespace string, opts clients.WatchOpts) (<-chan resources.ResourceList, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", namespace, opts)
	ret0, _ := ret[0].(<-chan resources.ResourceList)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch
func (mr *MockMultiClusterResourceClientMockRecorder) Watch(namespace, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMultiClusterResourceClient)(nil).Watch), namespace, opts)
}

// ClusterAdded mocks base method
func (m *MockMultiClusterResourceClient) ClusterAdded(cluster string, restConfig *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterAdded", cluster, restConfig)
}

// ClusterAdded indicates an expected call of ClusterAdded
func (mr *MockMultiClusterResourceClientMockRecorder) ClusterAdded(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAdded", reflect.TypeOf((*MockMultiClusterResourceClient)(nil).ClusterAdded), cluster, restConfig)
}

// ClusterRemoved mocks base method
func (m *MockMultiClusterResourceClient) ClusterRemoved(cluster string, restConfig *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterRemoved", cluster, restConfig)
}

// ClusterRemoved indicates an expected call of ClusterRemoved
func (mr *MockMultiClusterResourceClientMockRecorder) ClusterRemoved(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRemoved", reflect.TypeOf((*MockMultiClusterResourceClient)(nil).ClusterRemoved), cluster, restConfig)
}

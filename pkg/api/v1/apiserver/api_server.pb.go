// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api_server.proto

/*
Package apiserver is a generated protocol buffer package.

It is generated from these files:
	api_server.proto

It has these top-level messages:
	Resource
	ReadRequest
	ReadResponse
	WriteRequest
	WriteResponse
	DeleteRequest
	DeleteResponse
	ListRequest
	ListResponse
	WatchRequest
	WatchResponse
	RegisterRequest
	RegisterResponse
*/
package apiserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"
import core_api_v1 "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
import core_api_v11 "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Resource struct {
	Data     *google_protobuf1.Struct `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Status   core_api_v11.Status      `protobuf:"bytes,6,opt,name=status" json:"status"`
	Metadata core_api_v1.Metadata     `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{0} }

func (m *Resource) GetData() *google_protobuf1.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Resource) GetStatus() core_api_v11.Status {
	if m != nil {
		return m.Status
	}
	return core_api_v11.Status{}
}

func (m *Resource) GetMetadata() core_api_v1.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core_api_v1.Metadata{}
}

//
// GRPC stuff
type ReadRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{1} }

func (m *ReadRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ReadResponse struct {
	Resource *Resource `protobuf:"bytes,1,opt,name=resource" json:"resource,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{2} }

func (m *ReadResponse) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

type WriteRequest struct {
	Resource *Resource `protobuf:"bytes,1,opt,name=resource" json:"resource,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{3} }

func (m *WriteRequest) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

type WriteResponse struct {
	Resource *Resource `protobuf:"bytes,1,opt,name=resource" json:"resource,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{4} }

func (m *WriteResponse) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

type DeleteRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{5} }

func (m *DeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{6} }

type ListRequest struct {
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{7} }

func (m *ListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ListResponse struct {
	ResourceList []*Resource `protobuf:"bytes,1,rep,name=resource_list,json=resourceList" json:"resource_list,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{8} }

func (m *ListResponse) GetResourceList() []*Resource {
	if m != nil {
		return m.ResourceList
	}
	return nil
}

type WatchRequest struct {
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *WatchRequest) Reset()                    { *m = WatchRequest{} }
func (m *WatchRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()               {}
func (*WatchRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{9} }

func (m *WatchRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type WatchResponse struct {
	ResourceList []*Resource `protobuf:"bytes,1,rep,name=resource_list,json=resourceList" json:"resource_list,omitempty"`
}

func (m *WatchResponse) Reset()                    { *m = WatchResponse{} }
func (m *WatchResponse) String() string            { return proto.CompactTextString(m) }
func (*WatchResponse) ProtoMessage()               {}
func (*WatchResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{10} }

func (m *WatchResponse) GetResourceList() []*Resource {
	if m != nil {
		return m.ResourceList
	}
	return nil
}

type RegisterRequest struct {
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{11} }

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiServer, []int{12} }

func init() {
	proto.RegisterType((*Resource)(nil), "apiserver.api.v1.Resource")
	proto.RegisterType((*ReadRequest)(nil), "apiserver.api.v1.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "apiserver.api.v1.ReadResponse")
	proto.RegisterType((*WriteRequest)(nil), "apiserver.api.v1.WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "apiserver.api.v1.WriteResponse")
	proto.RegisterType((*DeleteRequest)(nil), "apiserver.api.v1.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "apiserver.api.v1.DeleteResponse")
	proto.RegisterType((*ListRequest)(nil), "apiserver.api.v1.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "apiserver.api.v1.ListResponse")
	proto.RegisterType((*WatchRequest)(nil), "apiserver.api.v1.WatchRequest")
	proto.RegisterType((*WatchResponse)(nil), "apiserver.api.v1.WatchResponse")
	proto.RegisterType((*RegisterRequest)(nil), "apiserver.api.v1.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "apiserver.api.v1.RegisterResponse")
}
func (this *Resource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resource)
	if !ok {
		that2, ok := that.(Resource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	return true
}
func (this *ReadRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReadRequest)
	if !ok {
		that2, ok := that.(ReadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *ReadResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReadResponse)
	if !ok {
		that2, ok := that.(ReadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resource.Equal(that1.Resource) {
		return false
	}
	return true
}
func (this *WriteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WriteRequest)
	if !ok {
		that2, ok := that.(WriteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resource.Equal(that1.Resource) {
		return false
	}
	return true
}
func (this *WriteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WriteResponse)
	if !ok {
		that2, ok := that.(WriteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resource.Equal(that1.Resource) {
		return false
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *DeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteResponse)
	if !ok {
		that2, ok := that.(DeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ResourceList) != len(that1.ResourceList) {
		return false
	}
	for i := range this.ResourceList {
		if !this.ResourceList[i].Equal(that1.ResourceList[i]) {
			return false
		}
	}
	return true
}
func (this *WatchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchRequest)
	if !ok {
		that2, ok := that.(WatchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *WatchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchResponse)
	if !ok {
		that2, ok := that.(WatchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ResourceList) != len(that1.ResourceList) {
		return false
	}
	for i := range this.ResourceList {
		if !this.ResourceList[i].Equal(that1.ResourceList[i]) {
			return false
		}
	}
	return true
}
func (this *RegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterRequest)
	if !ok {
		that2, ok := that.(RegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RegisterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterResponse)
	if !ok {
		that2, ok := that.(RegisterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiServer service

type ApiServerClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (ApiServer_WatchClient, error)
}

type apiServerClient struct {
	cc *grpc.ClientConn
}

func NewApiServerClient(cc *grpc.ClientConn) ApiServerClient {
	return &apiServerClient{cc}
}

func (c *apiServerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/apiserver.api.v1.ApiServer/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServerClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/apiserver.api.v1.ApiServer/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServerClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/apiserver.api.v1.ApiServer/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/apiserver.api.v1.ApiServer/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServerClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/apiserver.api.v1.ApiServer/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServerClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (ApiServer_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ApiServer_serviceDesc.Streams[0], c.cc, "/apiserver.api.v1.ApiServer/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServerWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiServer_WatchClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type apiServerWatchClient struct {
	grpc.ClientStream
}

func (x *apiServerWatchClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ApiServer service

type ApiServerServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Watch(*WatchRequest, ApiServer_WatchServer) error
}

func RegisterApiServerServer(s *grpc.Server, srv ApiServerServer) {
	s.RegisterService(&_ApiServer_serviceDesc, srv)
}

func _ApiServer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.api.v1.ApiServer/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiServer_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.api.v1.ApiServer/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiServer_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.api.v1.ApiServer/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.api.v1.ApiServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiServer_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.api.v1.ApiServer/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiServer_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServerServer).Watch(m, &apiServerWatchServer{stream})
}

type ApiServer_WatchServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type apiServerWatchServer struct {
	grpc.ServerStream
}

func (x *apiServerWatchServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ApiServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver.api.v1.ApiServer",
	HandlerType: (*ApiServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ApiServer_Register_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ApiServer_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _ApiServer_Write_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApiServer_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApiServer_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _ApiServer_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api_server.proto",
}

func init() { proto.RegisterFile("api_server.proto", fileDescriptorApiServer) }

var fileDescriptorApiServer = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xbf, 0xba, 0xf9, 0x92, 0x9b, 0x04, 0xc2, 0x00, 0xc2, 0xb2, 0x4a, 0x1b, 0xbc, 0xaa,
	0x54, 0x18, 0x37, 0x41, 0x2a, 0xcb, 0xaa, 0x15, 0xa2, 0x12, 0x50, 0x81, 0x9c, 0x45, 0x25, 0x36,
	0xd5, 0xc4, 0x1d, 0xdc, 0x51, 0x93, 0x8e, 0xf1, 0x8c, 0xf3, 0x42, 0x6c, 0x78, 0x14, 0x9e, 0x81,
	0x05, 0x0b, 0x9e, 0x04, 0x79, 0x7e, 0x1c, 0x07, 0x39, 0x69, 0xf9, 0x59, 0xd9, 0x9e, 0x7b, 0xee,
	0xb9, 0xe7, 0x8c, 0xcf, 0x0c, 0xf4, 0x49, 0xca, 0xce, 0x05, 0xcd, 0xe6, 0x34, 0xc3, 0x69, 0xc6,
	0x25, 0x47, 0xc5, 0x8a, 0x59, 0x20, 0x29, 0xc3, 0xf3, 0xa1, 0xff, 0x20, 0xe1, 0x09, 0x57, 0xc5,
	0xb0, 0x78, 0xd3, 0x38, 0x7f, 0x2b, 0xe1, 0x3c, 0x99, 0xd2, 0x50, 0x7d, 0x4d, 0xf2, 0x8f, 0xa1,
	0x90, 0x59, 0x1e, 0x4b, 0x53, 0x1d, 0x26, 0x4c, 0x5e, 0xe6, 0x13, 0x1c, 0xf3, 0x59, 0x28, 0xf8,
	0x94, 0x3f, 0x63, 0x5c, 0x3f, 0xaf, 0x98, 0x0c, 0x49, 0xca, 0xc2, 0xf9, 0x30, 0x9c, 0x51, 0x49,
	0x2e, 0x88, 0x24, 0xa6, 0x25, 0xbc, 0x45, 0x8b, 0x90, 0x44, 0xe6, 0x42, 0x37, 0x04, 0x9f, 0x1d,
	0x68, 0x45, 0x54, 0xf0, 0x3c, 0x8b, 0x29, 0xda, 0x03, 0xb7, 0xe0, 0xf2, 0xdc, 0x81, 0xb3, 0xdb,
	0x19, 0x3d, 0xc2, 0x5a, 0x1d, 0xb6, 0xea, 0xf0, 0x58, 0xa9, 0x8b, 0x14, 0x08, 0x0d, 0xa1, 0xa9,
	0x99, 0xbc, 0xa6, 0x82, 0xdf, 0xc7, 0x31, 0xcf, 0xa8, 0xf1, 0x8b, 0xc7, 0xaa, 0x74, 0xec, 0x7e,
	0xfd, 0xbe, 0xd3, 0x88, 0x0c, 0x10, 0xbd, 0x80, 0x96, 0xd5, 0xeb, 0xfd, 0xaf, 0x9a, 0x1e, 0x2e,
	0x35, 0x9d, 0x9a, 0xa2, 0x69, 0x2b, 0xc1, 0xc1, 0x21, 0x74, 0x22, 0x4a, 0x2e, 0x22, 0xfa, 0x29,
	0xa7, 0x42, 0x22, 0x04, 0xee, 0x35, 0x99, 0x51, 0xcf, 0x19, 0x38, 0xbb, 0xed, 0x48, 0xbd, 0xa3,
	0x2d, 0x68, 0x17, 0x4f, 0x91, 0x92, 0x98, 0x7a, 0xff, 0xa9, 0xc2, 0x62, 0x21, 0x78, 0x05, 0x5d,
	0x4d, 0x20, 0x52, 0x7e, 0x2d, 0x28, 0x3a, 0x80, 0x56, 0x66, 0x5c, 0x2b, 0x96, 0xce, 0xc8, 0xc7,
	0xbf, 0xfe, 0x33, 0x6c, 0xf7, 0x25, 0x2a, 0xb1, 0x05, 0xcf, 0x59, 0xc6, 0x24, 0xb5, 0x4a, 0xfe,
	0x94, 0xe7, 0x04, 0x7a, 0x86, 0xe7, 0x2f, 0x05, 0x1d, 0x41, 0xef, 0x25, 0x9d, 0xd2, 0x85, 0xa2,
	0xdf, 0xdf, 0x9b, 0x3e, 0xdc, 0xb1, 0x14, 0x5a, 0x4c, 0xb0, 0x07, 0x9d, 0xb7, 0x4c, 0x48, 0x4b,
	0xb9, 0xbe, 0xfd, 0x1d, 0x74, 0x35, 0xd8, 0x38, 0x39, 0x84, 0x9e, 0x55, 0x77, 0x3e, 0x65, 0x42,
	0x7a, 0xce, 0x60, 0xe3, 0x06, 0x3b, 0x5d, 0xdb, 0x50, 0x10, 0x05, 0x4f, 0xa1, 0x7b, 0x46, 0x64,
	0x7c, 0x79, 0xbb, 0xf1, 0xef, 0xa1, 0x67, 0xd0, 0xff, 0x6a, 0xfe, 0x3d, 0xb8, 0x1b, 0xd1, 0x84,
	0x09, 0x49, 0x33, 0x23, 0x21, 0x40, 0xd0, 0x5f, 0x2c, 0xe9, 0x39, 0xa3, 0x6f, 0x1b, 0xd0, 0x3e,
	0x4a, 0xd9, 0x58, 0x51, 0xa2, 0x71, 0x71, 0x8c, 0x34, 0x02, 0x3d, 0xa9, 0x1b, 0xb5, 0x44, 0xe8,
	0x07, 0xeb, 0x20, 0xe6, 0x2f, 0x34, 0xd0, 0x09, 0xb8, 0x45, 0x6a, 0xd1, 0xe3, 0x3a, 0x74, 0x79,
	0x1c, 0xfc, 0xed, 0x55, 0xe5, 0x92, 0xe8, 0x35, 0x6c, 0xaa, 0xb8, 0xa1, 0x1a, 0x68, 0x35, 0xcf,
	0xfe, 0xce, 0xca, 0x7a, 0xc9, 0x75, 0x0a, 0x4d, 0x1d, 0x17, 0x54, 0x03, 0x5e, 0xca, 0xa2, 0x3f,
	0x58, 0x0d, 0xa8, 0x7a, 0x2c, 0x76, 0xbd, 0xce, 0x63, 0x25, 0x83, 0x75, 0x1e, 0xab, 0xa9, 0x0b,
	0x1a, 0xe8, 0x0d, 0x6c, 0xaa, 0x20, 0xd4, 0x7a, 0xac, 0xe4, 0xe9, 0x66, 0xaa, 0x7d, 0xe7, 0xf8,
	0xe0, 0xcb, 0x8f, 0x6d, 0xe7, 0xc3, 0xfe, 0xba, 0xdb, 0x34, 0xbd, 0x4a, 0xec, 0x8d, 0x5a, 0xf2,
	0x4d, 0x9a, 0xea, 0xae, 0x7c, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xbe, 0xb5, 0x2e, 0x13,
	0x06, 0x00, 0x00,
}

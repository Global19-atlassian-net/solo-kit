// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/external/envoy/api/v2/core/http_uri.proto

package core

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Envoy external URI descriptor
type HttpUri struct {
	// The HTTP server URI. It should be a full FQDN with protocol, host and path.
	//
	// Example:
	//
	// .. code-block:: yaml
	//
	//    uri: https://www.googleapis.com/oauth2/v1/certs
	//
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Specify how `uri` is to be fetched. Today, this requires an explicit
	// cluster, but in the future we may support dynamic cluster creation or
	// inline DNS resolution. See `issue
	// <https://github.com/envoyproxy/envoy/issues/1606>`_.
	//
	// Types that are valid to be assigned to HttpUpstreamType:
	//	*HttpUri_Cluster
	HttpUpstreamType isHttpUri_HttpUpstreamType `protobuf_oneof:"http_upstream_type"`
	// Sets the maximum duration in milliseconds that a response can take to arrive upon request.
	Timeout              *types.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HttpUri) Reset()         { *m = HttpUri{} }
func (m *HttpUri) String() string { return proto.CompactTextString(m) }
func (*HttpUri) ProtoMessage()    {}
func (*HttpUri) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb8e18e656daa8, []int{0}
}
func (m *HttpUri) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpUri.Unmarshal(m, b)
}
func (m *HttpUri) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpUri.Marshal(b, m, deterministic)
}
func (m *HttpUri) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpUri.Merge(m, src)
}
func (m *HttpUri) XXX_Size() int {
	return xxx_messageInfo_HttpUri.Size(m)
}
func (m *HttpUri) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpUri.DiscardUnknown(m)
}

var xxx_messageInfo_HttpUri proto.InternalMessageInfo

type isHttpUri_HttpUpstreamType interface {
	isHttpUri_HttpUpstreamType()
	Equal(interface{}) bool
}

type HttpUri_Cluster struct {
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3,oneof" json:"cluster,omitempty"`
}

func (*HttpUri_Cluster) isHttpUri_HttpUpstreamType() {}

func (m *HttpUri) GetHttpUpstreamType() isHttpUri_HttpUpstreamType {
	if m != nil {
		return m.HttpUpstreamType
	}
	return nil
}

func (m *HttpUri) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HttpUri) GetCluster() string {
	if x, ok := m.GetHttpUpstreamType().(*HttpUri_Cluster); ok {
		return x.Cluster
	}
	return ""
}

func (m *HttpUri) GetTimeout() *types.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HttpUri) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HttpUri_Cluster)(nil),
	}
}

func init() {
	proto.RegisterType((*HttpUri)(nil), "envoy.api.v2.core.HttpUri")
}

func init() {
	proto.RegisterFile("api/external/envoy/api/v2/core/http_uri.proto", fileDescriptor_41cb8e18e656daa8)
}

var fileDescriptor_41cb8e18e656daa8 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x6b, 0x2a, 0x31,
	0x14, 0xc5, 0x8d, 0xe3, 0x7b, 0xf3, 0xcc, 0x73, 0xd3, 0x50, 0xa8, 0x55, 0xb0, 0x52, 0x28, 0xb8,
	0x31, 0x81, 0xe9, 0xbe, 0xd0, 0xa1, 0x0b, 0x97, 0x22, 0x74, 0xd3, 0x8d, 0x44, 0x4d, 0xc7, 0xe0,
	0xe8, 0x0d, 0xf1, 0x66, 0x98, 0xf9, 0x46, 0xa5, 0xd0, 0xbd, 0x74, 0xe5, 0x67, 0xe9, 0xce, 0x0f,
	0xd0, 0x7d, 0x99, 0x7f, 0x9b, 0x16, 0xba, 0xca, 0xe1, 0xdc, 0x73, 0x13, 0x7e, 0x27, 0x74, 0x2c,
	0x8d, 0x16, 0x2a, 0x45, 0x65, 0x77, 0x32, 0x16, 0x6a, 0x97, 0x40, 0x26, 0x72, 0x2b, 0x09, 0xc4,
	0x12, 0xac, 0x12, 0x6b, 0x44, 0x33, 0x77, 0x56, 0x73, 0x63, 0x01, 0x81, 0x9d, 0x15, 0x09, 0x2e,
	0x8d, 0xe6, 0x49, 0xc0, 0xf3, 0x44, 0x6f, 0x10, 0x01, 0x44, 0xb1, 0x12, 0x45, 0x60, 0xe1, 0x9e,
	0xc5, 0xca, 0x59, 0x89, 0x1a, 0x76, 0xe5, 0x4a, 0xef, 0x22, 0x91, 0xb1, 0x5e, 0x49, 0x54, 0xa2,
	0x16, 0xd5, 0xe0, 0x3c, 0x82, 0x08, 0x0a, 0x29, 0x72, 0x55, 0xb9, 0x4c, 0xa5, 0x58, 0x9a, 0x2a,
	0xc5, 0xd2, 0xbb, 0x7e, 0x23, 0xd4, 0x9f, 0x20, 0x9a, 0x47, 0xab, 0x59, 0x9f, 0x7a, 0xce, 0xea,
	0x2e, 0x19, 0x92, 0x51, 0x3b, 0x6c, 0xbf, 0x9f, 0x8e, 0x5e, 0xcb, 0x36, 0x87, 0x64, 0x96, 0xbb,
	0xec, 0x86, 0xfa, 0xcb, 0xd8, 0xed, 0x51, 0xd9, 0x6e, 0xf3, 0x5b, 0x60, 0xd2, 0x98, 0xd5, 0x33,
	0x76, 0x4f, 0x7d, 0xd4, 0x5b, 0x05, 0x0e, 0xbb, 0xde, 0x90, 0x8c, 0xfe, 0x07, 0x97, 0xbc, 0x84,
	0xe0, 0x35, 0x04, 0x7f, 0xa8, 0x20, 0xc2, 0x4e, 0x7e, 0x83, 0xff, 0x4a, 0x5a, 0xff, 0x48, 0xd0,
	0x98, 0xd5, 0x7b, 0x61, 0x9f, 0xb2, 0xb2, 0x1a, 0xb3, 0x47, 0xab, 0xe4, 0x76, 0x8e, 0x99, 0x51,
	0xec, 0xcf, 0xe1, 0x74, 0xf4, 0x48, 0x98, 0x1d, 0x3e, 0x5b, 0xe4, 0xe5, 0x63, 0x40, 0xe8, 0x95,
	0x06, 0x5e, 0x54, 0x66, 0x2c, 0xa4, 0x19, 0xff, 0xd1, 0x5e, 0xd8, 0xa9, 0xb8, 0xa6, 0xf9, 0xc3,
	0x53, 0xf2, 0x74, 0x17, 0x69, 0x5c, 0xbb, 0x05, 0x5f, 0xc2, 0x56, 0xec, 0x21, 0x86, 0xb1, 0x86,
	0xf2, 0xdc, 0x68, 0x14, 0x66, 0x13, 0x89, 0xdf, 0xff, 0x6b, 0xf1, 0xb7, 0x20, 0xb8, 0xfd, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0x88, 0x35, 0xa6, 0xc7, 0xd8, 0x01, 0x00, 0x00,
}

func (this *HttpUri) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpUri)
	if !ok {
		that2, ok := that.(HttpUri)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	if that1.HttpUpstreamType == nil {
		if this.HttpUpstreamType != nil {
			return false
		}
	} else if this.HttpUpstreamType == nil {
		return false
	} else if !this.HttpUpstreamType.Equal(that1.HttpUpstreamType) {
		return false
	}
	if !this.Timeout.Equal(that1.Timeout) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpUri_Cluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpUri_Cluster)
	if !ok {
		that2, ok := that.(HttpUri_Cluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	return true
}

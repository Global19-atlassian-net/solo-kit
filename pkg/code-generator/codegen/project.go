package codegen

import (
	"bytes"
	"strings"
	"text/template"

	"github.com/solo-io/solo-kit/pkg/errors"

	"github.com/iancoleman/strcase"
	"github.com/solo-io/go-utils/log"
	code_generator "github.com/solo-io/solo-kit/pkg/code-generator"
	"github.com/solo-io/solo-kit/pkg/code-generator/codegen/templates"
	"github.com/solo-io/solo-kit/pkg/code-generator/model"
)

const fileHeader = `// Code generated by solo-kit. DO NOT EDIT.

`

func GenerateProjectFiles(version *model.Version, skipOutOfPackageFiles, skipGeneratedTests bool) (code_generator.Files, error) {
	files, err := generateFilesForVersion(version)
	if err != nil {
		return nil, err
	}

	for _, res := range version.Resources {
		// only generate files for the resources in our group, otherwise we import
		if !version.VersionConfig.IsOurProto(res.Filename) && !res.IsCustom {
			log.Printf("not generating solo-kit "+
				"clients for resource %v.%v, "+
				"resource proto package must match version proto package %v", res.ProtoPackage, res.Name, version.ProtoPackage)
			continue
		} else if res.IsCustom && res.CustomResource.Imported {
			log.Printf("not generating solo-kit "+
				"clients for resource %v.%v, "+
				"custom resources from a different version are not generated", res.GoPackage, res.Name, version.VersionConfig.GoPackage)
			continue
		}

		fs, err := generateFilesForResource(res)
		if err != nil {
			return nil, err
		}
		files = append(files, fs...)
	}

	for _, res := range version.XDSResources {
		if skipOutOfPackageFiles && !version.VersionConfig.IsOurProto(res.Filename) {
			continue
		}
		fs, err := generateFilesForXdsResource(res)
		if err != nil {
			return nil, err
		}
		files = append(files, fs...)
	}

	for i := range files {
		files[i].Content = fileHeader + files[i].Content
	}
	if skipGeneratedTests {
		var filesWithoutTests code_generator.Files
		for _, file := range files {
			if strings.HasSuffix(file.Filename, "_test.go") {
				continue
			}
			filesWithoutTests = append(filesWithoutTests, file)
		}
		files = filesWithoutTests
	}
	return files, nil
}

func generateFilesForXdsResource(resource *model.XDSResource) (code_generator.Files, error) {
	var v code_generator.Files
	for suffix, tmpl := range map[string]*template.Template{
		"_xds.sk.sk.go": templates.XdsTemplate,
	} {
		content, err := generateXdsResourceFile(resource, tmpl)
		if err != nil {
			return nil, err
		}
		v = append(v, code_generator.File{
			Filename: strcase.ToSnake(resource.Name) + suffix,
			Content:  content,
		})
	}
	return v, nil
}

func generateFilesForResource(resource *model.Resource) (code_generator.Files, error) {
	var v code_generator.Files
	for suffix, tmpl := range map[string]*template.Template{
		".sk.go":            templates.ResourceTemplate,
		"_client.sk.go":     templates.ResourceClientTemplate,
		"_client_test.go":   templates.ResourceClientTestTemplate,
		"_reconciler.sk.go": templates.ResourceReconcilerTemplate,
	} {
		content, err := generateResourceFile(resource, tmpl)
		if err != nil {
			return nil, errors.Wrapf(err, "internal error: processing template '%v' for resource %v failed", tmpl.ParseName, resource.Name)
		}
		v = append(v, code_generator.File{
			Filename: strcase.ToSnake(resource.Name) + suffix,
			Content:  content,
		})
	}
	return v, nil
}

func generateFilesForVersion(version *model.Version) (code_generator.Files, error) {
	var v code_generator.Files
	for suffix, tmpl := range map[string]*template.Template{
		"_suite_test.go": templates.ProjectTestSuiteTemplate,
	} {
		content, err := generateVersionFile(version, tmpl)
		if err != nil {
			return nil, errors.Wrapf(err, "internal error: processing template '%v' for apigroup %v failed", tmpl.ParseName, version.VersionConfig.ApiGroup.Name)
		}
		v = append(v, code_generator.File{
			Filename: strcase.ToSnake(version.VersionConfig.ApiGroup.Name) + suffix,
			Content:  content,
		})
	}
	return v, nil
}

func generateXdsResourceFile(resource *model.XDSResource, tmpl *template.Template) (string, error) {
	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, resource); err != nil {
		return "", err
	}
	return buf.String(), nil
}

func generateResourceFile(resource *model.Resource, tmpl *template.Template) (string, error) {
	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, resource); err != nil {
		return "", err
	}
	return buf.String(), nil
}

func generateVersionFile(version *model.Version, tmpl *template.Template) (string, error) {
	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, version); err != nil {
		return "", err
	}
	return buf.String(), nil
}

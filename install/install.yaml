apiVersion: v1
kind: Namespace
metadata:
  name: gloo-system
---
#rbac for control-plane
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "secrets", "endpoints", "configmaps"]
  verbs: ["get", "watch", "list"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "create"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "create"]
- apiGroups: ["gloo.solo.io"]
  resources: ["upstreams", "virtualservices", "roles"]
  verbs: ["*"]
---
#rbac for function-discovery
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-discovery-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "watch", "list"]
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["*"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["gloo.solo.io"]
  resources: ["upstreams", "virtualservices"]
  verbs: ["*"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-cluster-admin-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-role
  apiGroup: rbac.authorization.k8s.io

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-discovery-cluster-admin-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-discovery-role
  apiGroup: rbac.authorization.k8s.io

---
#rbac for knative and upstream-discovery
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-knative-upstream-discovery-role
rules:
- apiGroups: ["serving.knative.dev"]
  resources: ["services"]
  verbs: ["get", "watch", "list"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-knative-upstream-discovery-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-knative-upstream-discovery-role
  apiGroup: rbac.authorization.k8s.io

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-cluster-MEGA-admin-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: upstreams.gloo.solo.io
spec:
  group: gloo.solo.io
  names:
    kind: Upstream
    listKind: UpstreamList
    plural: upstreams
    singular: upstream
  scope: Namespaced
  version: v1

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: virtualservices.gloo.solo.io
spec:
  group: gloo.solo.io
  names:
    kind: VirtualService
    listKind: VirtualServiceList
    plural: virtualservices
    singular: virtualservice
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: roles.gloo.solo.io
spec:
  group: gloo.solo.io
  names:
    kind: Role
    listKind: RoleList
    plural: roles
    singular: role
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: attributes.gloo.solo.io
spec:
  group: gloo.solo.io
  names:
    kind: Attribute
    listKind: AttributeList
    plural: attributes
    singular: attribute
  scope: Namespaced
  version: v1



---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  namespace: gloo-system
  name: control-plane
  labels:
    gloo: control-plane
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: control-plane
  template:
    metadata:
      labels:
        gloo: control-plane
    spec:
      imagePullSecrets:
      - name: solo-bot-docker-hub
      containers:
        - name: control-plane
          image: soloio/control-plane-ee:v1-369-ga72b4cf-1
          ports:
            - name: grpc-ads
              containerPort: 8080
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  namespace: gloo-system
  name: control-plane
  labels:
    gloo: control-plane
spec:
  ports:
    - port: 8080
      protocol: TCP
      name: grpc-ads
  selector:
    gloo: control-plane



---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  namespace: gloo-system
  name: gloo-i
  labels:
    gloo: gloo-i
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gloo-i
  template:
    metadata:
      labels:
        gloo: gloo-i
    spec:
      imagePullSecrets:
      - name: solo-bot-docker-hub
      containers:
        - name: gloo-i
          image: soloio/gloo-i:v1-370-g8705433
          ports:
            - name: grpc-ads
              containerPort: 80
              protocol: TCP
        - name: apiserver
          image: soloio/apiserver-ee:v1-364-g63d027e
          env:
          - name: OAUTH_CLIENT
            value: gloo
          - name: OAUTH_SERVER
            value: https://ec2-34-205-146-63.compute-1.amazonaws.com:8443/oauth/authorize
            
          ports:
            - name: grpc-ads
              containerPort: 8082
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  namespace: gloo-system
  name: gloo-i
  labels:
    gloo: gloo-i
spec:
  ports:
    - port: 80
      protocol: TCP
      name: grpc-ads
  selector:
    gloo: gloo-i






---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  namespace: gloo-system
  name: ingress
  labels:
    gloo: ingress
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: ingress
  template:
    metadata:
      labels:
        gloo: ingress
    spec:
      imagePullSecrets:
      - name: solo-bot-docker-hub
      containers:
      - name: ingress
        image: soloio/data-plane-ee:v1-304-gce45551
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      volumes:
      - name: envoy-config
        configMap:
          name: ingress-config
---
apiVersion: v1
kind: Service
metadata:
  namespace: gloo-system
  name: ingress
  labels:
    gloo: ingress
spec:
  ports:
    - port: 8080
      protocol: TCP
      name: http
  selector:
    gloo: ingress

---
# Source: gloo/templates/ingress-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-config
  namespace: gloo-system
data:
  envoy.yaml: |
    node:
      cluster: ignress
      id: "{{.PodName}}.{{.PodNamespace}}"
      metadata:
        role: "gloo-system~gateway-proxy"
    static_resources:
      clusters:
      - name: xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: xds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: control-plane
                    port_value: 8080
        http2_protocol_options: {}
        type: STRICT_DNS
    dynamic_resources:
      ads_config:
        api_type: GRPC
        grpc_services:
        - envoy_grpc: {cluster_name: xds_cluster}
      cds_config:
        ads: {}
      lds_config:
        ads: {}
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 19000

// Code generated by solo-kit. DO NOT EDIT.

package v2alpha1

import (
	"fmt"

	testing_solo_io "github.com/solo-io/solo-kit/test/mocks/v1"

	"encoding/binary"
	"hash/fnv"

	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type TestingSnapshot struct {
	Mocks MockResourceList
	Fakes testing_solo_io.FakeResourceList
}

func (s TestingSnapshot) Clone() TestingSnapshot {
	return TestingSnapshot{
		Mocks: s.Mocks.Clone(),
		Fakes: s.Fakes.Clone(),
	}
}

func (s TestingSnapshot) Hash() uint64 {
	return hashutils.HashAll(
		s.hashMocks(),
		s.hashFakes(),
	)
}

func (s TestingSnapshot) hashMocks() uint64 {
	hasher := fnv.New64()
	var int64buf [8]byte
	for _, element := range s.Mocks {
		hashValue := hashutils.HashAll(element)
		binary.LittleEndian.PutUint64(int64buf[:], hashValue)
		hasher.Write(int64buf[:])
	}

	return hasher.Sum64()
}

func (s TestingSnapshot) hashFakes() uint64 {
	hasher := fnv.New64()
	var int64buf [8]byte
	for _, element := range s.Fakes {
		hashValue := hashutils.HashAll(element)
		binary.LittleEndian.PutUint64(int64buf[:], hashValue)
		hasher.Write(int64buf[:])
	}

	return hasher.Sum64()
}

func (s TestingSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	fields = append(fields, zap.Uint64("mocks", s.hashMocks()))
	fields = append(fields, zap.Uint64("fakes", s.hashFakes()))

	return append(fields, zap.Uint64("snapshotHash", s.Hash()))
}

type TestingSnapshotStringer struct {
	Version uint64
	Mocks   []string
	Fakes   []string
}

func (ss TestingSnapshotStringer) String() string {
	s := fmt.Sprintf("TestingSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Mocks %v\n", len(ss.Mocks))
	for _, name := range ss.Mocks {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Fakes %v\n", len(ss.Fakes))
	for _, name := range ss.Fakes {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s TestingSnapshot) Stringer() TestingSnapshotStringer {
	return TestingSnapshotStringer{
		Version: s.Hash(),
		Mocks:   s.Mocks.NamespacesDotNames(),
		Fakes:   s.Fakes.NamespacesDotNames(),
	}
}

// Code generated by solo-kit. DO NOT EDIT.

package v2alpha1

import (
	"sync"

	"github.com/solo-io/go-utils/errors"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/wrapper"
	"github.com/solo-io/solo-kit/pkg/multicluster"
	"k8s.io/client-go/rest"
)

type FrequentlyChangingAnnotationsResourceMultiClusterClient interface {
	multicluster.ClusterHandler
	FrequentlyChangingAnnotationsResourceInterface
}

type frequentlyChangingAnnotationsResourceMultiClusterClient struct {
	clients      map[string]FrequentlyChangingAnnotationsResourceClient
	clientAccess sync.RWMutex
	aggregator   wrapper.WatchAggregator
	factoryFor   factory.ResourceFactoryForCluster
}

func NewFrequentlyChangingAnnotationsResourceMultiClusterClient(getFactory factory.ResourceFactoryForCluster) FrequentlyChangingAnnotationsResourceMultiClusterClient {
	return NewFrequentlyChangingAnnotationsResourceClientWithWatchAggregator(nil, getFactory)
}

func NewFrequentlyChangingAnnotationsResourceMultiClusterClientWithWatchAggregator(aggregator wrapper.WatchAggregator, getFactory factory.ResourceFactoryForCluster) FrequentlyChangingAnnotationsResourceMultiClusterClient {
	return &frequentlyChangingAnnotationsResourceMultiClusterClient{
		clients:      make(map[string]FrequentlyChangingAnnotationsResourceClient),
		clientAccess: sync.RWMutex{},
		aggregator:   aggregator,
		factoryFor:   getFactory,
	}
}

func (c *frequentlyChangingAnnotationsResourceMultiClusterClient) interfaceFor(cluster string) (FrequentlyChangingAnnotationsResourceInterface, error) {
	c.clientAccess.RLock()
	defer c.clientAccess.RUnlock()
	if client, ok := c.clients[cluster]; ok {
		return client, nil
	}
	return nil, errors.Errorf("%v.%v client not found for cluster %v", "v2alpha1", "FrequentlyChangingAnnotationsResource", cluster)
}

func (c *frequentlyChangingAnnotationsResourceMultiClusterClient) ClusterAdded(cluster string, restConfig *rest.Config) {
	client, err := NewFrequentlyChangingAnnotationsResourceClient(c.factoryFor(cluster, restConfig))
	if err != nil {
		return
	}
	if err := client.Register(); err != nil {
		return
	}
	c.clientAccess.Lock()
	defer c.clientAccess.Unlock()
	c.clients[cluster] = client
	if c.aggregator != nil {
		c.aggregator.AddWatch(client.BaseClient())
	}
}

func (c *frequentlyChangingAnnotationsResourceMultiClusterClient) ClusterRemoved(cluster string, restConfig *rest.Config) {
	c.clientAccess.Lock()
	defer c.clientAccess.Unlock()
	if client, ok := c.clients[cluster]; ok {
		delete(c.clients, cluster)
		if c.aggregator != nil {
			c.aggregator.RemoveWatch(client.BaseClient())
		}
	}
}

func (c *frequentlyChangingAnnotationsResourceMultiClusterClient) Read(namespace, name string, opts clients.ReadOpts) (*FrequentlyChangingAnnotationsResource, error) {
	clusterInterface, err := c.interfaceFor(opts.Cluster)
	if err != nil {
		return nil, err
	}
	return clusterInterface.Read(namespace, name, opts)
}

func (c *frequentlyChangingAnnotationsResourceMultiClusterClient) Write(frequentlyChangingAnnotationsResource *FrequentlyChangingAnnotationsResource, opts clients.WriteOpts) (*FrequentlyChangingAnnotationsResource, error) {
	clusterInterface, err := c.interfaceFor(frequentlyChangingAnnotationsResource.GetMetadata().GetCluster())
	if err != nil {
		return nil, err
	}
	return clusterInterface.Write(frequentlyChangingAnnotationsResource, opts)
}

func (c *frequentlyChangingAnnotationsResourceMultiClusterClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	clusterInterface, err := c.interfaceFor(opts.Cluster)
	if err != nil {
		return err
	}
	return clusterInterface.Delete(namespace, name, opts)
}

func (c *frequentlyChangingAnnotationsResourceMultiClusterClient) List(namespace string, opts clients.ListOpts) (FrequentlyChangingAnnotationsResourceList, error) {
	clusterInterface, err := c.interfaceFor(opts.Cluster)
	if err != nil {
		return nil, err
	}
	return clusterInterface.List(namespace, opts)
}

func (c *frequentlyChangingAnnotationsResourceMultiClusterClient) Watch(namespace string, opts clients.WatchOpts) (<-chan FrequentlyChangingAnnotationsResourceList, <-chan error, error) {
	clusterInterface, err := c.interfaceFor(opts.Cluster)
	if err != nil {
		return nil, nil, err
	}
	return clusterInterface.Watch(namespace, opts)
}

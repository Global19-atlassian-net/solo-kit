// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mock_resources.proto

/*
Package mocks is a generated protocol buffer package.

It is generated from these files:
	mock_resources.proto

It has these top-level messages:
	MockResource
	FakeResource
	MockData
*/
package mocks

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import core_solo_io "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
import core_solo_io1 "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
// @solo-kit:resource
// @solo-kit:resource.short_name=mk
// @solo-kit:resource.plural_name=Mocks
// @solo-kit:resource.group_name=testing.solo.io
// @solo-kit:resource.version=v1
type MockResource struct {
	Data     string                `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status   core_solo_io1.Status  `protobuf:"bytes,6,opt,name=status" json:"status"`
	Metadata core_solo_io.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
}

func (m *MockResource) Reset()                    { *m = MockResource{} }
func (m *MockResource) String() string            { return proto.CompactTextString(m) }
func (*MockResource) ProtoMessage()               {}
func (*MockResource) Descriptor() ([]byte, []int) { return fileDescriptorMockResources, []int{0} }

func (m *MockResource) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *MockResource) GetStatus() core_solo_io1.Status {
	if m != nil {
		return m.Status
	}
	return core_solo_io1.Status{}
}

func (m *MockResource) GetMetadata() core_solo_io.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core_solo_io.Metadata{}
}

//
// @solo-kit:resource
// @solo-kit:resource.short_name=fk
// @solo-kit:resource.plural_name=Fakes
// @solo-kit:resource.group_name=testing.solo.io
// @solo-kit:resource.version=v1
type FakeResource struct {
	Count    uint32                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Status   core_solo_io1.Status  `protobuf:"bytes,6,opt,name=status" json:"status"`
	Metadata core_solo_io.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
}

func (m *FakeResource) Reset()                    { *m = FakeResource{} }
func (m *FakeResource) String() string            { return proto.CompactTextString(m) }
func (*FakeResource) ProtoMessage()               {}
func (*FakeResource) Descriptor() ([]byte, []int) { return fileDescriptorMockResources, []int{1} }

func (m *FakeResource) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FakeResource) GetStatus() core_solo_io1.Status {
	if m != nil {
		return m.Status
	}
	return core_solo_io1.Status{}
}

func (m *FakeResource) GetMetadata() core_solo_io.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core_solo_io.Metadata{}
}

//
// @solo-kit:resource
// @solo-kit:resource.data_type
// @solo-kit:resource.short_name=mkd
// @solo-kit:resource.plural_name=MockDatas
// @solo-kit:resource.group_name=testing.solo.io
// @solo-kit:resource.version=v1
type MockData struct {
	Data     map[string]string     `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status   core_solo_io1.Status  `protobuf:"bytes,6,opt,name=status" json:"status"`
	Metadata core_solo_io.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
}

func (m *MockData) Reset()                    { *m = MockData{} }
func (m *MockData) String() string            { return proto.CompactTextString(m) }
func (*MockData) ProtoMessage()               {}
func (*MockData) Descriptor() ([]byte, []int) { return fileDescriptorMockResources, []int{2} }

func (m *MockData) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MockData) GetStatus() core_solo_io1.Status {
	if m != nil {
		return m.Status
	}
	return core_solo_io1.Status{}
}

func (m *MockData) GetMetadata() core_solo_io.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core_solo_io.Metadata{}
}

func init() {
	proto.RegisterType((*MockResource)(nil), "mocks.api.v1.MockResource")
	proto.RegisterType((*FakeResource)(nil), "mocks.api.v1.FakeResource")
	proto.RegisterType((*MockData)(nil), "mocks.api.v1.MockData")
}
func (this *MockResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MockResource)
	if !ok {
		that2, ok := that.(MockResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	return true
}
func (this *FakeResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FakeResource)
	if !ok {
		that2, ok := that.(FakeResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	return true
}
func (this *MockData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MockData)
	if !ok {
		that2, ok := that.(MockData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("mock_resources.proto", fileDescriptorMockResources) }

var fileDescriptorMockResources = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x52, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0xfd, 0xdc, 0xf6, 0x2b, 0xad, 0x5b, 0x24, 0x64, 0x45, 0x28, 0xea, 0x00, 0x55, 0x07, 0xd4,
	0x01, 0x6c, 0xb5, 0x20, 0x51, 0x31, 0x56, 0xc0, 0xd6, 0x25, 0x6c, 0x2c, 0xc8, 0x35, 0x56, 0xb0,
	0xd2, 0xf4, 0x46, 0xb1, 0x13, 0xa9, 0x6f, 0x81, 0x78, 0x0a, 0x1e, 0x85, 0xa7, 0x60, 0x60, 0xe1,
	0x35, 0x90, 0x1d, 0x37, 0x82, 0x05, 0x31, 0xc1, 0x92, 0xdc, 0x9f, 0x73, 0xae, 0x8e, 0xcf, 0xbd,
	0x38, 0x48, 0x41, 0x24, 0x77, 0xb9, 0xd4, 0x50, 0xe4, 0x42, 0x6a, 0x9a, 0xe5, 0x60, 0x80, 0xf4,
	0x6d, 0x55, 0x53, 0x9e, 0x29, 0x5a, 0x4e, 0x06, 0x41, 0x0c, 0x31, 0xb8, 0x06, 0xb3, 0x51, 0x85,
	0x19, 0x4c, 0x62, 0x65, 0x1e, 0x8a, 0x25, 0x15, 0x90, 0x32, 0x0d, 0x2b, 0x38, 0x51, 0x50, 0xfd,
	0x13, 0x65, 0x18, 0xcf, 0x14, 0x2b, 0x27, 0x2c, 0x95, 0x86, 0xdf, 0x73, 0xc3, 0x3d, 0x85, 0xfd,
	0x80, 0xa2, 0x0d, 0x37, 0x85, 0xd7, 0x31, 0x7a, 0x44, 0xb8, 0xbf, 0x00, 0x91, 0x44, 0x5e, 0x1f,
	0x21, 0xb8, 0x65, 0xe7, 0x85, 0x68, 0x88, 0xc6, 0xdd, 0xc8, 0xc5, 0x64, 0x8a, 0xdb, 0x15, 0x29,
	0x6c, 0x0f, 0xd1, 0xb8, 0x37, 0x0d, 0xa8, 0x80, 0x5c, 0x52, 0x3b, 0x98, 0x2a, 0xa0, 0x37, 0xae,
	0x37, 0x6f, 0xbd, 0xbc, 0x1e, 0xfe, 0x8b, 0x3c, 0x92, 0xcc, 0x70, 0x67, 0xab, 0x2d, 0xdc, 0x71,
	0xac, 0xfd, 0xaf, 0xac, 0x85, 0xef, 0x7a, 0x5e, 0x8d, 0x1e, 0x3d, 0x21, 0xdc, 0xbf, 0xe6, 0x89,
	0xac, 0x25, 0x05, 0xf8, 0xbf, 0x80, 0x62, 0x6d, 0x9c, 0xa6, 0xdd, 0xa8, 0x4a, 0x7e, 0x59, 0xd4,
	0x3b, 0xc2, 0x1d, 0xeb, 0xd3, 0xa5, 0xf5, 0xe3, 0xac, 0xf6, 0xa8, 0x39, 0xee, 0x4d, 0x87, 0xf4,
	0xf3, 0x2e, 0xe9, 0x16, 0x45, 0xed, 0xe7, 0x6a, 0x6d, 0xf2, 0xcd, 0x5f, 0xb8, 0x38, 0x38, 0xc7,
	0xdd, 0x5a, 0x00, 0xd9, 0xc3, 0xcd, 0x44, 0x6e, 0xfc, 0x4e, 0x6d, 0x68, 0x3d, 0x2d, 0xf9, 0xaa,
	0x90, 0x61, 0xc3, 0xd5, 0xaa, 0xe4, 0xa2, 0x31, 0x43, 0xf3, 0xe3, 0xe7, 0xb7, 0x03, 0x74, 0x7b,
	0xf4, 0xdd, 0x21, 0x19, 0xa9, 0x0d, 0x73, 0x8f, 0x5e, 0xb6, 0xdd, 0x19, 0x9d, 0x7e, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x1b, 0xc0, 0xac, 0xf4, 0xe6, 0x02, 0x00, 0x00,
}

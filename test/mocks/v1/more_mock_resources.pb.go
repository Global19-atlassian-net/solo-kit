// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/test/mocks/api/v1/more_mock_resources.proto

package v1 // import "github.com/solo-io/solo-kit/test/mocks/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
import _ "github.com/gogo/protobuf/gogoproto"
import core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import bytes "bytes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
// Description of the AnotherMockResource
type AnotherMockResource struct {
	Metadata             core.Metadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata"`
	Status               core.Status   `protobuf:"bytes,6,opt,name=status" json:"status"`
	BasicField           string        `protobuf:"bytes,2,opt,name=basic_field,json=basicField,proto3" json:"basic_field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AnotherMockResource) Reset()         { *m = AnotherMockResource{} }
func (m *AnotherMockResource) String() string { return proto.CompactTextString(m) }
func (*AnotherMockResource) ProtoMessage()    {}
func (*AnotherMockResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_more_mock_resources_e651f451d558a53f, []int{0}
}
func (m *AnotherMockResource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnotherMockResource.Unmarshal(m, b)
}
func (m *AnotherMockResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnotherMockResource.Marshal(b, m, deterministic)
}
func (dst *AnotherMockResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnotherMockResource.Merge(dst, src)
}
func (m *AnotherMockResource) XXX_Size() int {
	return xxx_messageInfo_AnotherMockResource.Size(m)
}
func (m *AnotherMockResource) XXX_DiscardUnknown() {
	xxx_messageInfo_AnotherMockResource.DiscardUnknown(m)
}

var xxx_messageInfo_AnotherMockResource proto.InternalMessageInfo

func (m *AnotherMockResource) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *AnotherMockResource) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *AnotherMockResource) GetBasicField() string {
	if m != nil {
		return m.BasicField
	}
	return ""
}

type ClusterResource struct {
	Metadata core.Metadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata"`
	Status   core.Status   `protobuf:"bytes,6,opt,name=status" json:"status"`
	// comments that go above the basic field in our docs
	BasicField           string   `protobuf:"bytes,2,opt,name=basic_field,json=basicField,proto3" json:"basic_field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterResource) Reset()         { *m = ClusterResource{} }
func (m *ClusterResource) String() string { return proto.CompactTextString(m) }
func (*ClusterResource) ProtoMessage()    {}
func (*ClusterResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_more_mock_resources_e651f451d558a53f, []int{1}
}
func (m *ClusterResource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterResource.Unmarshal(m, b)
}
func (m *ClusterResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterResource.Marshal(b, m, deterministic)
}
func (dst *ClusterResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterResource.Merge(dst, src)
}
func (m *ClusterResource) XXX_Size() int {
	return xxx_messageInfo_ClusterResource.Size(m)
}
func (m *ClusterResource) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterResource.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterResource proto.InternalMessageInfo

func (m *ClusterResource) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *ClusterResource) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *ClusterResource) GetBasicField() string {
	if m != nil {
		return m.BasicField
	}
	return ""
}

//
// @solo-kit:xds-service=ExampleXDSService
// @solo-kit:resource.no_references
type ExampleXDSResource struct {
	// @solo-kit:resource.name
	FavoriteMeme         string   `protobuf:"bytes,1,opt,name=favorite_meme,json=favoriteMeme,proto3" json:"favorite_meme,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExampleXDSResource) Reset()         { *m = ExampleXDSResource{} }
func (m *ExampleXDSResource) String() string { return proto.CompactTextString(m) }
func (*ExampleXDSResource) ProtoMessage()    {}
func (*ExampleXDSResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_more_mock_resources_e651f451d558a53f, []int{2}
}
func (m *ExampleXDSResource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExampleXDSResource.Unmarshal(m, b)
}
func (m *ExampleXDSResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExampleXDSResource.Marshal(b, m, deterministic)
}
func (dst *ExampleXDSResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleXDSResource.Merge(dst, src)
}
func (m *ExampleXDSResource) XXX_Size() int {
	return xxx_messageInfo_ExampleXDSResource.Size(m)
}
func (m *ExampleXDSResource) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleXDSResource.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleXDSResource proto.InternalMessageInfo

func (m *ExampleXDSResource) GetFavoriteMeme() string {
	if m != nil {
		return m.FavoriteMeme
	}
	return ""
}

func init() {
	proto.RegisterType((*AnotherMockResource)(nil), "testing.solo.io.AnotherMockResource")
	proto.RegisterType((*ClusterResource)(nil), "testing.solo.io.ClusterResource")
	proto.RegisterType((*ExampleXDSResource)(nil), "testing.solo.io.ExampleXDSResource")
}
func (this *AnotherMockResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnotherMockResource)
	if !ok {
		that2, ok := that.(AnotherMockResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if this.BasicField != that1.BasicField {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ClusterResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterResource)
	if !ok {
		that2, ok := that.(ClusterResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if this.BasicField != that1.BasicField {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExampleXDSResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExampleXDSResource)
	if !ok {
		that2, ok := that.(ExampleXDSResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FavoriteMeme != that1.FavoriteMeme {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExampleXDSServiceClient is the client API for ExampleXDSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExampleXDSServiceClient interface {
	StreamExampleXDSResource(ctx context.Context, opts ...grpc.CallOption) (ExampleXDSService_StreamExampleXDSResourceClient, error)
	IncrementalExampleXDSResource(ctx context.Context, opts ...grpc.CallOption) (ExampleXDSService_IncrementalExampleXDSResourceClient, error)
	FetchExampleXDSResource(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error)
}

type exampleXDSServiceClient struct {
	cc *grpc.ClientConn
}

func NewExampleXDSServiceClient(cc *grpc.ClientConn) ExampleXDSServiceClient {
	return &exampleXDSServiceClient{cc}
}

func (c *exampleXDSServiceClient) StreamExampleXDSResource(ctx context.Context, opts ...grpc.CallOption) (ExampleXDSService_StreamExampleXDSResourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExampleXDSService_serviceDesc.Streams[0], "/testing.solo.io.ExampleXDSService/StreamExampleXDSResource", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleXDSServiceStreamExampleXDSResourceClient{stream}
	return x, nil
}

type ExampleXDSService_StreamExampleXDSResourceClient interface {
	Send(*v2.DiscoveryRequest) error
	Recv() (*v2.DiscoveryResponse, error)
	grpc.ClientStream
}

type exampleXDSServiceStreamExampleXDSResourceClient struct {
	grpc.ClientStream
}

func (x *exampleXDSServiceStreamExampleXDSResourceClient) Send(m *v2.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleXDSServiceStreamExampleXDSResourceClient) Recv() (*v2.DiscoveryResponse, error) {
	m := new(v2.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleXDSServiceClient) IncrementalExampleXDSResource(ctx context.Context, opts ...grpc.CallOption) (ExampleXDSService_IncrementalExampleXDSResourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExampleXDSService_serviceDesc.Streams[1], "/testing.solo.io.ExampleXDSService/IncrementalExampleXDSResource", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleXDSServiceIncrementalExampleXDSResourceClient{stream}
	return x, nil
}

type ExampleXDSService_IncrementalExampleXDSResourceClient interface {
	Send(*v2.IncrementalDiscoveryRequest) error
	Recv() (*v2.IncrementalDiscoveryResponse, error)
	grpc.ClientStream
}

type exampleXDSServiceIncrementalExampleXDSResourceClient struct {
	grpc.ClientStream
}

func (x *exampleXDSServiceIncrementalExampleXDSResourceClient) Send(m *v2.IncrementalDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleXDSServiceIncrementalExampleXDSResourceClient) Recv() (*v2.IncrementalDiscoveryResponse, error) {
	m := new(v2.IncrementalDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleXDSServiceClient) FetchExampleXDSResource(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error) {
	out := new(v2.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/testing.solo.io.ExampleXDSService/FetchExampleXDSResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleXDSServiceServer is the server API for ExampleXDSService service.
type ExampleXDSServiceServer interface {
	StreamExampleXDSResource(ExampleXDSService_StreamExampleXDSResourceServer) error
	IncrementalExampleXDSResource(ExampleXDSService_IncrementalExampleXDSResourceServer) error
	FetchExampleXDSResource(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error)
}

func RegisterExampleXDSServiceServer(s *grpc.Server, srv ExampleXDSServiceServer) {
	s.RegisterService(&_ExampleXDSService_serviceDesc, srv)
}

func _ExampleXDSService_StreamExampleXDSResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleXDSServiceServer).StreamExampleXDSResource(&exampleXDSServiceStreamExampleXDSResourceServer{stream})
}

type ExampleXDSService_StreamExampleXDSResourceServer interface {
	Send(*v2.DiscoveryResponse) error
	Recv() (*v2.DiscoveryRequest, error)
	grpc.ServerStream
}

type exampleXDSServiceStreamExampleXDSResourceServer struct {
	grpc.ServerStream
}

func (x *exampleXDSServiceStreamExampleXDSResourceServer) Send(m *v2.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleXDSServiceStreamExampleXDSResourceServer) Recv() (*v2.DiscoveryRequest, error) {
	m := new(v2.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExampleXDSService_IncrementalExampleXDSResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleXDSServiceServer).IncrementalExampleXDSResource(&exampleXDSServiceIncrementalExampleXDSResourceServer{stream})
}

type ExampleXDSService_IncrementalExampleXDSResourceServer interface {
	Send(*v2.IncrementalDiscoveryResponse) error
	Recv() (*v2.IncrementalDiscoveryRequest, error)
	grpc.ServerStream
}

type exampleXDSServiceIncrementalExampleXDSResourceServer struct {
	grpc.ServerStream
}

func (x *exampleXDSServiceIncrementalExampleXDSResourceServer) Send(m *v2.IncrementalDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleXDSServiceIncrementalExampleXDSResourceServer) Recv() (*v2.IncrementalDiscoveryRequest, error) {
	m := new(v2.IncrementalDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExampleXDSService_FetchExampleXDSResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleXDSServiceServer).FetchExampleXDSResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.solo.io.ExampleXDSService/FetchExampleXDSResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleXDSServiceServer).FetchExampleXDSResource(ctx, req.(*v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExampleXDSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testing.solo.io.ExampleXDSService",
	HandlerType: (*ExampleXDSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchExampleXDSResource",
			Handler:    _ExampleXDSService_FetchExampleXDSResource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamExampleXDSResource",
			Handler:       _ExampleXDSService_StreamExampleXDSResource_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "IncrementalExampleXDSResource",
			Handler:       _ExampleXDSService_IncrementalExampleXDSResource_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/solo-io/solo-kit/test/mocks/api/v1/more_mock_resources.proto",
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-kit/test/mocks/api/v1/more_mock_resources.proto", fileDescriptor_more_mock_resources_e651f451d558a53f)
}

var fileDescriptor_more_mock_resources_e651f451d558a53f = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x3d, 0x6f, 0x13, 0x41,
	0x10, 0xcd, 0x3a, 0xc6, 0x22, 0x1b, 0x50, 0xe0, 0xb0, 0x82, 0x65, 0x41, 0x1c, 0x39, 0x42, 0x38,
	0x11, 0xdc, 0xe2, 0xa3, 0x01, 0x77, 0x84, 0x10, 0x44, 0xe1, 0xc6, 0x6e, 0x10, 0x8d, 0xb5, 0x5e,
	0x4f, 0xce, 0x2b, 0xdf, 0xde, 0x98, 0xdd, 0xbd, 0x13, 0x91, 0xa8, 0x2c, 0xd1, 0xd2, 0xf0, 0x27,
	0xf8, 0x27, 0x40, 0x4d, 0x4f, 0x81, 0xf8, 0x03, 0xfe, 0x07, 0xe8, 0xbe, 0x0c, 0x56, 0x02, 0x32,
	0x05, 0x52, 0xaa, 0xbb, 0x9b, 0xf7, 0xde, 0xbe, 0x7d, 0xb3, 0x3b, 0x47, 0x9f, 0xfb, 0xd2, 0x8e,
	0xa3, 0xa1, 0x2b, 0x50, 0x31, 0x83, 0x01, 0xde, 0x97, 0x98, 0x3d, 0x27, 0xd2, 0x32, 0x0b, 0xc6,
	0x32, 0x85, 0x62, 0x62, 0x18, 0x9f, 0x4a, 0x16, 0xb7, 0x99, 0x42, 0x0d, 0x83, 0xa4, 0x32, 0xd0,
	0x60, 0x30, 0xd2, 0x02, 0x8c, 0x3b, 0xd5, 0x68, 0xd1, 0xd9, 0x4a, 0xc8, 0x32, 0xf4, 0xdd, 0x44,
	0xed, 0x4a, 0xac, 0x57, 0x7d, 0xf4, 0x31, 0xc5, 0x58, 0xf2, 0x96, 0xd1, 0xea, 0xed, 0xbf, 0xf9,
	0x15, 0x26, 0x60, 0xf9, 0x88, 0x5b, 0x9e, 0x4b, 0xd8, 0x0a, 0x12, 0x63, 0xb9, 0x8d, 0xcc, 0x3f,
	0x78, 0x14, 0xdf, 0xb9, 0xe4, 0x16, 0x84, 0x31, 0x9e, 0x66, 0xa0, 0xc7, 0x46, 0xd2, 0x08, 0x8c,
	0x41, 0x9f, 0x16, 0xa8, 0x8f, 0xe8, 0x07, 0x90, 0xc2, 0x3c, 0x0c, 0xd1, 0x72, 0x2b, 0x31, 0xcc,
	0xed, 0x9a, 0x5f, 0x08, 0xbd, 0xf1, 0x24, 0x44, 0x3b, 0x06, 0xdd, 0x45, 0x31, 0xe9, 0xe5, 0x8d,
	0x71, 0x1e, 0xd1, 0xcb, 0x45, 0x92, 0x1a, 0xd9, 0x25, 0xad, 0x4d, 0x6f, 0xdb, 0x15, 0xa8, 0xa1,
	0xe8, 0x90, 0xdb, 0xcd, 0xd1, 0xc3, 0xf2, 0xe7, 0x6f, 0x8d, 0xb5, 0xde, 0x82, 0xed, 0x78, 0xb4,
	0x92, 0x05, 0xaa, 0x55, 0x52, 0x5d, 0x75, 0x59, 0xd7, 0x4f, 0xb1, 0x5c, 0x95, 0x33, 0x9d, 0x06,
	0xdd, 0x1c, 0x72, 0x23, 0xc5, 0xe0, 0x44, 0x42, 0x30, 0xaa, 0x95, 0x76, 0x49, 0x6b, 0xa3, 0x47,
	0xd3, 0xd2, 0x71, 0x52, 0xe9, 0xec, 0xcd, 0xe6, 0xe5, 0x4b, 0x74, 0x9d, 0x2b, 0x3d, 0x9b, 0x97,
	0xb7, 0x9d, 0x2a, 0xcf, 0xb6, 0x9c, 0x1c, 0xe6, 0xe2, 0x2c, 0x9b, 0x9f, 0x08, 0xdd, 0x7a, 0x1a,
	0x44, 0xc6, 0x82, 0xbe, 0xa8, 0x39, 0xee, 0x64, 0x39, 0x44, 0x90, 0xe4, 0x70, 0x9c, 0x6b, 0x22,
	0xdb, 0xee, 0x22, 0xc3, 0x6c, 0x5e, 0x2e, 0xd5, 0x48, 0xf3, 0x31, 0x75, 0x9e, 0xbd, 0xe1, 0x6a,
	0x1a, 0xc0, 0xcb, 0xa3, 0xfe, 0x22, 0xcb, 0x1e, 0xbd, 0x7a, 0xc2, 0x63, 0xd4, 0xd2, 0xc2, 0x40,
	0x81, 0x82, 0x34, 0xd0, 0x46, 0xef, 0x4a, 0x51, 0xec, 0x82, 0x02, 0xef, 0xdd, 0x3a, 0xbd, 0xfe,
	0x4b, 0xdb, 0x07, 0x1d, 0x4b, 0x01, 0x0e, 0xa7, 0xb5, 0xbe, 0xd5, 0xc0, 0xd5, 0x39, 0xcb, 0xee,
	0xb8, 0xe9, 0xfd, 0x71, 0xf9, 0x54, 0xba, 0xb1, 0xe7, 0x1e, 0x15, 0xf7, 0xa7, 0x07, 0xaf, 0x23,
	0x30, 0xb6, 0xde, 0xf8, 0x23, 0x6e, 0xa6, 0x18, 0x1a, 0x68, 0xae, 0xb5, 0xc8, 0x03, 0xe2, 0xbc,
	0xa5, 0xb7, 0x5f, 0x84, 0x42, 0x83, 0x82, 0xd0, 0xf2, 0xe0, 0x1c, 0x9f, 0xfd, 0xe5, 0x75, 0x7e,
	0x23, 0x9f, 0xb1, 0x3c, 0x58, 0x85, 0xba, 0xe4, 0xfe, 0x9e, 0xd0, 0x9b, 0xc7, 0x60, 0xc5, 0xf8,
	0x7f, 0x04, 0xf4, 0x66, 0x5f, 0x7f, 0x7c, 0x28, 0xdd, 0x6b, 0xde, 0x5d, 0x9a, 0xaf, 0xce, 0x99,
	0x36, 0x17, 0x8e, 0x1d, 0x72, 0x70, 0xc8, 0x3e, 0x7e, 0xdf, 0x21, 0xaf, 0xf6, 0x57, 0xfc, 0x43,
	0xc5, 0xed, 0x61, 0x25, 0x1d, 0xc8, 0x87, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x10, 0xb9,
	0x97, 0xd5, 0x04, 0x00, 0x00,
}

// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sort"

	"github.com/gogo/protobuf/proto"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/hashutils"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TODO: modify as needed to populate additional fields
func NewClusterScopedResource(namespace, name string) *ClusterScopedResource {
	return &ClusterScopedResource{
		Metadata: core.Metadata{
			Name:      name,
			Namespace: namespace,
		},
	}
}

func (r *ClusterScopedResource) SetStatus(status core.Status) {
	r.Status = status
}

func (r *ClusterScopedResource) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *ClusterScopedResource) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.BasicField,
	)
}

type ClusterScopedResourceList []*ClusterScopedResource
type ClusterScopedResourceByNamespace map[string]ClusterScopedResourceList

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list ClusterScopedResourceList) Find(namespace, name string) (*ClusterScopedResource, error) {
	for _, clusterScopedResource := range list {
		if clusterScopedResource.Metadata.Name == name {
			if namespace == "" || clusterScopedResource.Metadata.Namespace == namespace {
				return clusterScopedResource, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find clusterScopedResource %v.%v", namespace, name)
}

func (list ClusterScopedResourceList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, clusterScopedResource := range list {
		ress = append(ress, clusterScopedResource)
	}
	return ress
}

func (list ClusterScopedResourceList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, clusterScopedResource := range list {
		ress = append(ress, clusterScopedResource)
	}
	return ress
}

func (list ClusterScopedResourceList) Names() []string {
	var names []string
	for _, clusterScopedResource := range list {
		names = append(names, clusterScopedResource.Metadata.Name)
	}
	return names
}

func (list ClusterScopedResourceList) NamespacesDotNames() []string {
	var names []string
	for _, clusterScopedResource := range list {
		names = append(names, clusterScopedResource.Metadata.Namespace+"."+clusterScopedResource.Metadata.Name)
	}
	return names
}

func (list ClusterScopedResourceList) Sort() ClusterScopedResourceList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].Metadata.Less(list[j].Metadata)
	})
	return list
}

func (list ClusterScopedResourceList) Clone() ClusterScopedResourceList {
	var clusterScopedResourceList ClusterScopedResourceList
	for _, clusterScopedResource := range list {
		clusterScopedResourceList = append(clusterScopedResourceList, proto.Clone(clusterScopedResource).(*ClusterScopedResource))
	}
	return clusterScopedResourceList
}

func (list ClusterScopedResourceList) Each(f func(element *ClusterScopedResource)) {
	for _, clusterScopedResource := range list {
		f(clusterScopedResource)
	}
}

func (list ClusterScopedResourceList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *ClusterScopedResource) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

func (list ClusterScopedResourceList) ByNamespace() ClusterScopedResourceByNamespace {
	byNamespace := make(ClusterScopedResourceByNamespace)
	for _, clusterScopedResource := range list {
		byNamespace.Add(clusterScopedResource)
	}
	return byNamespace
}

func (byNamespace ClusterScopedResourceByNamespace) Add(clusterScopedResource ...*ClusterScopedResource) {
	for _, item := range clusterScopedResource {
		byNamespace[item.Metadata.Namespace] = append(byNamespace[item.Metadata.Namespace], item)
	}
}

func (byNamespace ClusterScopedResourceByNamespace) Clear(namespace string) {
	delete(byNamespace, namespace)
}

func (byNamespace ClusterScopedResourceByNamespace) List() ClusterScopedResourceList {
	var list ClusterScopedResourceList
	for _, clusterScopedResourceList := range byNamespace {
		list = append(list, clusterScopedResourceList...)
	}
	return list.Sort()
}

func (byNamespace ClusterScopedResourceByNamespace) Clone() ClusterScopedResourceByNamespace {
	return byNamespace.List().Clone().ByNamespace()
}

var _ resources.Resource = &ClusterScopedResource{}

// Kubernetes Adapter for ClusterScopedResource

func (o *ClusterScopedResource) GetObjectKind() schema.ObjectKind {
	t := ClusterScopedResourceCrd.TypeMeta()
	return &t
}

func (o *ClusterScopedResource) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*ClusterScopedResource)
}

var ClusterScopedResourceCrd = crd.NewCrd("testing.solo.io",
	"clusterscopedresource",
	"testing.solo.io",
	"v1",
	"ClusterScopedResource",
	"csr",
	true,
	&ClusterScopedResource{})

// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type ClusterScopedResourceClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*ClusterScopedResource, error)
	Write(resource *ClusterScopedResource, opts clients.WriteOpts) (*ClusterScopedResource, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (ClusterScopedResourceList, error)
	Watch(namespace string, opts clients.WatchOpts) (<-chan ClusterScopedResourceList, <-chan error, error)
}

type clusterScopedResourceClient struct {
	rc clients.ResourceClient
}

func NewClusterScopedResourceClient(rcFactory factory.ResourceClientFactory) (ClusterScopedResourceClient, error) {
	return NewClusterScopedResourceClientWithToken(rcFactory, "")
}

func NewClusterScopedResourceClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ClusterScopedResourceClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &ClusterScopedResource{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base ClusterScopedResource resource client")
	}
	return NewClusterScopedResourceClientWithBase(rc), nil
}

func NewClusterScopedResourceClientWithBase(rc clients.ResourceClient) ClusterScopedResourceClient {
	return &clusterScopedResourceClient{
		rc: rc,
	}
}

func (client *clusterScopedResourceClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *clusterScopedResourceClient) Register() error {
	return client.rc.Register()
}

func (client *clusterScopedResourceClient) Read(namespace, name string, opts clients.ReadOpts) (*ClusterScopedResource, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ClusterScopedResource), nil
}

func (client *clusterScopedResourceClient) Write(clusterScopedResource *ClusterScopedResource, opts clients.WriteOpts) (*ClusterScopedResource, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(clusterScopedResource, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ClusterScopedResource), nil
}

func (client *clusterScopedResourceClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()
	return client.rc.Delete(namespace, name, opts)
}

func (client *clusterScopedResourceClient) List(namespace string, opts clients.ListOpts) (ClusterScopedResourceList, error) {
	opts = opts.WithDefaults()
	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToClusterScopedResource(resourceList), nil
}

func (client *clusterScopedResourceClient) Watch(namespace string, opts clients.WatchOpts) (<-chan ClusterScopedResourceList, <-chan error, error) {
	opts = opts.WithDefaults()
	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	clusterScopedResourceChan := make(chan ClusterScopedResourceList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				clusterScopedResourceChan <- convertToClusterScopedResource(resourceList)
			case <-opts.Ctx.Done():
				close(clusterScopedResourceChan)
				return
			}
		}
	}()
	return clusterScopedResourceChan, errs, nil
}

func convertToClusterScopedResource(resources resources.ResourceList) ClusterScopedResourceList {
	var clusterScopedResourceList ClusterScopedResourceList
	for _, resource := range resources {
		clusterScopedResourceList = append(clusterScopedResourceList, resource.(*ClusterScopedResource))
	}
	return clusterScopedResourceList
}

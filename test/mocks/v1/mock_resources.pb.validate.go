// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/test/mocks/api/v1/mock_resources.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on MockResource with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MockResource) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MockResourceValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MockResourceValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Data

	// no validation rules for SomeDumbField

	switch m.TestOneofFields.(type) {

	case *MockResource_OneofOne:
		// no validation rules for OneofOne

	case *MockResource_OneofTwo:
		// no validation rules for OneofTwo

	}

	return nil
}

// MockResourceValidationError is the validation error returned by
// MockResource.Validate if the designated constraints aren't met.
type MockResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MockResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MockResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MockResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MockResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MockResourceValidationError) ErrorName() string { return "MockResourceValidationError" }

// Error satisfies the builtin error interface
func (e MockResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMockResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MockResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MockResourceValidationError{}

// Validate checks the field values on FakeResource with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FakeResource) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FakeResourceValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FakeResourceValidationError is the validation error returned by
// FakeResource.Validate if the designated constraints aren't met.
type FakeResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FakeResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FakeResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FakeResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FakeResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FakeResourceValidationError) ErrorName() string { return "FakeResourceValidationError" }

// Error satisfies the builtin error interface
func (e FakeResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFakeResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FakeResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FakeResourceValidationError{}

// Validate checks the field values on MockXdsResourceConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MockXdsResourceConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Domain

	return nil
}

// MockXdsResourceConfigValidationError is the validation error returned by
// MockXdsResourceConfig.Validate if the designated constraints aren't met.
type MockXdsResourceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MockXdsResourceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MockXdsResourceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MockXdsResourceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MockXdsResourceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MockXdsResourceConfigValidationError) ErrorName() string {
	return "MockXdsResourceConfigValidationError"
}

// Error satisfies the builtin error interface
func (e MockXdsResourceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMockXdsResourceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MockXdsResourceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MockXdsResourceConfigValidationError{}

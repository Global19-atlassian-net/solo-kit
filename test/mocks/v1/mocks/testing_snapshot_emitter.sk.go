// Code generated by MockGen. DO NOT EDIT.
// Source: ./test/mocks/v1/testing_snapshot_emitter.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"
	v1 "github.com/solo-io/solo-kit/test/mocks/v1"
)

// MockTestingEmitter is a mock of TestingEmitter interface
type MockTestingEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockTestingEmitterMockRecorder
}

// MockTestingEmitterMockRecorder is the mock recorder for MockTestingEmitter
type MockTestingEmitterMockRecorder struct {
	mock *MockTestingEmitter
}

// NewMockTestingEmitter creates a new mock instance
func NewMockTestingEmitter(ctrl *gomock.Controller) *MockTestingEmitter {
	mock := &MockTestingEmitter{ctrl: ctrl}
	mock.recorder = &MockTestingEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTestingEmitter) EXPECT() *MockTestingEmitterMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockTestingEmitter) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockTestingEmitterMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTestingEmitter)(nil).Register))
}

// MockResource mocks base method
func (m *MockTestingEmitter) MockResource() v1.MockResourceWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MockResource")
	ret0, _ := ret[0].(v1.MockResourceWatcher)
	return ret0
}

// MockResource indicates an expected call of MockResource
func (mr *MockTestingEmitterMockRecorder) MockResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MockResource", reflect.TypeOf((*MockTestingEmitter)(nil).MockResource))
}

// FakeResource mocks base method
func (m *MockTestingEmitter) FakeResource() v1.FakeResourceWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FakeResource")
	ret0, _ := ret[0].(v1.FakeResourceWatcher)
	return ret0
}

// FakeResource indicates an expected call of FakeResource
func (mr *MockTestingEmitterMockRecorder) FakeResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FakeResource", reflect.TypeOf((*MockTestingEmitter)(nil).FakeResource))
}

// ClusterResource mocks base method
func (m *MockTestingEmitter) ClusterResource() v1.ClusterResourceWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterResource")
	ret0, _ := ret[0].(v1.ClusterResourceWatcher)
	return ret0
}

// ClusterResource indicates an expected call of ClusterResource
func (mr *MockTestingEmitterMockRecorder) ClusterResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterResource", reflect.TypeOf((*MockTestingEmitter)(nil).ClusterResource))
}

// MockCustomType mocks base method
func (m *MockTestingEmitter) MockCustomType() v1.MockCustomTypeWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MockCustomType")
	ret0, _ := ret[0].(v1.MockCustomTypeWatcher)
	return ret0
}

// MockCustomType indicates an expected call of MockCustomType
func (mr *MockTestingEmitterMockRecorder) MockCustomType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MockCustomType", reflect.TypeOf((*MockTestingEmitter)(nil).MockCustomType))
}

// Pod mocks base method
func (m *MockTestingEmitter) Pod() kubernetes.PodWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pod")
	ret0, _ := ret[0].(kubernetes.PodWatcher)
	return ret0
}

// Pod indicates an expected call of Pod
func (mr *MockTestingEmitterMockRecorder) Pod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pod", reflect.TypeOf((*MockTestingEmitter)(nil).Pod))
}

// Snapshots mocks base method
func (m *MockTestingEmitter) Snapshots(watchNamespaces *clients.NamespacesByResourceWatcher, opts clients.WatchOpts) (<-chan *v1.TestingSnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", watchNamespaces, opts)
	ret0, _ := ret[0].(<-chan *v1.TestingSnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockTestingEmitterMockRecorder) Snapshots(watchNamespaces, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockTestingEmitter)(nil).Snapshots), watchNamespaces, opts)
}
